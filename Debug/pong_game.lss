
pong_game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00002e40  00002ed4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000194  0080016c  0080016c  00002f40  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000520  00000000  00000000  00002fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004761  00000000  00000000  000034fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000187f  00000000  00000000  00007c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029de  00000000  00000000  000094dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e28  00000000  00000000  0000bebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000137b  00000000  00000000  0000cce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f42  00000000  00000000  0000e05f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f0  00000000  00000000  00010fa1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 99 01 	jmp	0x332	; 0x332 <__ctors_end>
       4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
       8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
       c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      10:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      14:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__vector_5>
      18:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      1c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      20:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      24:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__vector_9>
      28:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      2c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      30:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      34:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      38:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      3c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      40:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__vector_16>
      44:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      48:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      4c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      50:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <__vector_20>
      54:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__vector_21>
      58:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      5c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      60:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_24>
      64:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      68:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      6c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      70:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      74:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      78:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
      7c:	e5 0c       	add	r14, r5
      7e:	9b 0c       	add	r9, r11
      80:	ea 0c       	add	r14, r10
      82:	ea 0c       	add	r14, r10
      84:	ea 0c       	add	r14, r10
      86:	ea 0c       	add	r14, r10
      88:	ea 0c       	add	r14, r10
      8a:	ea 0c       	add	r14, r10
      8c:	8f 0c       	add	r8, r15
      8e:	93 0c       	add	r9, r3
      90:	e8 0c       	add	r14, r8
      92:	ea 0c       	add	r14, r10
      94:	97 0c       	add	r9, r7
      96:	a7 0c       	add	r10, r7
      98:	ea 0c       	add	r14, r10
      9a:	ea 0c       	add	r14, r10
      9c:	9f 0c       	add	r9, r15
      9e:	ea 0c       	add	r14, r10
      a0:	ea 0c       	add	r14, r10
      a2:	ea 0c       	add	r14, r10
      a4:	a3 0c       	add	r10, r3

000000a6 <__trampolines_end>:
      a6:	50 6c       	ori	r21, 0xC0	; 192
      a8:	61 79       	andi	r22, 0x91	; 145
      aa:	65 72       	andi	r22, 0x25	; 37
      ac:	20 32       	cpi	r18, 0x20	; 32
      ae:	20 53       	subi	r18, 0x30	; 48
      b0:	63 6f       	ori	r22, 0xF3	; 243
      b2:	72 65       	ori	r23, 0x52	; 82
      b4:	3a 20       	and	r3, r10
      b6:	25 64       	ori	r18, 0x45	; 69
	...

000000b9 <__c.2465>:
      b9:	50 6c 61 79 65 72 20 31 20 53 63 6f 72 65 3a 20     Player 1 Score: 
      c9:	25 64 00                                            %d.

000000cc <__c.2418>:
      cc:	47 41 4d 45 20 50 41 55 53 45 44 21 00              GAME PAUSED!.

000000d9 <__c.2840>:
      d9:	43 75 72 72 65 6e 74 20 42 61 6c 6c 20 53 70 65     Current Ball Spe
      e9:	65 64 3a 20 25 73 00                                ed: %s.

000000f0 <__c.2826>:
      f0:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 6f     Press a button o
     100:	72 20 27 73 27 2f 27 53 27 20 74 6f 20 73 74 61     r 's'/'S' to sta
     110:	72 74 20 61 20 6e 65 77 20 67 61 6d 65 00           rt a new game.

0000011e <__c.2824>:
     11e:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000128 <__c.2798>:
     128:	43 53 53 45 32 30 31 30 20 41 32 20 62 79 20 41     CSSE2010 A2 by A
     138:	6c 65 78 20 44 6f 6e 6e 65 6c 6c 61 6e 20 2d 20     lex Donnellan - 
     148:	34 36 39 36 33 30 33 37 00                          46963037.

00000151 <__c.2796>:
     151:	50 4f 4e 47 00                                      PONG.

00000156 <star_wars_theme>:
     156:	d2 01 08 00 d2 01 d2 01 ba 02 02 00 17 04 a4 03     ................
     166:	08 00 70 03 10 03 75 05 02 00 17 04 04 00 a4 03     ..p...u.........
     176:	08 00 70 03 10 03 75 05 02 00 17 04 04 00 a4 03     ..p...u.........
     186:	08 00 70 03 a4 03 10 03 02 00 0b 02 08 00 0b 02     ..p.............
     196:	0b 02 ba 02 02 00 17 04 a4 03 08 00 70 03 10 03     ............p...
     1a6:	75 05 02 00 17 04 04 00 a4 03 08 00 70 03 10 03     u...........p...
     1b6:	75 05 02 00 17 04 04 00 a4 03 08 00 70 03 a4 03     u...........p...
     1c6:	10 03 02 00 0b 02 f8 ff 0b 02 10 00 4b 02 fc ff     ............K...
     1d6:	4b 02 08 00 a4 03 70 03 10 03 ba 02 ba 02 10 03     K.....p.........
     1e6:	70 03 10 03 04 00 4b 02 08 00 93 02 04 00 0b 02     p.....K.........
     1f6:	f8 ff 0b 02 10 00 4b 02 fc ff 4b 02 08 00 a4 03     ......K...K.....
     206:	70 03 10 03 ba 02 17 04 f8 ff 10 03 10 00 10 03     p...............
     216:	02 00 01 00 08 00 0b 02 4b 02 fc ff 4b 02 08 00     ........K...K...
     226:	a4 03 70 03 10 03 ba 02 ba 02 10 03 70 03 10 03     ..p.........p...
     236:	04 00 4b 02 08 00 93 02 04 00 17 04 f8 ff 17 04     ..K.............
     246:	10 00 75 05 04 00 dd 04 08 00 55 04 04 00 17 04     ..u.......U.....
     256:	08 00 a4 03 04 00 3f 03 08 00 10 03 04 00 ba 02     ......?.........
     266:	08 00 17 04 01 00 00 00                             ........

0000026e <mario_main_theme>:
     26e:	4d 0a 0c 00 4d 0a 01 00 4d 0a 01 00 2d 08 4d 0a     M...M...M...-.M.
     27e:	01 00 40 0c 01 00 01 00 01 00 20 06 01 00 01 00     ..@....... .....
     28e:	01 00 2d 08 01 00 01 00 20 06 01 00 01 00 27 05     ..-..... .....'.
     29e:	01 00 01 00 e0 06 01 00 b8 07 01 00 49 07 e0 06     ............I...
     2ae:	01 00 20 06 09 00 4d 0a 40 0c c0 0d 0c 00 01 00     .. ...M.@.......
     2be:	ea 0a 40 0c 01 00 4d 0a 01 00 2d 08 2d 09 b8 07     ..@...M...-.-...
     2ce:	01 00 01 00 2d 08 01 00 01 00 20 06 01 00 01 00     ....-..... .....
     2de:	27 05 01 00 01 00 e0 06 01 00 b8 07 01 00 49 07     '.............I.
     2ee:	e0 06 01 00 20 06 09 00 4d 0a 40 0c c0 0d 0c 00     .... ...M.@.....
     2fe:	01 00 ea 0a 40 0c 01 00 4d 0a 01 00 2d 08 2d 09     ....@...M...-.-.
     30e:	b8 07 01 00 01 00 2d 08 00 00                       ......-...

00000318 <__c.2058>:
     318:	1b 5b 3f 32 35 68 00                                .[?25h.

0000031f <__c.2045>:
     31f:	1b 5b 4b 00                                         .[K.

00000323 <__c.2040>:
     323:	1b 5b 32 4a 00                                      .[2J.

00000328 <__c.2025>:
     328:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

00000332 <__ctors_end>:
     332:	11 24       	eor	r1, r1
     334:	1f be       	out	0x3f, r1	; 63
     336:	cf ef       	ldi	r28, 0xFF	; 255
     338:	d8 e0       	ldi	r29, 0x08	; 8
     33a:	de bf       	out	0x3e, r29	; 62
     33c:	cd bf       	out	0x3d, r28	; 61

0000033e <__do_copy_data>:
     33e:	11 e0       	ldi	r17, 0x01	; 1
     340:	a0 e0       	ldi	r26, 0x00	; 0
     342:	b1 e0       	ldi	r27, 0x01	; 1
     344:	e0 e4       	ldi	r30, 0x40	; 64
     346:	fe e2       	ldi	r31, 0x2E	; 46
     348:	02 c0       	rjmp	.+4      	; 0x34e <__do_copy_data+0x10>
     34a:	05 90       	lpm	r0, Z+
     34c:	0d 92       	st	X+, r0
     34e:	ac 36       	cpi	r26, 0x6C	; 108
     350:	b1 07       	cpc	r27, r17
     352:	d9 f7       	brne	.-10     	; 0x34a <__do_copy_data+0xc>

00000354 <__do_clear_bss>:
     354:	23 e0       	ldi	r18, 0x03	; 3
     356:	ac e6       	ldi	r26, 0x6C	; 108
     358:	b1 e0       	ldi	r27, 0x01	; 1
     35a:	01 c0       	rjmp	.+2      	; 0x35e <.do_clear_bss_start>

0000035c <.do_clear_bss_loop>:
     35c:	1d 92       	st	X+, r1

0000035e <.do_clear_bss_start>:
     35e:	a0 30       	cpi	r26, 0x00	; 0
     360:	b2 07       	cpc	r27, r18
     362:	e1 f7       	brne	.-8      	; 0x35c <.do_clear_bss_loop>
     364:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <main>
     368:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <_exit>

0000036c <__bad_interrupt>:
     36c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000370 <time>:
     370:	fc 01       	movw	r30, r24
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
     376:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <__system_time>
     37a:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <__system_time+0x1>
     37e:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <__system_time+0x2>
     382:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <__system_time+0x3>
     386:	0f be       	out	0x3f, r0	; 63
     388:	30 97       	sbiw	r30, 0x00	; 0
     38a:	21 f0       	breq	.+8      	; 0x394 <time+0x24>
     38c:	60 83       	st	Z, r22
     38e:	71 83       	std	Z+1, r23	; 0x01
     390:	82 83       	std	Z+2, r24	; 0x02
     392:	93 83       	std	Z+3, r25	; 0x03
     394:	08 95       	ret

00000396 <init_adc_interrupts>:

// Setup interrupts on adc conversion complete and adc autotrigger
void init_adc_interrupts(void) {
	// Set up ADC - AVCC reference, right adjust
	// Input ADC0
	ADMUX = (1<<REFS0);
     396:	80 e4       	ldi	r24, 0x40	; 64
     398:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// Turn on the ADC (but don't start a conversion yet). Choose a clock
	// divider of 64. (The ADC clock must be somewhere
	// between 50kHz and 200kHz. We will divide our 8MHz clock by 64
	// to give us 125kHz.)
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
     39c:	ea e7       	ldi	r30, 0x7A	; 122
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	86 e8       	ldi	r24, 0x86	; 134
     3a2:	80 83       	st	Z, r24
	
	// Enable Interrupt
	ADCSRA |= (1<<ADIE);
     3a4:	80 81       	ld	r24, Z
     3a6:	88 60       	ori	r24, 0x08	; 8
     3a8:	80 83       	st	Z, r24
	
	// Make sure interrupt flag is clear
	ADCSRA |= (1<<ADIF);
     3aa:	80 81       	ld	r24, Z
     3ac:	80 61       	ori	r24, 0x10	; 16
     3ae:	80 83       	st	Z, r24
     3b0:	08 95       	ret

000003b2 <map>:

}

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     3b6:	fc 01       	movw	r30, r24
     3b8:	e6 1b       	sub	r30, r22
     3ba:	f7 0b       	sbc	r31, r23
     3bc:	02 1b       	sub	r16, r18
     3be:	13 0b       	sbc	r17, r19
     3c0:	e0 9f       	mul	r30, r16
     3c2:	c0 01       	movw	r24, r0
     3c4:	e1 9f       	mul	r30, r17
     3c6:	90 0d       	add	r25, r0
     3c8:	f0 9f       	mul	r31, r16
     3ca:	90 0d       	add	r25, r0
     3cc:	11 24       	eor	r1, r1
     3ce:	fa 01       	movw	r30, r20
     3d0:	e6 1b       	sub	r30, r22
     3d2:	f7 0b       	sbc	r31, r23
     3d4:	bf 01       	movw	r22, r30
     3d6:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__udivmodhi4>
}
     3da:	c9 01       	movw	r24, r18
     3dc:	86 0f       	add	r24, r22
     3de:	97 1f       	adc	r25, r23
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	08 95       	ret

000003e6 <adc_move>:

static uint32_t cur_time = 0, next_read_time = 0, next_queue_time = 0;
static uint16_t last_mapped = 0;
static uint8_t holding = 0;
//
int8_t adc_move(void){
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
	// Ensure we're always trying to read the adc value
	cur_time = get_current_time();
     3ea:	0e 94 2c 11 	call	0x2258	; 0x2258 <get_current_time>
     3ee:	60 93 77 01 	sts	0x0177, r22	; 0x800177 <cur_time>
     3f2:	70 93 78 01 	sts	0x0178, r23	; 0x800178 <cur_time+0x1>
     3f6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <cur_time+0x2>
     3fa:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <cur_time+0x3>
	if(cur_time >= next_read_time){
     3fe:	00 91 73 01 	lds	r16, 0x0173	; 0x800173 <next_read_time>
     402:	10 91 74 01 	lds	r17, 0x0174	; 0x800174 <next_read_time+0x1>
     406:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <next_read_time+0x2>
     40a:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <next_read_time+0x3>
     40e:	60 17       	cp	r22, r16
     410:	71 07       	cpc	r23, r17
     412:	82 07       	cpc	r24, r18
     414:	93 07       	cpc	r25, r19
     416:	c0 f0       	brcs	.+48     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		ADCSRA |= (1<<ADSC);
     418:	ea e7       	ldi	r30, 0x7A	; 122
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	80 64       	ori	r24, 0x40	; 64
     420:	80 83       	st	Z, r24
		// Try read every 50 ms
		next_read_time = cur_time + 50;
     422:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <cur_time>
     426:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <cur_time+0x1>
     42a:	a0 91 79 01 	lds	r26, 0x0179	; 0x800179 <cur_time+0x2>
     42e:	b0 91 7a 01 	lds	r27, 0x017A	; 0x80017a <cur_time+0x3>
     432:	c2 96       	adiw	r24, 0x32	; 50
     434:	a1 1d       	adc	r26, r1
     436:	b1 1d       	adc	r27, r1
     438:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <next_read_time>
     43c:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <next_read_time+0x1>
     440:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <next_read_time+0x2>
     444:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <next_read_time+0x3>
	}
	
	int8_t return_value = NO_MOVEMENT;
	
	if(adc_queue_length > 0 ){
     448:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <adc_queue_length>
     44c:	88 23       	and	r24, r24
     44e:	09 f4       	brne	.+2      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     450:	a6 c0       	rjmp	.+332    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
		uint16_t val = adc_queue[0];
     452:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <adc_queue>
     456:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <adc_queue+0x1>
		uint16_t mapped = map(val, 0, 1024, 0, 3) - 1;
     45a:	03 e0       	ldi	r16, 0x03	; 3
     45c:	10 e0       	ldi	r17, 0x00	; 0
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	40 e0       	ldi	r20, 0x00	; 0
     464:	54 e0       	ldi	r21, 0x04	; 4
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <map>
     46e:	bc 01       	movw	r22, r24
     470:	61 50       	subi	r22, 0x01	; 1
     472:	71 09       	sbc	r23, r1
		/*printf("X: %4d, Mapped: %4d \n", val, mapped);*/
		if(mapped != last_mapped){
     474:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <last_mapped>
     478:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <last_mapped+0x1>
     47c:	68 17       	cp	r22, r24
     47e:	79 07       	cpc	r23, r25
     480:	59 f0       	breq	.+22     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
			holding = 0;
     482:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <__data_end>
			next_queue_time = 0;
     486:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <next_queue_time>
     48a:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <next_queue_time+0x1>
     48e:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <next_queue_time+0x2>
     492:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <next_queue_time+0x3>
     496:	1b c0       	rjmp	.+54     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
		}else if(!holding){
     498:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
     49c:	81 11       	cpse	r24, r1
     49e:	17 c0       	rjmp	.+46     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			holding = 1;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__data_end>
			next_queue_time = cur_time + INITIAL_HOLD;
     4a6:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <cur_time>
     4aa:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <cur_time+0x1>
     4ae:	a0 91 79 01 	lds	r26, 0x0179	; 0x800179 <cur_time+0x2>
     4b2:	b0 91 7a 01 	lds	r27, 0x017A	; 0x80017a <cur_time+0x3>
     4b6:	8c 50       	subi	r24, 0x0C	; 12
     4b8:	9e 4f       	sbci	r25, 0xFE	; 254
     4ba:	af 4f       	sbci	r26, 0xFF	; 255
     4bc:	bf 4f       	sbci	r27, 0xFF	; 255
     4be:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <next_queue_time>
     4c2:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <next_queue_time+0x1>
     4c6:	a0 93 71 01 	sts	0x0171, r26	; 0x800171 <next_queue_time+0x2>
     4ca:	b0 93 72 01 	sts	0x0172, r27	; 0x800172 <next_queue_time+0x3>
		}
		if(!next_queue_time || cur_time >= next_queue_time){
     4ce:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <next_queue_time>
     4d2:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <next_queue_time+0x1>
     4d6:	a0 91 71 01 	lds	r26, 0x0171	; 0x800171 <next_queue_time+0x2>
     4da:	b0 91 72 01 	lds	r27, 0x0172	; 0x800172 <next_queue_time+0x3>
     4de:	00 97       	sbiw	r24, 0x00	; 0
     4e0:	a1 05       	cpc	r26, r1
     4e2:	b1 05       	cpc	r27, r1
     4e4:	69 f0       	breq	.+26     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
     4e6:	00 91 77 01 	lds	r16, 0x0177	; 0x800177 <cur_time>
     4ea:	10 91 78 01 	lds	r17, 0x0178	; 0x800178 <cur_time+0x1>
     4ee:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <cur_time+0x2>
     4f2:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <cur_time+0x3>
     4f6:	08 17       	cp	r16, r24
     4f8:	19 07       	cpc	r17, r25
     4fa:	2a 07       	cpc	r18, r26
     4fc:	3b 07       	cpc	r19, r27
     4fe:	28 f1       	brcs	.+74     	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
			switch(mapped){
     500:	61 30       	cpi	r22, 0x01	; 1
     502:	71 05       	cpc	r23, r1
     504:	31 f0       	breq	.+12     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
     506:	6f 3f       	cpi	r22, 0xFF	; 255
     508:	8f ef       	ldi	r24, 0xFF	; 255
     50a:	78 07       	cpc	r23, r24
     50c:	21 f0       	breq	.+8      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
		ADCSRA |= (1<<ADSC);
		// Try read every 50 ms
		next_read_time = cur_time + 50;
	}
	
	int8_t return_value = NO_MOVEMENT;
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	03 c0       	rjmp	.+6      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
			switch(mapped){
				case -1:
				return_value = PLAYER_2_DOWN;
				break;
				case 1:
				return_value = PLAYER_2_UP;
     512:	82 e0       	ldi	r24, 0x02	; 2
				break;
     514:	01 c0       	rjmp	.+2      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
			next_queue_time = cur_time + INITIAL_HOLD;
		}
		if(!next_queue_time || cur_time >= next_queue_time){
			switch(mapped){
				case -1:
				return_value = PLAYER_2_DOWN;
     516:	81 e0       	ldi	r24, 0x01	; 1
				break;
				case 1:
				return_value = PLAYER_2_UP;
				break;
			}
			if(holding){
     518:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <__data_end>
     51c:	99 23       	and	r25, r25
     51e:	b1 f0       	breq	.+44     	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
				next_queue_time = cur_time + HOLD_ACTION_DELAY;
     520:	00 91 77 01 	lds	r16, 0x0177	; 0x800177 <cur_time>
     524:	10 91 78 01 	lds	r17, 0x0178	; 0x800178 <cur_time+0x1>
     528:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <cur_time+0x2>
     52c:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <cur_time+0x3>
     530:	0c 59       	subi	r16, 0x9C	; 156
     532:	1f 4f       	sbci	r17, 0xFF	; 255
     534:	2f 4f       	sbci	r18, 0xFF	; 255
     536:	3f 4f       	sbci	r19, 0xFF	; 255
     538:	00 93 6f 01 	sts	0x016F, r16	; 0x80016f <next_queue_time>
     53c:	10 93 70 01 	sts	0x0170, r17	; 0x800170 <next_queue_time+0x1>
     540:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <next_queue_time+0x2>
     544:	30 93 72 01 	sts	0x0172, r19	; 0x800172 <next_queue_time+0x3>
     548:	01 c0       	rjmp	.+2      	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
		ADCSRA |= (1<<ADSC);
		// Try read every 50 ms
		next_read_time = cur_time + 50;
	}
	
	int8_t return_value = NO_MOVEMENT;
     54a:	80 e0       	ldi	r24, 0x00	; 0
				next_queue_time = cur_time + HOLD_ACTION_DELAY;
			}
		}
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     54c:	af b7       	in	r26, 0x3f	; 63
		cli();
     54e:	f8 94       	cli
		
		for (uint8_t i = 1; i < adc_queue_length; i++) {
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	14 c0       	rjmp	.+40     	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
			adc_queue[i - 1] = adc_queue[i];
     554:	29 2f       	mov	r18, r25
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	a9 01       	movw	r20, r18
     55a:	41 50       	subi	r20, 0x01	; 1
     55c:	51 09       	sbc	r21, r1
     55e:	22 0f       	add	r18, r18
     560:	33 1f       	adc	r19, r19
     562:	f9 01       	movw	r30, r18
     564:	e4 58       	subi	r30, 0x84	; 132
     566:	fe 4f       	sbci	r31, 0xFE	; 254
     568:	20 81       	ld	r18, Z
     56a:	31 81       	ldd	r19, Z+1	; 0x01
     56c:	fa 01       	movw	r30, r20
     56e:	ee 0f       	add	r30, r30
     570:	ff 1f       	adc	r31, r31
     572:	e4 58       	subi	r30, 0x84	; 132
     574:	fe 4f       	sbci	r31, 0xFE	; 254
     576:	31 83       	std	Z+1, r19	; 0x01
     578:	20 83       	st	Z, r18
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < adc_queue_length; i++) {
     57a:	9f 5f       	subi	r25, 0xFF	; 255
     57c:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <adc_queue_length>
     580:	92 17       	cp	r25, r18
     582:	40 f3       	brcs	.-48     	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
			adc_queue[i - 1] = adc_queue[i];
		}
		adc_queue_length--;
     584:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <adc_queue_length>
     588:	91 50       	subi	r25, 0x01	; 1
     58a:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <adc_queue_length>
		
		if (interrupts_were_enabled) {
     58e:	aa 23       	and	r26, r26
     590:	0c f4       	brge	.+2      	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
			// Turn them back on again
			sei();
     592:	78 94       	sei
		}
		
		last_mapped = mapped;
     594:	70 93 6e 01 	sts	0x016E, r23	; 0x80016e <last_mapped+0x1>
     598:	60 93 6d 01 	sts	0x016D, r22	; 0x80016d <last_mapped>
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
		ADCSRA |= (1<<ADSC);
		// Try read every 50 ms
		next_read_time = cur_time + 50;
	}
	
	int8_t return_value = NO_MOVEMENT;
     59e:	80 e0       	ldi	r24, 0x00	; 0
		
		last_mapped = mapped;
	}
	
	return return_value;
}
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	08 95       	ret

000005a6 <__vector_24>:

// Interrupt handler for ADC Conversion
ISR(ADC_vect){
     5a6:	1f 92       	push	r1
     5a8:	0f 92       	push	r0
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	0f 92       	push	r0
     5ae:	11 24       	eor	r1, r1
     5b0:	2f 93       	push	r18
     5b2:	3f 93       	push	r19
     5b4:	8f 93       	push	r24
     5b6:	ef 93       	push	r30
     5b8:	ff 93       	push	r31
	
	uint16_t adc_state = ADC;
     5ba:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5be:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	if(adc_queue_length < ADC_QUEUE_SIZE){
     5c2:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <adc_queue_length>
     5c6:	84 30       	cpi	r24, 0x04	; 4
     5c8:	68 f4       	brcc	.+26     	; 0x5e4 <__vector_24+0x3e>
		adc_queue[adc_queue_length++] = adc_state;
     5ca:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <adc_queue_length>
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	8e 0f       	add	r24, r30
     5d2:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <adc_queue_length>
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	ee 0f       	add	r30, r30
     5da:	ff 1f       	adc	r31, r31
     5dc:	e4 58       	subi	r30, 0x84	; 132
     5de:	fe 4f       	sbci	r31, 0xFE	; 254
     5e0:	31 83       	std	Z+1, r19	; 0x01
     5e2:	20 83       	st	Z, r18
	}
     5e4:	ff 91       	pop	r31
     5e6:	ef 91       	pop	r30
     5e8:	8f 91       	pop	r24
     5ea:	3f 91       	pop	r19
     5ec:	2f 91       	pop	r18
     5ee:	0f 90       	pop	r0
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	0f 90       	pop	r0
     5f4:	1f 90       	pop	r1
     5f6:	18 95       	reti

000005f8 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     5f8:	e8 e6       	ldi	r30, 0x68	; 104
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 81       	ld	r24, Z
     5fe:	82 60       	ori	r24, 0x02	; 2
     600:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     602:	8b b3       	in	r24, 0x1b	; 27
     604:	82 60       	ori	r24, 0x02	; 2
     606:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     608:	ec e6       	ldi	r30, 0x6C	; 108
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	8f 60       	ori	r24, 0x0F	; 15
     610:	80 83       	st	Z, r24
	
	// Empty the button push queue
	button_queue_length = 0;
     612:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <button_queue_length>
     616:	08 95       	ret

00000618 <button_pushed>:
	//remove_queue_length = 0;
}

static volatile uint32_t cur_time = 0;

int8_t button_pushed(void) {
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	
	cur_time = get_current_time();
     620:	0e 94 2c 11 	call	0x2258	; 0x2258 <get_current_time>
     624:	60 93 84 01 	sts	0x0184, r22	; 0x800184 <cur_time>
     628:	70 93 85 01 	sts	0x0185, r23	; 0x800185 <cur_time+0x1>
     62c:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <cur_time+0x2>
     630:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <cur_time+0x3>
	
	if (button_queue_length > 0) {
     634:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <button_queue_length>
     638:	18 16       	cp	r1, r24
     63a:	0c f0       	brlt	.+2      	; 0x63e <button_pushed+0x26>
     63c:	3f c0       	rjmp	.+126    	; 0x6bc <button_pushed+0xa4>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		uint8_t pin = button_queue[0];
     63e:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <button_queue>
		return_value = (1 << pin);
     642:	e9 2f       	mov	r30, r25
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	01 c0       	rjmp	.+2      	; 0x64c <button_pushed+0x34>
     64a:	88 0f       	add	r24, r24
     64c:	9a 95       	dec	r25
     64e:	ea f7       	brpl	.-6      	; 0x64a <button_pushed+0x32>
		held_queue[pin] = cur_time + INITIAL_HOLD;
     650:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <cur_time>
     654:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <cur_time+0x1>
     658:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <cur_time+0x2>
     65c:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <cur_time+0x3>
     660:	4c 50       	subi	r20, 0x0C	; 12
     662:	5e 4f       	sbci	r21, 0xFE	; 254
     664:	6f 4f       	sbci	r22, 0xFF	; 255
     666:	7f 4f       	sbci	r23, 0xFF	; 255
     668:	ee 0f       	add	r30, r30
     66a:	ff 1f       	adc	r31, r31
     66c:	ee 0f       	add	r30, r30
     66e:	ff 1f       	adc	r31, r31
     670:	e7 57       	subi	r30, 0x77	; 119
     672:	fe 4f       	sbci	r31, 0xFE	; 254
     674:	40 83       	st	Z, r20
     676:	51 83       	std	Z+1, r21	; 0x01
     678:	62 83       	std	Z+2, r22	; 0x02
     67a:	73 83       	std	Z+3, r23	; 0x03
			
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     67c:	6f b7       	in	r22, 0x3f	; 63
		cli();
     67e:	f8 94       	cli
			
		for (uint8_t i = 1; i < button_queue_length; i++) {
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	09 c0       	rjmp	.+18     	; 0x696 <button_pushed+0x7e>
			button_queue[i - 1] = button_queue[i];
     684:	f9 01       	movw	r30, r18
     686:	e7 56       	subi	r30, 0x67	; 103
     688:	fe 4f       	sbci	r31, 0xFE	; 254
     68a:	40 81       	ld	r20, Z
     68c:	f9 01       	movw	r30, r18
     68e:	e8 56       	subi	r30, 0x68	; 104
     690:	fe 4f       	sbci	r31, 0xFE	; 254
     692:	40 83       	st	Z, r20
			
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
			
		for (uint8_t i = 1; i < button_queue_length; i++) {
     694:	9f 5f       	subi	r25, 0xFF	; 255
     696:	29 2f       	mov	r18, r25
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	40 91 88 01 	lds	r20, 0x0188	; 0x800188 <button_queue_length>
     69e:	04 2e       	mov	r0, r20
     6a0:	00 0c       	add	r0, r0
     6a2:	55 0b       	sbc	r21, r21
     6a4:	24 17       	cp	r18, r20
     6a6:	35 07       	cpc	r19, r21
     6a8:	6c f3       	brlt	.-38     	; 0x684 <button_pushed+0x6c>
			button_queue[i - 1] = button_queue[i];
		}
		button_queue_length--;
     6aa:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <button_queue_length>
     6ae:	91 50       	subi	r25, 0x01	; 1
     6b0:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <button_queue_length>
			
		if (interrupts_were_enabled) {
     6b4:	66 23       	and	r22, r22
     6b6:	1c f4       	brge	.+6      	; 0x6be <button_pushed+0xa6>
			// Turn them back on again
			sei();
     6b8:	78 94       	sei
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <button_pushed+0xa6>
}

static volatile uint32_t cur_time = 0;

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	7d c0       	rjmp	.+250    	; 0x7bc <button_pushed+0x1a4>
		}
	}

	//TODO: This feels hacky maybe theres a better way to do this
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
		if(held_queue[pin] && (last_button_state & (1 << pin))){
     6c2:	29 2f       	mov	r18, r25
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	f9 01       	movw	r30, r18
     6c8:	ee 0f       	add	r30, r30
     6ca:	ff 1f       	adc	r31, r31
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	e7 57       	subi	r30, 0x77	; 119
     6d2:	fe 4f       	sbci	r31, 0xFE	; 254
     6d4:	40 81       	ld	r20, Z
     6d6:	51 81       	ldd	r21, Z+1	; 0x01
     6d8:	62 81       	ldd	r22, Z+2	; 0x02
     6da:	73 81       	ldd	r23, Z+3	; 0x03
     6dc:	45 2b       	or	r20, r21
     6de:	46 2b       	or	r20, r22
     6e0:	47 2b       	or	r20, r23
     6e2:	09 f4       	brne	.+2      	; 0x6e6 <button_pushed+0xce>
     6e4:	45 c0       	rjmp	.+138    	; 0x770 <button_pushed+0x158>
     6e6:	40 91 9e 01 	lds	r20, 0x019E	; 0x80019e <last_button_state>
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	09 2e       	mov	r0, r25
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <button_pushed+0xdc>
     6f0:	55 95       	asr	r21
     6f2:	47 95       	ror	r20
     6f4:	0a 94       	dec	r0
     6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <button_pushed+0xd8>
     6f8:	40 ff       	sbrs	r20, 0
     6fa:	3a c0       	rjmp	.+116    	; 0x770 <button_pushed+0x158>
			// Button is being held
			uint32_t held_time = held_queue[pin];
     6fc:	f9 01       	movw	r30, r18
     6fe:	ee 0f       	add	r30, r30
     700:	ff 1f       	adc	r31, r31
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	e7 57       	subi	r30, 0x77	; 119
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	c0 80       	ld	r12, Z
     70c:	d1 80       	ldd	r13, Z+1	; 0x01
     70e:	e2 80       	ldd	r14, Z+2	; 0x02
     710:	f3 80       	ldd	r15, Z+3	; 0x03
			if(cur_time >= held_time){
     712:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <cur_time>
     716:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <cur_time+0x1>
     71a:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <cur_time+0x2>
     71e:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <cur_time+0x3>
     722:	4c 15       	cp	r20, r12
     724:	5d 05       	cpc	r21, r13
     726:	6e 05       	cpc	r22, r14
     728:	7f 05       	cpc	r23, r15
     72a:	08 f4       	brcc	.+2      	; 0x72e <button_pushed+0x116>
     72c:	46 c0       	rjmp	.+140    	; 0x7ba <button_pushed+0x1a2>
				return_value |= (1 << pin);
     72e:	41 e0       	ldi	r20, 0x01	; 1
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	09 2e       	mov	r0, r25
     734:	02 c0       	rjmp	.+4      	; 0x73a <button_pushed+0x122>
     736:	44 0f       	add	r20, r20
     738:	55 1f       	adc	r21, r21
     73a:	0a 94       	dec	r0
     73c:	e2 f7       	brpl	.-8      	; 0x736 <button_pushed+0x11e>
     73e:	84 2b       	or	r24, r20
				held_queue[pin] = cur_time + HOLD_ACTION_DELAY;
     740:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <cur_time>
     744:	50 91 85 01 	lds	r21, 0x0185	; 0x800185 <cur_time+0x1>
     748:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <cur_time+0x2>
     74c:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <cur_time+0x3>
     750:	4c 59       	subi	r20, 0x9C	; 156
     752:	5f 4f       	sbci	r21, 0xFF	; 255
     754:	6f 4f       	sbci	r22, 0xFF	; 255
     756:	7f 4f       	sbci	r23, 0xFF	; 255
     758:	22 0f       	add	r18, r18
     75a:	33 1f       	adc	r19, r19
     75c:	22 0f       	add	r18, r18
     75e:	33 1f       	adc	r19, r19
     760:	f9 01       	movw	r30, r18
     762:	e7 57       	subi	r30, 0x77	; 119
     764:	fe 4f       	sbci	r31, 0xFE	; 254
     766:	40 83       	st	Z, r20
     768:	51 83       	std	Z+1, r21	; 0x01
     76a:	62 83       	std	Z+2, r22	; 0x02
     76c:	73 83       	std	Z+3, r23	; 0x03
     76e:	25 c0       	rjmp	.+74     	; 0x7ba <button_pushed+0x1a2>
			}
		}else if(held_queue[pin] && !(last_button_state & (1<< pin))){
     770:	f9 01       	movw	r30, r18
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	ee 0f       	add	r30, r30
     778:	ff 1f       	adc	r31, r31
     77a:	e7 57       	subi	r30, 0x77	; 119
     77c:	fe 4f       	sbci	r31, 0xFE	; 254
     77e:	40 81       	ld	r20, Z
     780:	51 81       	ldd	r21, Z+1	; 0x01
     782:	62 81       	ldd	r22, Z+2	; 0x02
     784:	73 81       	ldd	r23, Z+3	; 0x03
     786:	45 2b       	or	r20, r21
     788:	46 2b       	or	r20, r22
     78a:	47 2b       	or	r20, r23
     78c:	b1 f0       	breq	.+44     	; 0x7ba <button_pushed+0x1a2>
     78e:	40 91 9e 01 	lds	r20, 0x019E	; 0x80019e <last_button_state>
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	02 2e       	mov	r0, r18
     796:	02 c0       	rjmp	.+4      	; 0x79c <button_pushed+0x184>
     798:	55 95       	asr	r21
     79a:	47 95       	ror	r20
     79c:	0a 94       	dec	r0
     79e:	e2 f7       	brpl	.-8      	; 0x798 <button_pushed+0x180>
     7a0:	40 fd       	sbrc	r20, 0
     7a2:	0b c0       	rjmp	.+22     	; 0x7ba <button_pushed+0x1a2>
			held_queue[pin] = 0;
     7a4:	22 0f       	add	r18, r18
     7a6:	33 1f       	adc	r19, r19
     7a8:	22 0f       	add	r18, r18
     7aa:	33 1f       	adc	r19, r19
     7ac:	f9 01       	movw	r30, r18
     7ae:	e7 57       	subi	r30, 0x77	; 119
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	10 82       	st	Z, r1
     7b4:	11 82       	std	Z+1, r1	; 0x01
     7b6:	12 82       	std	Z+2, r1	; 0x02
     7b8:	13 82       	std	Z+3, r1	; 0x03
			sei();
		}
	}

	//TODO: This feels hacky maybe theres a better way to do this
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     7ba:	9f 5f       	subi	r25, 0xFF	; 255
     7bc:	94 30       	cpi	r25, 0x04	; 4
     7be:	08 f4       	brcc	.+2      	; 0x7c2 <button_pushed+0x1aa>
     7c0:	80 cf       	rjmp	.-256    	; 0x6c2 <button_pushed+0xaa>
			held_queue[pin] = 0;
		}
	}

	return return_value;
}
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	08 95       	ret

000007cc <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     7cc:	1f 92       	push	r1
     7ce:	0f 92       	push	r0
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	0f 92       	push	r0
     7d4:	11 24       	eor	r1, r1
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	button_state = PINB & 0x0F;
     7ee:	83 b1       	in	r24, 0x03	; 3
     7f0:	8f 70       	andi	r24, 0x0F	; 15
     7f2:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <button_state>
	
	cur_time = get_current_time();
     7f6:	0e 94 2c 11 	call	0x2258	; 0x2258 <get_current_time>
     7fa:	60 93 84 01 	sts	0x0184, r22	; 0x800184 <cur_time>
     7fe:	70 93 85 01 	sts	0x0185, r23	; 0x800185 <cur_time+0x1>
     802:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <cur_time+0x2>
     806:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <cur_time+0x3>
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	27 c0       	rjmp	.+78     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		if (button_queue_length < BUTTON_QUEUE_SIZE
     80e:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <button_queue_length>
     812:	94 30       	cpi	r25, 0x04	; 4
     814:	14 f5       	brge	.+68     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		&& (button_state & (1 << pin))
     816:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <button_state>
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	08 2e       	mov	r0, r24
     81e:	02 c0       	rjmp	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     820:	35 95       	asr	r19
     822:	27 95       	ror	r18
     824:	0a 94       	dec	r0
     826:	e2 f7       	brpl	.-8      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     828:	20 ff       	sbrs	r18, 0
     82a:	17 c0       	rjmp	.+46     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		&& !(last_button_state & (1 << pin))) {
     82c:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <last_button_state>
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	08 2e       	mov	r0, r24
     834:	02 c0       	rjmp	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     836:	35 95       	asr	r19
     838:	27 95       	ror	r18
     83a:	0a 94       	dec	r0
     83c:	e2 f7       	brpl	.-8      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     83e:	20 fd       	sbrc	r18, 0
     840:	0c c0       	rjmp	.+24     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[button_queue_length++] = pin;
     842:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <button_queue_length>
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	9e 0f       	add	r25, r30
     84a:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <button_queue_length>
     84e:	0e 2e       	mov	r0, r30
     850:	00 0c       	add	r0, r0
     852:	ff 0b       	sbc	r31, r31
     854:	e7 56       	subi	r30, 0x67	; 103
     856:	fe 4f       	sbci	r31, 0xFE	; 254
     858:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     85a:	8f 5f       	subi	r24, 0xFF	; 255
     85c:	84 30       	cpi	r24, 0x04	; 4
     85e:	b8 f2       	brcs	.-82     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
		//	printf("RELEASED");
		//}
	}
	
	// Remember this button state
	last_button_state = button_state;
     860:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <button_state>
     864:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <last_button_state>
}
     868:	ff 91       	pop	r31
     86a:	ef 91       	pop	r30
     86c:	bf 91       	pop	r27
     86e:	af 91       	pop	r26
     870:	9f 91       	pop	r25
     872:	8f 91       	pop	r24
     874:	7f 91       	pop	r23
     876:	6f 91       	pop	r22
     878:	5f 91       	pop	r21
     87a:	4f 91       	pop	r20
     87c:	3f 91       	pop	r19
     87e:	2f 91       	pop	r18
     880:	0f 90       	pop	r0
     882:	0f be       	out	0x3f, r0	; 63
     884:	0f 90       	pop	r0
     886:	1f 90       	pop	r1
     888:	18 95       	reti

0000088a <is_cpu_enabled>:

uint8_t fastabs(int8_t v);

uint8_t is_cpu_enabled(void){
	return cpu_enabled;
}
     88a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <cpu_enabled>
     88e:	08 95       	ret

00000890 <toggle_cpu_enabled>:

void toggle_cpu_enabled(void){
	cpu_enabled ^= 1;
     890:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <cpu_enabled>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	89 27       	eor	r24, r25
     898:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <cpu_enabled>
	if(cpu_enabled){
     89c:	88 23       	and	r24, r24
     89e:	a1 f0       	breq	.+40     	; 0x8c8 <toggle_cpu_enabled+0x38>
		next_move_time = current_time + 100;
     8a0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <current_time>
     8a4:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <current_time+0x1>
     8a8:	a0 91 a8 01 	lds	r26, 0x01A8	; 0x8001a8 <current_time+0x2>
     8ac:	b0 91 a9 01 	lds	r27, 0x01A9	; 0x8001a9 <current_time+0x3>
     8b0:	8c 59       	subi	r24, 0x9C	; 156
     8b2:	9f 4f       	sbci	r25, 0xFF	; 255
     8b4:	af 4f       	sbci	r26, 0xFF	; 255
     8b6:	bf 4f       	sbci	r27, 0xFF	; 255
     8b8:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <next_move_time>
     8bc:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <next_move_time+0x1>
     8c0:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <next_move_time+0x2>
     8c4:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <next_move_time+0x3>
     8c8:	08 95       	ret

000008ca <fastabs>:
	last_ball_data = bd;
	last_p = *p;
}

uint8_t fastabs(int8_t v){
	int8_t const mask = (v >> sizeof(int8_t)) * CHAR_BIT - 1;
     8ca:	98 2f       	mov	r25, r24
     8cc:	95 95       	asr	r25
     8ce:	99 0f       	add	r25, r25
     8d0:	99 0f       	add	r25, r25
     8d2:	99 0f       	add	r25, r25
     8d4:	91 50       	subi	r25, 0x01	; 1
	return (v + mask) ^ mask;
     8d6:	89 0f       	add	r24, r25
     8d8:	89 27       	eor	r24, r25
     8da:	08 95       	ret

000008dc <predict_ball>:
		}
		next_guide_move = current_time + 200;
	}
}

void predict_ball(struct prediction* p){
     8dc:	bf 92       	push	r11
     8de:	cf 92       	push	r12
     8e0:	df 92       	push	r13
     8e2:	ef 92       	push	r14
     8e4:	ff 92       	push	r15
     8e6:	0f 93       	push	r16
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <predict_ball+0x14>
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <predict_ball+0x16>
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	7c 01       	movw	r14, r24
	struct ball_data bd;
	get_ball_data(&bd);
     8f8:	ce 01       	movw	r24, r28
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <get_ball_data>
	if((last_ball_data.ball_x_direction == bd.ball_x_direction) &&
     900:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <last_ball_data+0x2>
     904:	db 80       	ldd	r13, Y+3	; 0x03
     906:	8d 11       	cpse	r24, r13
     908:	17 c0       	rjmp	.+46     	; 0x938 <__stack+0x39>
		(last_ball_data.ball_y_direction == bd.ball_y_direction) &&
     90a:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <last_ball_data+0x3>
     90e:	8c 81       	ldd	r24, Y+4	; 0x04
}

void predict_ball(struct prediction* p){
	struct ball_data bd;
	get_ball_data(&bd);
	if((last_ball_data.ball_x_direction == bd.ball_x_direction) &&
     910:	98 13       	cpse	r25, r24
     912:	12 c0       	rjmp	.+36     	; 0x938 <__stack+0x39>
		(last_ball_data.ball_y_direction == bd.ball_y_direction) &&
		(current_time < last_predict_time + 500)){
     914:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <current_time>
     918:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <current_time+0x1>
     91c:	a0 91 a8 01 	lds	r26, 0x01A8	; 0x8001a8 <current_time+0x2>
     920:	b0 91 a9 01 	lds	r27, 0x01A9	; 0x8001a9 <current_time+0x3>

void predict_ball(struct prediction* p){
	struct ball_data bd;
	get_ball_data(&bd);
	if((last_ball_data.ball_x_direction == bd.ball_x_direction) &&
		(last_ball_data.ball_y_direction == bd.ball_y_direction) &&
     924:	84 3f       	cpi	r24, 0xF4	; 244
     926:	91 40       	sbci	r25, 0x01	; 1
     928:	a1 05       	cpc	r26, r1
     92a:	b1 05       	cpc	r27, r1
     92c:	28 f4       	brcc	.+10     	; 0x938 <__stack+0x39>
		(current_time < last_predict_time + 500)){
		//Nothing has changed and it hasn't been long since our last prediction so skip;
		
		p->y = last_p.y;
     92e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <last_p>
     932:	f7 01       	movw	r30, r14
     934:	80 83       	st	Z, r24
		return;		
     936:	36 c0       	rjmp	.+108    	; 0x9a4 <__stack+0xa5>
	}
	if(fastabs(bd.ball_x - p->player_x) < fastabs((bd.ball_x + bd.ball_x_direction) - p->player_x)){
     938:	19 81       	ldd	r17, Y+1	; 0x01
     93a:	f7 01       	movw	r30, r14
     93c:	01 81       	ldd	r16, Z+1	; 0x01
     93e:	81 2f       	mov	r24, r17
     940:	80 1b       	sub	r24, r16
     942:	0e 94 65 04 	call	0x8ca	; 0x8ca <fastabs>
     946:	b8 2e       	mov	r11, r24
     948:	cd 2c       	mov	r12, r13
     94a:	81 2f       	mov	r24, r17
     94c:	8d 0d       	add	r24, r13
     94e:	80 1b       	sub	r24, r16
     950:	0e 94 65 04 	call	0x8ca	; 0x8ca <fastabs>
     954:	b8 16       	cp	r11, r24
     956:	20 f4       	brcc	.+8      	; 0x960 <__stack+0x61>
		// Ball moving away take a nap
		p->y = -1;
     958:	8f ef       	ldi	r24, 0xFF	; 255
     95a:	f7 01       	movw	r30, r14
     95c:	80 83       	st	Z, r24
		return;
     95e:	22 c0       	rjmp	.+68     	; 0x9a4 <__stack+0xa5>
	}
	
	int8_t last_predict_x = bd.ball_x_direction;
	int8_t last_predict_y = bd.ball_y_direction;
     960:	9c 81       	ldd	r25, Y+4	; 0x04
	int8_t last_ball_x = bd.ball_x;
	int8_t last_ball_y = bd.ball_y;
     962:	8a 81       	ldd	r24, Y+2	; 0x02
	
	// Iterate through all remaining steps to the player
	while(last_ball_x != p->player_x){
     964:	09 c0       	rjmp	.+18     	; 0x978 <__stack+0x79>
		int8_t new_ball_x = last_ball_x + last_predict_x;
     966:	1c 0d       	add	r17, r12
		int8_t new_ball_y = last_ball_y + last_predict_y;
     968:	38 2f       	mov	r19, r24
     96a:	29 2f       	mov	r18, r25
     96c:	89 0f       	add	r24, r25
		
		if(new_ball_y >= BOARD_HEIGHT || new_ball_y < 0){
     96e:	88 30       	cpi	r24, 0x08	; 8
     970:	18 f0       	brcs	.+6      	; 0x978 <__stack+0x79>
			last_predict_y *= -1;
     972:	91 95       	neg	r25
			new_ball_y = last_ball_y + last_predict_y;
     974:	83 2f       	mov	r24, r19
     976:	82 1b       	sub	r24, r18
	int8_t last_predict_y = bd.ball_y_direction;
	int8_t last_ball_x = bd.ball_x;
	int8_t last_ball_y = bd.ball_y;
	
	// Iterate through all remaining steps to the player
	while(last_ball_x != p->player_x){
     978:	10 13       	cpse	r17, r16
     97a:	f5 cf       	rjmp	.-22     	; 0x966 <__stack+0x67>
		
		last_ball_y = new_ball_y;
		last_ball_x = new_ball_x;
	}
	
	p->y = last_ball_y;
     97c:	f7 01       	movw	r30, r14
     97e:	80 83       	st	Z, r24
	
	last_ball_data = bd;
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	9a 81       	ldd	r25, Y+2	; 0x02
     984:	ab 81       	ldd	r26, Y+3	; 0x03
     986:	bc 81       	ldd	r27, Y+4	; 0x04
     988:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <last_ball_data>
     98c:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <last_ball_data+0x1>
     990:	a0 93 a4 01 	sts	0x01A4, r26	; 0x8001a4 <last_ball_data+0x2>
     994:	b0 93 a5 01 	sts	0x01A5, r27	; 0x8001a5 <last_ball_data+0x3>
	last_p = *p;
     998:	80 81       	ld	r24, Z
     99a:	91 81       	ldd	r25, Z+1	; 0x01
     99c:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <last_p+0x1>
     9a0:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <last_p>
}
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	df 90       	pop	r13
     9ba:	cf 90       	pop	r12
     9bc:	bf 90       	pop	r11
     9be:	08 95       	ret

000009c0 <cpu_think>:
	if(cpu_enabled){
		next_move_time = current_time + 100;
	}
}

void cpu_think(void){
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	00 d0       	rcall	.+0      	; 0x9c6 <cpu_think+0x6>
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
	current_time = get_current_time();
     9ca:	0e 94 2c 11 	call	0x2258	; 0x2258 <get_current_time>
     9ce:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <current_time>
     9d2:	70 93 a7 01 	sts	0x01A7, r23	; 0x8001a7 <current_time+0x1>
     9d6:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <current_time+0x2>
     9da:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <current_time+0x3>
	cpu_y_coordinate = get_player_y(CPU_PLAYER);
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <get_player_y>
     9e4:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <cpu_y_coordinate>
	if(!is_cpu_enabled()) return;
     9e8:	0e 94 45 04 	call	0x88a	; 0x88a <is_cpu_enabled>
     9ec:	88 23       	and	r24, r24
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <cpu_think+0x32>
     9f0:	43 c0       	rjmp	.+134    	; 0xa78 <cpu_think+0xb8>
	
	struct prediction p;
	p.player_x = get_player_x(CPU_PLAYER);
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <get_player_x>
     9f8:	8a 83       	std	Y+2, r24	; 0x02
	predict_ball(&p);
     9fa:	ce 01       	movw	r24, r28
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	0e 94 6e 04 	call	0x8dc	; 0x8dc <predict_ball>
	
	if(current_time >= next_move_time){
     a02:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <current_time>
     a06:	50 91 a7 01 	lds	r21, 0x01A7	; 0x8001a7 <current_time+0x1>
     a0a:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <current_time+0x2>
     a0e:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <current_time+0x3>
     a12:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <next_move_time>
     a16:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <next_move_time+0x1>
     a1a:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <next_move_time+0x2>
     a1e:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <next_move_time+0x3>
     a22:	48 17       	cp	r20, r24
     a24:	59 07       	cpc	r21, r25
     a26:	6a 07       	cpc	r22, r26
     a28:	7b 07       	cpc	r23, r27
     a2a:	30 f1       	brcs	.+76     	; 0xa78 <cpu_think+0xb8>
		if(p.y >= 0){
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	88 23       	and	r24, r24
     a30:	7c f0       	brlt	.+30     	; 0xa50 <cpu_think+0x90>
			if(p.y < cpu_y_coordinate){
     a32:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <cpu_y_coordinate>
     a36:	89 17       	cp	r24, r25
     a38:	2c f4       	brge	.+10     	; 0xa44 <cpu_think+0x84>
				// move Down
				move_player_paddle(CPU_PLAYER, DOWN);
     a3a:	6f ef       	ldi	r22, 0xFF	; 255
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	0e 94 67 08 	call	0x10ce	; 0x10ce <move_player_paddle>
     a42:	06 c0       	rjmp	.+12     	; 0xa50 <cpu_think+0x90>
			}else if (p.y > cpu_y_coordinate){
     a44:	98 17       	cp	r25, r24
     a46:	24 f4       	brge	.+8      	; 0xa50 <cpu_think+0x90>
				// move UP
				move_player_paddle(CPU_PLAYER, UP);
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	0e 94 67 08 	call	0x10ce	; 0x10ce <move_player_paddle>
			}
		}
		
		next_move_time = current_time + 200;
     a50:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <current_time>
     a54:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <current_time+0x1>
     a58:	a0 91 a8 01 	lds	r26, 0x01A8	; 0x8001a8 <current_time+0x2>
     a5c:	b0 91 a9 01 	lds	r27, 0x01A9	; 0x8001a9 <current_time+0x3>
     a60:	88 53       	subi	r24, 0x38	; 56
     a62:	9f 4f       	sbci	r25, 0xFF	; 255
     a64:	af 4f       	sbci	r26, 0xFF	; 255
     a66:	bf 4f       	sbci	r27, 0xFF	; 255
     a68:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <next_move_time>
     a6c:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <next_move_time+0x1>
     a70:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <next_move_time+0x2>
     a74:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <next_move_time+0x3>
	}
}
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <guide_think>:

void guide_think(void){
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	00 d0       	rcall	.+0      	; 0xa8a <guide_think+0x8>
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
	current_time = get_current_time();
     a8e:	0e 94 2c 11 	call	0x2258	; 0x2258 <get_current_time>
     a92:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <current_time>
     a96:	70 93 a7 01 	sts	0x01A7, r23	; 0x8001a7 <current_time+0x1>
     a9a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <current_time+0x2>
     a9e:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <current_time+0x3>
	if(!is_cpu_enabled()) return;
     aa2:	0e 94 45 04 	call	0x88a	; 0x88a <is_cpu_enabled>
     aa6:	88 23       	and	r24, r24
     aa8:	09 f4       	brne	.+2      	; 0xaac <guide_think+0x2a>
     aaa:	44 c0       	rjmp	.+136    	; 0xb34 <guide_think+0xb2>
	int8_t guide_y_coordinate = get_guide_y();
     aac:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <get_guide_y>
     ab0:	18 2f       	mov	r17, r24

	struct prediction p;
	p.player_x = get_player_x(PLAYER_2);
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <get_player_x>
     ab8:	8a 83       	std	Y+2, r24	; 0x02
	predict_ball(&p);
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	0e 94 6e 04 	call	0x8dc	; 0x8dc <predict_ball>
	
	if(current_time >= next_guide_move){
     ac2:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <current_time>
     ac6:	50 91 a7 01 	lds	r21, 0x01A7	; 0x8001a7 <current_time+0x1>
     aca:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <current_time+0x2>
     ace:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <current_time+0x3>
     ad2:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <next_guide_move>
     ad6:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <next_guide_move+0x1>
     ada:	a0 91 ac 01 	lds	r26, 0x01AC	; 0x8001ac <next_guide_move+0x2>
     ade:	b0 91 ad 01 	lds	r27, 0x01AD	; 0x8001ad <next_guide_move+0x3>
     ae2:	48 17       	cp	r20, r24
     ae4:	59 07       	cpc	r21, r25
     ae6:	6a 07       	cpc	r22, r26
     ae8:	7b 07       	cpc	r23, r27
     aea:	20 f1       	brcs	.+72     	; 0xb34 <guide_think+0xb2>
		if(p.y >= 0){
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	88 23       	and	r24, r24
     af0:	6c f0       	brlt	.+26     	; 0xb0c <guide_think+0x8a>
			if(p.y < guide_y_coordinate){
     af2:	81 17       	cp	r24, r17
     af4:	2c f4       	brge	.+10     	; 0xb00 <guide_think+0x7e>
				// move Down
				update_guide_paddle(guide_y_coordinate + DOWN);
     af6:	8f ef       	ldi	r24, 0xFF	; 255
     af8:	81 0f       	add	r24, r17
     afa:	0e 94 b3 07 	call	0xf66	; 0xf66 <update_guide_paddle>
     afe:	06 c0       	rjmp	.+12     	; 0xb0c <guide_think+0x8a>
			}else if (p.y > guide_y_coordinate){
     b00:	18 17       	cp	r17, r24
     b02:	24 f4       	brge	.+8      	; 0xb0c <guide_think+0x8a>
			// move UP
				update_guide_paddle(guide_y_coordinate + UP);
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	81 0f       	add	r24, r17
     b08:	0e 94 b3 07 	call	0xf66	; 0xf66 <update_guide_paddle>
			}
		}
		next_guide_move = current_time + 200;
     b0c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <current_time>
     b10:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <current_time+0x1>
     b14:	a0 91 a8 01 	lds	r26, 0x01A8	; 0x8001a8 <current_time+0x2>
     b18:	b0 91 a9 01 	lds	r27, 0x01A9	; 0x8001a9 <current_time+0x3>
     b1c:	88 53       	subi	r24, 0x38	; 56
     b1e:	9f 4f       	sbci	r25, 0xFF	; 255
     b20:	af 4f       	sbci	r26, 0xFF	; 255
     b22:	bf 4f       	sbci	r27, 0xFF	; 255
     b24:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <next_guide_move>
     b28:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <next_guide_move+0x1>
     b2c:	a0 93 ac 01 	sts	0x01AC, r26	; 0x8001ac <next_guide_move+0x2>
     b30:	b0 93 ad 01 	sts	0x01AD, r27	; 0x8001ad <next_guide_move+0x3>
	}
}
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	08 95       	ret

00000b40 <initialise_display>:
    0b0111001111101111, // 9
};

// Initialise the display for the board, this creates the display
// for an empty board.
void initialise_display(void) {
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	28 97       	sbiw	r28, 0x08	; 8
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
	// start by clearing the LED matrix
	ledmatrix_clear();
     b58:	0e 94 36 0b 	call	0x166c	; 0x166c <ledmatrix_clear>

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	09 c0       	rjmp	.+18     	; 0xb74 <initialise_display+0x34>
		col_colours[row] = MATRIX_COLOUR_BORDER;
     b62:	e1 e0       	ldi	r30, 0x01	; 1
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	ec 0f       	add	r30, r28
     b68:	fd 1f       	adc	r31, r29
     b6a:	e8 0f       	add	r30, r24
     b6c:	f9 1f       	adc	r31, r25
     b6e:	25 e3       	ldi	r18, 0x35	; 53
     b70:	20 83       	st	Z, r18
	// start by clearing the LED matrix
	ledmatrix_clear();

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	88 30       	cpi	r24, 0x08	; 8
     b76:	91 05       	cpc	r25, r1
     b78:	a4 f3       	brlt	.-24     	; 0xb62 <initialise_display+0x22>
     b7a:	01 e0       	ldi	r16, 0x01	; 1
     b7c:	10 e0       	ldi	r17, 0x00	; 0
     b7e:	08 c0       	rjmp	.+16     	; 0xb90 <initialise_display+0x50>
		col_colours[row] = MATRIX_COLOUR_BORDER;
	}

	// then add the bounds on the left
	for (int x = 1; x < 1 + GAME_BORDER_WIDTH; x++) {
		ledmatrix_update_column(x, col_colours);
     b80:	be 01       	movw	r22, r28
     b82:	6f 5f       	subi	r22, 0xFF	; 255
     b84:	7f 4f       	sbci	r23, 0xFF	; 255
     b86:	80 2f       	mov	r24, r16
     b88:	0e 94 19 0b 	call	0x1632	; 0x1632 <ledmatrix_update_column>
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		col_colours[row] = MATRIX_COLOUR_BORDER;
	}

	// then add the bounds on the left
	for (int x = 1; x < 1 + GAME_BORDER_WIDTH; x++) {
     b8c:	0f 5f       	subi	r16, 0xFF	; 255
     b8e:	1f 4f       	sbci	r17, 0xFF	; 255
     b90:	02 30       	cpi	r16, 0x02	; 2
     b92:	11 05       	cpc	r17, r1
     b94:	ac f3       	brlt	.-22     	; 0xb80 <initialise_display+0x40>
     b96:	0e e0       	ldi	r16, 0x0E	; 14
     b98:	10 e0       	ldi	r17, 0x00	; 0
     b9a:	08 c0       	rjmp	.+16     	; 0xbac <initialise_display+0x6c>
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = 14; x < 14 + GAME_BORDER_WIDTH; x++) {
		ledmatrix_update_column(x, col_colours);
     b9c:	be 01       	movw	r22, r28
     b9e:	6f 5f       	subi	r22, 0xFF	; 255
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	80 2f       	mov	r24, r16
     ba4:	0e 94 19 0b 	call	0x1632	; 0x1632 <ledmatrix_update_column>
	for (int x = 1; x < 1 + GAME_BORDER_WIDTH; x++) {
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = 14; x < 14 + GAME_BORDER_WIDTH; x++) {
     ba8:	0f 5f       	subi	r16, 0xFF	; 255
     baa:	1f 4f       	sbci	r17, 0xFF	; 255
     bac:	0f 30       	cpi	r16, 0x0F	; 15
     bae:	11 05       	cpc	r17, r1
     bb0:	ac f3       	brlt	.-22     	; 0xb9c <initialise_display+0x5c>
		ledmatrix_update_column(x, col_colours);
	}
}
     bb2:	28 96       	adiw	r28, 0x08	; 8
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	08 95       	ret

00000bc8 <show_start_screen>:

void show_start_screen(void) {
     bc8:	1f 93       	push	r17
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	28 97       	sbiw	r28, 0x08	; 8
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     bde:	0e 94 36 0b 	call	0x166c	; 0x166c <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     be2:	10 e0       	ldi	r17, 0x00	; 0
     be4:	29 c0       	rjmp	.+82     	; 0xc38 <show_start_screen+0x70>
		col_data = pong_display[col];
     be6:	e1 2f       	mov	r30, r17
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	e7 5c       	subi	r30, 0xC7	; 199
     bec:	fe 4f       	sbci	r31, 0xFE	; 254
     bee:	90 81       	ld	r25, Z
		// using the LSB as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x01) {
     bf0:	90 ff       	sbrs	r25, 0
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <show_start_screen+0x30>
			colour = COLOUR_RED;
     bf4:	2f e0       	ldi	r18, 0x0F	; 15
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <show_start_screen+0x32>
		} else {
			colour = COLOUR_GREEN;
     bf8:	20 ef       	ldi	r18, 0xF0	; 240
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i = 7; i >= 1; i--) {
     bfa:	87 e0       	ldi	r24, 0x07	; 7
     bfc:	13 c0       	rjmp	.+38     	; 0xc24 <show_start_screen+0x5c>
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data & 0x80) {
     bfe:	99 23       	and	r25, r25
     c00:	44 f4       	brge	.+16     	; 0xc12 <show_start_screen+0x4a>
				column_colour_data[i] = colour;
     c02:	e1 e0       	ldi	r30, 0x01	; 1
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	ec 0f       	add	r30, r28
     c08:	fd 1f       	adc	r31, r29
     c0a:	e8 0f       	add	r30, r24
     c0c:	f1 1d       	adc	r31, r1
     c0e:	20 83       	st	Z, r18
     c10:	07 c0       	rjmp	.+14     	; 0xc20 <show_start_screen+0x58>
			} else {
				column_colour_data[i] = 0;
     c12:	e1 e0       	ldi	r30, 0x01	; 1
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	ec 0f       	add	r30, r28
     c18:	fd 1f       	adc	r31, r29
     c1a:	e8 0f       	add	r30, r24
     c1c:	f1 1d       	adc	r31, r1
     c1e:	10 82       	st	Z, r1
			}
			col_data <<= 1;
     c20:	99 0f       	add	r25, r25
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i = 7; i >= 1; i--) {
     c22:	81 50       	subi	r24, 0x01	; 1
     c24:	81 11       	cpse	r24, r1
     c26:	eb cf       	rjmp	.-42     	; 0xbfe <show_start_screen+0x36>
			} else {
				column_colour_data[i] = 0;
			}
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
     c28:	19 82       	std	Y+1, r1	; 0x01
		ledmatrix_update_column(col, column_colour_data);
     c2a:	be 01       	movw	r22, r28
     c2c:	6f 5f       	subi	r22, 0xFF	; 255
     c2e:	7f 4f       	sbci	r23, 0xFF	; 255
     c30:	81 2f       	mov	r24, r17
     c32:	0e 94 19 0b 	call	0x1632	; 0x1632 <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     c36:	1f 5f       	subi	r17, 0xFF	; 255
     c38:	10 31       	cpi	r17, 0x10	; 16
     c3a:	a8 f2       	brcs	.-86     	; 0xbe6 <show_start_screen+0x1e>
		}
		column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
		// Update pong ball colour
	ledmatrix_update_pixel(START_SCREEN_BALL_X, START_SCREEN_BALL_Y, MATRIX_COLOUR_BALL);
     c3c:	4f e0       	ldi	r20, 0x0F	; 15
     c3e:	64 e0       	ldi	r22, 0x04	; 4
     c40:	8e e0       	ldi	r24, 0x0E	; 14
     c42:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <ledmatrix_update_pixel>
}
     c46:	28 96       	adiw	r28, 0x08	; 8
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	08 95       	ret

00000c5a <update_start_screen>:

// Update dynamic start screen based on the frame number (0-11)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number) {
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	68 97       	sbiw	r28, 0x18	; 24
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
	
	if (frame_number < 0 || frame_number > 11) {
     c70:	8c 30       	cpi	r24, 0x0C	; 12
     c72:	08 f0       	brcs	.+2      	; 0xc76 <update_start_screen+0x1c>
     c74:	64 c0       	rjmp	.+200    	; 0xd3e <update_start_screen+0xe4>
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	17 c0       	rjmp	.+46     	; 0xca8 <update_start_screen+0x4e>
	
	// Clear the dynamic columns
	MatrixColumn column_colour_data[PONG_NUM_DYNAMIC_COLS];
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
		for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++) {
			column_colour_data[col][row] = 0;
     c7a:	e2 2f       	mov	r30, r18
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	ee 0f       	add	r30, r30
     c88:	ff 1f       	adc	r31, r31
     c8a:	41 e0       	ldi	r20, 0x01	; 1
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	4c 0f       	add	r20, r28
     c90:	5d 1f       	adc	r21, r29
     c92:	e4 0f       	add	r30, r20
     c94:	f5 1f       	adc	r31, r21
     c96:	e9 0f       	add	r30, r25
     c98:	f1 1d       	adc	r31, r1
     c9a:	10 82       	st	Z, r1
	}
	
	// Clear the dynamic columns
	MatrixColumn column_colour_data[PONG_NUM_DYNAMIC_COLS];
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
		for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++) {
     c9c:	9f 5f       	subi	r25, 0xFF	; 255
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <update_start_screen+0x48>
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	98 30       	cpi	r25, 0x08	; 8
     ca4:	50 f3       	brcs	.-44     	; 0xc7a <update_start_screen+0x20>
		return;
	}
	
	// Clear the dynamic columns
	MatrixColumn column_colour_data[PONG_NUM_DYNAMIC_COLS];
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
     ca6:	2f 5f       	subi	r18, 0xFF	; 255
     ca8:	23 30       	cpi	r18, 0x03	; 3
     caa:	d0 f3       	brcs	.-12     	; 0xca0 <update_start_screen+0x46>
			column_colour_data[col][row] = 0;
		}
	}
	
	// Set the middle paddle pixel
	column_colour_data[1][6] = MATRIX_COLOUR_PLAYER;
     cac:	90 ef       	ldi	r25, 0xF0	; 240
     cae:	9f 87       	std	Y+15, r25	; 0x0f
	column_colour_data[1][1] = MATRIX_COLOUR_PLAYER;
     cb0:	9a 87       	std	Y+10, r25	; 0x0a
	
	// Set the edge paddle pixel depending on frame number
	if (frame_number < 3 || frame_number >= 9) {
     cb2:	9d ef       	ldi	r25, 0xFD	; 253
     cb4:	98 0f       	add	r25, r24
     cb6:	96 30       	cpi	r25, 0x06	; 6
     cb8:	18 f0       	brcs	.+6      	; 0xcc0 <update_start_screen+0x66>
		column_colour_data[2][6] = MATRIX_COLOUR_PLAYER;
     cba:	90 ef       	ldi	r25, 0xF0	; 240
     cbc:	9f 8b       	std	Y+23, r25	; 0x17
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <update_start_screen+0x6a>
	} else {
		column_colour_data[0][6] = MATRIX_COLOUR_PLAYER;
     cc0:	90 ef       	ldi	r25, 0xF0	; 240
     cc2:	9f 83       	std	Y+7, r25	; 0x07
	}
	if (frame_number < 6) {
     cc4:	86 30       	cpi	r24, 0x06	; 6
     cc6:	18 f4       	brcc	.+6      	; 0xcce <update_start_screen+0x74>
		column_colour_data[0][1] = MATRIX_COLOUR_PLAYER;
     cc8:	90 ef       	ldi	r25, 0xF0	; 240
     cca:	9a 83       	std	Y+2, r25	; 0x02
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <update_start_screen+0x78>
	} else {
		column_colour_data[2][1] = MATRIX_COLOUR_PLAYER;
     cce:	90 ef       	ldi	r25, 0xF0	; 240
     cd0:	9a 8b       	std	Y+18, r25	; 0x12
	}
	
	// Set the ball pixel depending on frame number
	if (frame_number == 5 || frame_number == 11) {
     cd2:	85 30       	cpi	r24, 0x05	; 5
     cd4:	11 f0       	breq	.+4      	; 0xcda <update_start_screen+0x80>
     cd6:	8b 30       	cpi	r24, 0x0B	; 11
     cd8:	19 f4       	brne	.+6      	; 0xce0 <update_start_screen+0x86>
		column_colour_data[1][5] = MATRIX_COLOUR_BALL;
     cda:	8f e0       	ldi	r24, 0x0F	; 15
     cdc:	8e 87       	std	Y+14, r24	; 0x0e
     cde:	15 c0       	rjmp	.+42     	; 0xd0a <update_start_screen+0xb0>
	} else if (frame_number == 0 || frame_number == 4 || frame_number == 6
     ce0:	88 23       	and	r24, r24
     ce2:	31 f0       	breq	.+12     	; 0xcf0 <update_start_screen+0x96>
     ce4:	84 30       	cpi	r24, 0x04	; 4
     ce6:	21 f0       	breq	.+8      	; 0xcf0 <update_start_screen+0x96>
     ce8:	86 30       	cpi	r24, 0x06	; 6
     cea:	11 f0       	breq	.+4      	; 0xcf0 <update_start_screen+0x96>
			|| frame_number == 10) {
     cec:	8a 30       	cpi	r24, 0x0A	; 10
     cee:	19 f4       	brne	.+6      	; 0xcf6 <update_start_screen+0x9c>
		column_colour_data[1][4] = MATRIX_COLOUR_BALL;
     cf0:	8f e0       	ldi	r24, 0x0F	; 15
     cf2:	8d 87       	std	Y+13, r24	; 0x0d
     cf4:	0a c0       	rjmp	.+20     	; 0xd0a <update_start_screen+0xb0>
	} else if (frame_number == 1 || frame_number == 3 || frame_number == 7
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	31 f0       	breq	.+12     	; 0xd06 <update_start_screen+0xac>
     cfa:	83 30       	cpi	r24, 0x03	; 3
     cfc:	21 f0       	breq	.+8      	; 0xd06 <update_start_screen+0xac>
     cfe:	87 30       	cpi	r24, 0x07	; 7
     d00:	11 f0       	breq	.+4      	; 0xd06 <update_start_screen+0xac>
			|| frame_number == 9) {
     d02:	89 30       	cpi	r24, 0x09	; 9
     d04:	21 f4       	brne	.+8      	; 0xd0e <update_start_screen+0xb4>
		column_colour_data[1][3] = MATRIX_COLOUR_BALL;
     d06:	8f e0       	ldi	r24, 0x0F	; 15
     d08:	8c 87       	std	Y+12, r24	; 0x0c
     d0a:	10 e0       	ldi	r17, 0x00	; 0
     d0c:	16 c0       	rjmp	.+44     	; 0xd3a <update_start_screen+0xe0>
	} else {
		column_colour_data[1][2] = MATRIX_COLOUR_BALL;
     d0e:	8f e0       	ldi	r24, 0x0F	; 15
     d10:	8b 87       	std	Y+11, r24	; 0x0b
     d12:	fb cf       	rjmp	.-10     	; 0xd0a <update_start_screen+0xb0>
	}

	// Update columns
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
		ledmatrix_update_column(col + PONG_DYNAMIC_COL_START, column_colour_data[col]);
     d14:	61 2f       	mov	r22, r17
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	66 0f       	add	r22, r22
     d1a:	77 1f       	adc	r23, r23
     d1c:	66 0f       	add	r22, r22
     d1e:	77 1f       	adc	r23, r23
     d20:	66 0f       	add	r22, r22
     d22:	77 1f       	adc	r23, r23
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	8c 0f       	add	r24, r28
     d2a:	9d 1f       	adc	r25, r29
     d2c:	68 0f       	add	r22, r24
     d2e:	79 1f       	adc	r23, r25
     d30:	8d e0       	ldi	r24, 0x0D	; 13
     d32:	81 0f       	add	r24, r17
     d34:	0e 94 19 0b 	call	0x1632	; 0x1632 <ledmatrix_update_column>
	} else {
		column_colour_data[1][2] = MATRIX_COLOUR_BALL;
	}

	// Update columns
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
     d38:	1f 5f       	subi	r17, 0xFF	; 255
     d3a:	13 30       	cpi	r17, 0x03	; 3
     d3c:	58 f3       	brcs	.-42     	; 0xd14 <update_start_screen+0xba>
		ledmatrix_update_column(col + PONG_DYNAMIC_COL_START, column_colour_data[col]);
	}
}
     d3e:	68 96       	adiw	r28, 0x18	; 24
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	08 95       	ret

00000d52 <update_square_colour>:
// provided object
void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	// determine which colour corresponds to this object
	PixelColour colour;
	
	switch (object) {
     d52:	42 30       	cpi	r20, 0x02	; 2
     d54:	31 f0       	breq	.+12     	; 0xd62 <update_square_colour+0x10>
     d56:	44 30       	cpi	r20, 0x04	; 4
     d58:	31 f0       	breq	.+12     	; 0xd66 <update_square_colour+0x14>
     d5a:	41 30       	cpi	r20, 0x01	; 1
     d5c:	31 f0       	breq	.+12     	; 0xd6a <update_square_colour+0x18>
		case EMPTY_SQUARE:
			colour = MATRIX_COLOUR_EMPTY;
     d5e:	40 e0       	ldi	r20, 0x00	; 0
     d60:	05 c0       	rjmp	.+10     	; 0xd6c <update_square_colour+0x1a>
			break;
		case PLAYER:
			colour = MATRIX_COLOUR_PLAYER;
			break;
		case BALL:
			colour = MATRIX_COLOUR_BALL;
     d62:	4f e0       	ldi	r20, 0x0F	; 15
			break;
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <update_square_colour+0x1a>
		case GUIDE:
			colour = MATRIX_COLOR_GUIDE;
     d66:	40 e2       	ldi	r20, 0x20	; 32
			break;
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <update_square_colour+0x1a>
	switch (object) {
		case EMPTY_SQUARE:
			colour = MATRIX_COLOUR_EMPTY;
			break;
		case PLAYER:
			colour = MATRIX_COLOUR_PLAYER;
     d6a:	40 ef       	ldi	r20, 0xF0	; 240
			colour = MATRIX_COLOUR_EMPTY;
			break;
	}

	// Update the pixel at the given location with this colour
	ledmatrix_update_pixel(x + MATRIX_X_OFFSET, y + MATRIX_Y_OFFSET, colour);
     d6c:	8e 5f       	subi	r24, 0xFE	; 254
     d6e:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <ledmatrix_update_pixel>
     d72:	08 95       	ret

00000d74 <draw_3x3_number>:
}

// Draw a three by three number from left to right bottom to top
void draw_3x3_number(uint8_t start_x, uint8_t start_y, uint8_t num){
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	d8 2e       	mov	r13, r24
     d84:	e6 2e       	mov	r14, r22
	uint16_t digit = LED_DIGIT_FONTS[num];
     d86:	e4 2f       	mov	r30, r20
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	eb 5d       	subi	r30, 0xDB	; 219
     d90:	fe 4f       	sbci	r31, 0xFE	; 254
     d92:	00 81       	ld	r16, Z
     d94:	11 81       	ldd	r17, Z+1	; 0x01
	uint8_t offset_x =  0, offset_y = 0;
	for(uint8_t bit = 0; bit < 16; bit++){
     d96:	d0 e0       	ldi	r29, 0x00	; 0
}

// Draw a three by three number from left to right bottom to top
void draw_3x3_number(uint8_t start_x, uint8_t start_y, uint8_t num){
	uint16_t digit = LED_DIGIT_FONTS[num];
	uint8_t offset_x =  0, offset_y = 0;
     d98:	f1 2c       	mov	r15, r1
     d9a:	c0 e0       	ldi	r28, 0x00	; 0
	for(uint8_t bit = 0; bit < 16; bit++){
     d9c:	1f c0       	rjmp	.+62     	; 0xddc <draw_3x3_number+0x68>
		// Check if bit is turned on
		if(digit & (1<<bit)){
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0d 2e       	mov	r0, r29
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <draw_3x3_number+0x36>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <draw_3x3_number+0x32>
     dae:	80 23       	and	r24, r16
     db0:	91 23       	and	r25, r17
     db2:	89 2b       	or	r24, r25
     db4:	39 f0       	breq	.+14     	; 0xdc4 <draw_3x3_number+0x50>
			ledmatrix_update_pixel(start_x - offset_x, start_y - offset_y, MATRIX_COLOR_SCORE);
     db6:	4c e3       	ldi	r20, 0x3C	; 60
     db8:	6e 2d       	mov	r22, r14
     dba:	6f 19       	sub	r22, r15
     dbc:	8d 2d       	mov	r24, r13
     dbe:	8c 1b       	sub	r24, r28
     dc0:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <ledmatrix_update_pixel>
		}
		if(offset_x == 2){
     dc4:	c2 30       	cpi	r28, 0x02	; 2
     dc6:	09 f4       	brne	.+2      	; 0xdca <draw_3x3_number+0x56>
			offset_y++;
     dc8:	f3 94       	inc	r15
		}
		offset_x = (offset_x + 1) % 3;
     dca:	8c 2f       	mov	r24, r28
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	63 e0       	ldi	r22, 0x03	; 3
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	0e 94 11 13 	call	0x2622	; 0x2622 <__divmodhi4>
     dd8:	c8 2f       	mov	r28, r24

// Draw a three by three number from left to right bottom to top
void draw_3x3_number(uint8_t start_x, uint8_t start_y, uint8_t num){
	uint16_t digit = LED_DIGIT_FONTS[num];
	uint8_t offset_x =  0, offset_y = 0;
	for(uint8_t bit = 0; bit < 16; bit++){
     dda:	df 5f       	subi	r29, 0xFF	; 255
     ddc:	d0 31       	cpi	r29, 0x10	; 16
     dde:	f8 f2       	brcs	.-66     	; 0xd9e <draw_3x3_number+0x2a>
		if(offset_x == 2){
			offset_y++;
		}
		offset_x = (offset_x + 1) % 3;
	}
}
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	df 90       	pop	r13
     dee:	08 95       	ret

00000df0 <clear_3x3_grid>:

void clear_3x3_grid(uint8_t start_x, uint8_t start_y){
     df0:	ff 92       	push	r15
     df2:	0f 93       	push	r16
     df4:	1f 93       	push	r17
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	f8 2e       	mov	r15, r24
     dfc:	06 2f       	mov	r16, r22
	uint8_t offset_x = 0, offset_y = 0;
	for(uint8_t bit = 0; bit < 16; bit++){
     dfe:	d0 e0       	ldi	r29, 0x00	; 0
		offset_x = (offset_x + 1) % 3;
	}
}

void clear_3x3_grid(uint8_t start_x, uint8_t start_y){
	uint8_t offset_x = 0, offset_y = 0;
     e00:	10 e0       	ldi	r17, 0x00	; 0
     e02:	c0 e0       	ldi	r28, 0x00	; 0
	for(uint8_t bit = 0; bit < 16; bit++){
     e04:	13 c0       	rjmp	.+38     	; 0xe2c <clear_3x3_grid+0x3c>
		// Check if bit is turned on
		ledmatrix_update_pixel(start_x - offset_x, start_y - offset_y, MATRIX_COLOUR_EMPTY);
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	60 2f       	mov	r22, r16
     e0a:	61 1b       	sub	r22, r17
     e0c:	8f 2d       	mov	r24, r15
     e0e:	8c 1b       	sub	r24, r28
     e10:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <ledmatrix_update_pixel>
		if(offset_x == 2){
     e14:	c2 30       	cpi	r28, 0x02	; 2
     e16:	09 f4       	brne	.+2      	; 0xe1a <clear_3x3_grid+0x2a>
			offset_y++;
     e18:	1f 5f       	subi	r17, 0xFF	; 255
		}
		offset_x = (offset_x + 1) % 3;
     e1a:	8c 2f       	mov	r24, r28
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	63 e0       	ldi	r22, 0x03	; 3
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	0e 94 11 13 	call	0x2622	; 0x2622 <__divmodhi4>
     e28:	c8 2f       	mov	r28, r24
	}
}

void clear_3x3_grid(uint8_t start_x, uint8_t start_y){
	uint8_t offset_x = 0, offset_y = 0;
	for(uint8_t bit = 0; bit < 16; bit++){
     e2a:	df 5f       	subi	r29, 0xFF	; 255
     e2c:	d0 31       	cpi	r29, 0x10	; 16
     e2e:	58 f3       	brcs	.-42     	; 0xe06 <clear_3x3_grid+0x16>
		if(offset_x == 2){
			offset_y++;
		}
		offset_x = (offset_x + 1) % 3;
	}
}
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	ff 90       	pop	r15
     e3a:	08 95       	ret

00000e3c <draw_rally_count>:

void draw_rally_count(uint8_t x, uint8_t num) {
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	28 97       	sbiw	r28, 0x08	; 8
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn cols = { 0 };
     e50:	fe 01       	movw	r30, r28
     e52:	31 96       	adiw	r30, 0x01	; 1
     e54:	98 e0       	ldi	r25, 0x08	; 8
     e56:	df 01       	movw	r26, r30
     e58:	1d 92       	st	X+, r1
     e5a:	9a 95       	dec	r25
     e5c:	e9 f7       	brne	.-6      	; 0xe58 <draw_rally_count+0x1c>
	for(uint8_t y = 0; y < num; y++){
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	09 c0       	rjmp	.+18     	; 0xe74 <draw_rally_count+0x38>
		cols[y] = MATRIX_COLOR_RALLY;
     e62:	e1 e0       	ldi	r30, 0x01	; 1
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	ec 0f       	add	r30, r28
     e68:	fd 1f       	adc	r31, r29
     e6a:	e9 0f       	add	r30, r25
     e6c:	f1 1d       	adc	r31, r1
     e6e:	2f ef       	ldi	r18, 0xFF	; 255
     e70:	20 83       	st	Z, r18
	}
}

void draw_rally_count(uint8_t x, uint8_t num) {
	MatrixColumn cols = { 0 };
	for(uint8_t y = 0; y < num; y++){
     e72:	9f 5f       	subi	r25, 0xFF	; 255
     e74:	96 17       	cp	r25, r22
     e76:	a8 f3       	brcs	.-22     	; 0xe62 <draw_rally_count+0x26>
		cols[y] = MATRIX_COLOR_RALLY;
	}
	ledmatrix_update_column(x, cols);
     e78:	be 01       	movw	r22, r28
     e7a:	6f 5f       	subi	r22, 0xFF	; 255
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	0e 94 19 0b 	call	0x1632	; 0x1632 <ledmatrix_update_column>
}
     e82:	28 96       	adiw	r28, 0x08	; 8
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	08 95       	ret

00000e94 <clear_rally_col>:

void clear_rally_col(uint8_t x){
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	28 97       	sbiw	r28, 0x08	; 8
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
	MatrixColumn cols = { 0 };
     ea8:	be 01       	movw	r22, r28
     eaa:	6f 5f       	subi	r22, 0xFF	; 255
     eac:	7f 4f       	sbci	r23, 0xFF	; 255
     eae:	98 e0       	ldi	r25, 0x08	; 8
     eb0:	fb 01       	movw	r30, r22
     eb2:	11 92       	st	Z+, r1
     eb4:	9a 95       	dec	r25
     eb6:	e9 f7       	brne	.-6      	; 0xeb2 <clear_rally_col+0x1e>
	ledmatrix_update_column(x, cols);
     eb8:	0e 94 19 0b 	call	0x1632	; 0x1632 <ledmatrix_update_column>
     ebc:	28 96       	adiw	r28, 0x08	; 8
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	08 95       	ret

00000ece <draw_guide_paddle>:
}

uint8_t get_winner(void){
	if(!is_game_over()) return 0;
	return (player_score[PLAYER_1] == WIN_SCORE)?1:2;
}
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	c0 91 b9 01 	lds	r28, 0x01B9	; 0x8001b9 <guide_y_coordinate>
     ed6:	0c 2e       	mov	r0, r28
     ed8:	00 0c       	add	r0, r0
     eda:	dd 0b       	sbc	r29, r29
     edc:	12 c0       	rjmp	.+36     	; 0xf02 <draw_guide_paddle+0x34>
     ede:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <player_y_coordinates+0x1>
     ee2:	08 2e       	mov	r0, r24
     ee4:	00 0c       	add	r0, r0
     ee6:	99 0b       	sbc	r25, r25
     ee8:	c8 17       	cp	r28, r24
     eea:	d9 07       	cpc	r29, r25
     eec:	49 f0       	breq	.+18     	; 0xf00 <draw_guide_paddle+0x32>
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	c8 17       	cp	r28, r24
     ef2:	d9 07       	cpc	r29, r25
     ef4:	29 f0       	breq	.+10     	; 0xf00 <draw_guide_paddle+0x32>
     ef6:	44 e0       	ldi	r20, 0x04	; 4
     ef8:	6c 2f       	mov	r22, r28
     efa:	8b e0       	ldi	r24, 0x0B	; 11
     efc:	0e 94 a9 06 	call	0xd52	; 0xd52 <update_square_colour>
     f00:	21 96       	adiw	r28, 0x01	; 1
     f02:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <guide_y_coordinate>
     f06:	08 2e       	mov	r0, r24
     f08:	00 0c       	add	r0, r0
     f0a:	99 0b       	sbc	r25, r25
     f0c:	02 96       	adiw	r24, 0x02	; 2
     f0e:	c8 17       	cp	r28, r24
     f10:	d9 07       	cpc	r29, r25
     f12:	2c f3       	brlt	.-54     	; 0xede <draw_guide_paddle+0x10>
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <erase_guide_paddle>:
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	c0 91 b9 01 	lds	r28, 0x01B9	; 0x8001b9 <guide_y_coordinate>
     f22:	0c 2e       	mov	r0, r28
     f24:	00 0c       	add	r0, r0
     f26:	dd 0b       	sbc	r29, r29
     f28:	12 c0       	rjmp	.+36     	; 0xf4e <erase_guide_paddle+0x34>
     f2a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <player_y_coordinates+0x1>
     f2e:	08 2e       	mov	r0, r24
     f30:	00 0c       	add	r0, r0
     f32:	99 0b       	sbc	r25, r25
     f34:	c8 17       	cp	r28, r24
     f36:	d9 07       	cpc	r29, r25
     f38:	49 f0       	breq	.+18     	; 0xf4c <erase_guide_paddle+0x32>
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	c8 17       	cp	r28, r24
     f3e:	d9 07       	cpc	r29, r25
     f40:	29 f0       	breq	.+10     	; 0xf4c <erase_guide_paddle+0x32>
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	6c 2f       	mov	r22, r28
     f46:	8b e0       	ldi	r24, 0x0B	; 11
     f48:	0e 94 a9 06 	call	0xd52	; 0xd52 <update_square_colour>
     f4c:	21 96       	adiw	r28, 0x01	; 1
     f4e:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <guide_y_coordinate>
     f52:	08 2e       	mov	r0, r24
     f54:	00 0c       	add	r0, r0
     f56:	99 0b       	sbc	r25, r25
     f58:	02 96       	adiw	r24, 0x02	; 2
     f5a:	c8 17       	cp	r28, r24
     f5c:	d9 07       	cpc	r29, r25
     f5e:	2c f3       	brlt	.-54     	; 0xf2a <erase_guide_paddle+0x10>
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	08 95       	ret

00000f66 <update_guide_paddle>:
     f66:	cf 93       	push	r28
     f68:	c8 2f       	mov	r28, r24
     f6a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <erase_guide_paddle>
     f6e:	c0 93 b9 01 	sts	0x01B9, r28	; 0x8001b9 <guide_y_coordinate>
     f72:	0e 94 67 07 	call	0xece	; 0xece <draw_guide_paddle>
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <draw_player_paddle>:
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	e8 2e       	mov	r14, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	fc 01       	movw	r30, r24
     f8c:	e7 5a       	subi	r30, 0xA7	; 167
     f8e:	fe 4f       	sbci	r31, 0xFE	; 254
     f90:	f0 80       	ld	r15, Z
     f92:	fc 01       	movw	r30, r24
     f94:	e4 54       	subi	r30, 0x44	; 68
     f96:	fe 4f       	sbci	r31, 0xFE	; 254
     f98:	00 81       	ld	r16, Z
     f9a:	00 2e       	mov	r0, r16
     f9c:	00 0c       	add	r0, r0
     f9e:	11 0b       	sbc	r17, r17
     fa0:	e8 01       	movw	r28, r16
     fa2:	06 c0       	rjmp	.+12     	; 0xfb0 <draw_player_paddle+0x36>
     fa4:	41 e0       	ldi	r20, 0x01	; 1
     fa6:	6c 2f       	mov	r22, r28
     fa8:	8f 2d       	mov	r24, r15
     faa:	0e 94 a9 06 	call	0xd52	; 0xd52 <update_square_colour>
     fae:	21 96       	adiw	r28, 0x01	; 1
     fb0:	c8 01       	movw	r24, r16
     fb2:	02 96       	adiw	r24, 0x02	; 2
     fb4:	c8 17       	cp	r28, r24
     fb6:	d9 07       	cpc	r29, r25
     fb8:	ac f3       	brlt	.-22     	; 0xfa4 <draw_player_paddle+0x2a>
     fba:	0e 94 45 04 	call	0x88a	; 0x88a <is_cpu_enabled>
     fbe:	88 23       	and	r24, r24
     fc0:	39 f0       	breq	.+14     	; 0xfd0 <draw_player_paddle+0x56>
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	e8 12       	cpse	r14, r24
     fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <draw_player_paddle+0x56>
     fc8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <erase_guide_paddle>
     fcc:	0e 94 67 07 	call	0xece	; 0xece <draw_guide_paddle>
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	ff 90       	pop	r15
     fda:	ef 90       	pop	r14
     fdc:	08 95       	ret

00000fde <erase_player_paddle>:
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	fc 01       	movw	r30, r24
     fec:	e7 5a       	subi	r30, 0xA7	; 167
     fee:	fe 4f       	sbci	r31, 0xFE	; 254
     ff0:	f0 80       	ld	r15, Z
     ff2:	fc 01       	movw	r30, r24
     ff4:	e4 54       	subi	r30, 0x44	; 68
     ff6:	fe 4f       	sbci	r31, 0xFE	; 254
     ff8:	00 81       	ld	r16, Z
     ffa:	00 2e       	mov	r0, r16
     ffc:	00 0c       	add	r0, r0
     ffe:	11 0b       	sbc	r17, r17
    1000:	e8 01       	movw	r28, r16
    1002:	06 c0       	rjmp	.+12     	; 0x1010 <erase_player_paddle+0x32>
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	6c 2f       	mov	r22, r28
    1008:	8f 2d       	mov	r24, r15
    100a:	0e 94 a9 06 	call	0xd52	; 0xd52 <update_square_colour>
    100e:	21 96       	adiw	r28, 0x01	; 1
    1010:	c8 01       	movw	r24, r16
    1012:	02 96       	adiw	r24, 0x02	; 2
    1014:	c8 17       	cp	r28, r24
    1016:	d9 07       	cpc	r29, r25
    1018:	ac f3       	brlt	.-22     	; 0x1004 <erase_player_paddle+0x26>
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	08 95       	ret

00001026 <is_game_paused>:
    1026:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <game_paused>
    102a:	08 95       	ret

0000102c <toggle_pause>:
    102c:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <game_paused>
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	89 27       	eor	r24, r25
    1034:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <game_paused>
    1038:	88 23       	and	r24, r24
    103a:	91 f0       	breq	.+36     	; 0x1060 <toggle_pause+0x34>
    103c:	68 e0       	ldi	r22, 0x08	; 8
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	8a e0       	ldi	r24, 0x0A	; 10
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <move_terminal_cursor>
    1048:	8c ec       	ldi	r24, 0xCC	; 204
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	9f 93       	push	r25
    104e:	8f 93       	push	r24
    1050:	0e 94 0e 14 	call	0x281c	; 0x281c <printf_P>
    1054:	8b b1       	in	r24, 0x0b	; 11
    1056:	88 60       	ori	r24, 0x08	; 8
    1058:	8b b9       	out	0x0b, r24	; 11
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0b c0       	rjmp	.+22     	; 0x1076 <toggle_pause+0x4a>
    1060:	68 e0       	ldi	r22, 0x08	; 8
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	8a e0       	ldi	r24, 0x0A	; 10
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <move_terminal_cursor>
    106c:	0e 94 04 11 	call	0x2208	; 0x2208 <clear_to_end_of_line>
    1070:	8b b1       	in	r24, 0x0b	; 11
    1072:	87 7f       	andi	r24, 0xF7	; 247
    1074:	8b b9       	out	0x0b, r24	; 11
    1076:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <game_paused>
    107a:	08 95       	ret

0000107c <check_vertical_ball_collision>:
    107c:	fb 01       	movw	r30, r22
    107e:	80 81       	ld	r24, Z
    1080:	88 30       	cpi	r24, 0x08	; 8
    1082:	48 f0       	brcs	.+18     	; 0x1096 <check_vertical_ball_collision+0x1a>
    1084:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <ball_y_direction>
    1088:	81 95       	neg	r24
    108a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ball_y_direction>
    108e:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <ball_y>
    1092:	89 0f       	add	r24, r25
    1094:	80 83       	st	Z, r24
    1096:	08 95       	ret

00001098 <check_ball_collision_with_playerEX>:
    1098:	84 13       	cpse	r24, r20
    109a:	15 c0       	rjmp	.+42     	; 0x10c6 <check_ball_collision_with_playerEX+0x2e>
    109c:	06 2e       	mov	r0, r22
    109e:	00 0c       	add	r0, r0
    10a0:	77 0b       	sbc	r23, r23
    10a2:	cb 01       	movw	r24, r22
    10a4:	08 c0       	rjmp	.+16     	; 0x10b6 <check_ball_collision_with_playerEX+0x1e>
    10a6:	42 2f       	mov	r20, r18
    10a8:	02 2e       	mov	r0, r18
    10aa:	00 0c       	add	r0, r0
    10ac:	55 0b       	sbc	r21, r21
    10ae:	84 17       	cp	r24, r20
    10b0:	95 07       	cpc	r25, r21
    10b2:	59 f0       	breq	.+22     	; 0x10ca <check_ball_collision_with_playerEX+0x32>
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	ab 01       	movw	r20, r22
    10b8:	4e 5f       	subi	r20, 0xFE	; 254
    10ba:	5f 4f       	sbci	r21, 0xFF	; 255
    10bc:	84 17       	cp	r24, r20
    10be:	95 07       	cpc	r25, r21
    10c0:	94 f3       	brlt	.-28     	; 0x10a6 <check_ball_collision_with_playerEX+0xe>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	08 95       	ret
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	08 95       	ret
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	08 95       	ret

000010ce <move_player_paddle>:
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	08 2f       	mov	r16, r24
    10d8:	08 2e       	mov	r0, r24
    10da:	00 0c       	add	r0, r0
    10dc:	11 0b       	sbc	r17, r17
    10de:	f8 01       	movw	r30, r16
    10e0:	e4 54       	subi	r30, 0x44	; 68
    10e2:	fe 4f       	sbci	r31, 0xFE	; 254
    10e4:	c0 81       	ld	r28, Z
    10e6:	c6 0f       	add	r28, r22
    10e8:	2c 2f       	mov	r18, r28
    10ea:	0c 2e       	mov	r0, r28
    10ec:	00 0c       	add	r0, r0
    10ee:	33 0b       	sbc	r19, r19
    10f0:	2e 5f       	subi	r18, 0xFE	; 254
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	29 30       	cpi	r18, 0x09	; 9
    10f6:	31 05       	cpc	r19, r1
    10f8:	d4 f4       	brge	.+52     	; 0x112e <move_player_paddle+0x60>
    10fa:	cc 23       	and	r28, r28
    10fc:	c4 f0       	brlt	.+48     	; 0x112e <move_player_paddle+0x60>
    10fe:	d8 2f       	mov	r29, r24
    1100:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <ball_y>
    1104:	40 91 d6 01 	lds	r20, 0x01D6	; 0x8001d6 <ball_x>
    1108:	6c 2f       	mov	r22, r28
    110a:	f8 01       	movw	r30, r16
    110c:	e7 5a       	subi	r30, 0xA7	; 167
    110e:	fe 4f       	sbci	r31, 0xFE	; 254
    1110:	80 81       	ld	r24, Z
    1112:	0e 94 4c 08 	call	0x1098	; 0x1098 <check_ball_collision_with_playerEX>
    1116:	81 11       	cpse	r24, r1
    1118:	0a c0       	rjmp	.+20     	; 0x112e <move_player_paddle+0x60>
    111a:	8d 2f       	mov	r24, r29
    111c:	0e 94 ef 07 	call	0xfde	; 0xfde <erase_player_paddle>
    1120:	f8 01       	movw	r30, r16
    1122:	e4 54       	subi	r30, 0x44	; 68
    1124:	fe 4f       	sbci	r31, 0xFE	; 254
    1126:	c0 83       	st	Z, r28
    1128:	8d 2f       	mov	r24, r29
    112a:	0e 94 bd 07 	call	0xf7a	; 0xf7a <draw_player_paddle>
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	08 95       	ret

00001138 <handle_player_move>:
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	c8 2f       	mov	r28, r24
    113e:	0e 94 13 08 	call	0x1026	; 0x1026 <is_game_paused>
    1142:	81 11       	cpse	r24, r1
    1144:	27 c0       	rjmp	.+78     	; 0x1194 <handle_player_move+0x5c>
    1146:	dc 2f       	mov	r29, r28
    1148:	d1 70       	andi	r29, 0x01	; 1
    114a:	c0 ff       	sbrs	r28, 0
    114c:	06 c0       	rjmp	.+12     	; 0x115a <handle_player_move+0x22>
    114e:	c1 fd       	sbrc	r28, 1
    1150:	04 c0       	rjmp	.+8      	; 0x115a <handle_player_move+0x22>
    1152:	6f ef       	ldi	r22, 0xFF	; 255
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	0e 94 67 08 	call	0x10ce	; 0x10ce <move_player_paddle>
    115a:	c1 ff       	sbrs	r28, 1
    115c:	06 c0       	rjmp	.+12     	; 0x116a <handle_player_move+0x32>
    115e:	d1 11       	cpse	r29, r1
    1160:	04 c0       	rjmp	.+8      	; 0x116a <handle_player_move+0x32>
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	0e 94 67 08 	call	0x10ce	; 0x10ce <move_player_paddle>
    116a:	0e 94 45 04 	call	0x88a	; 0x88a <is_cpu_enabled>
    116e:	81 11       	cpse	r24, r1
    1170:	11 c0       	rjmp	.+34     	; 0x1194 <handle_player_move+0x5c>
    1172:	dc 2f       	mov	r29, r28
    1174:	d4 70       	andi	r29, 0x04	; 4
    1176:	c2 ff       	sbrs	r28, 2
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <handle_player_move+0x4c>
    117a:	c3 fd       	sbrc	r28, 3
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <handle_player_move+0x4c>
    117e:	6f ef       	ldi	r22, 0xFF	; 255
    1180:	0e 94 67 08 	call	0x10ce	; 0x10ce <move_player_paddle>
    1184:	c3 ff       	sbrs	r28, 3
    1186:	06 c0       	rjmp	.+12     	; 0x1194 <handle_player_move+0x5c>
    1188:	d1 11       	cpse	r29, r1
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <handle_player_move+0x5c>
    118c:	61 e0       	ldi	r22, 0x01	; 1
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	0e 94 67 08 	call	0x10ce	; 0x10ce <move_player_paddle>
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	08 95       	ret

0000119a <check_ball_collision_with_player>:
    119a:	24 2f       	mov	r18, r20
    119c:	08 2e       	mov	r0, r24
    119e:	00 0c       	add	r0, r0
    11a0:	99 0b       	sbc	r25, r25
    11a2:	fc 01       	movw	r30, r24
    11a4:	e7 5a       	subi	r30, 0xA7	; 167
    11a6:	fe 4f       	sbci	r31, 0xFE	; 254
    11a8:	dc 01       	movw	r26, r24
    11aa:	a4 54       	subi	r26, 0x44	; 68
    11ac:	be 4f       	sbci	r27, 0xFE	; 254
    11ae:	8c 91       	ld	r24, X
    11b0:	46 2f       	mov	r20, r22
    11b2:	68 2f       	mov	r22, r24
    11b4:	80 81       	ld	r24, Z
    11b6:	0e 94 4c 08 	call	0x1098	; 0x1098 <check_ball_collision_with_playerEX>
    11ba:	08 95       	ret

000011bc <generate_random_number>:
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	d8 2f       	mov	r29, r24
    11c2:	c6 2f       	mov	r28, r22
    11c4:	0e 94 b8 13 	call	0x2770	; 0x2770 <rand>
    11c8:	6c 2f       	mov	r22, r28
    11ca:	cc 0f       	add	r28, r28
    11cc:	77 0b       	sbc	r23, r23
    11ce:	6f 5f       	subi	r22, 0xFF	; 255
    11d0:	7f 4f       	sbci	r23, 0xFF	; 255
    11d2:	6d 1b       	sub	r22, r29
    11d4:	71 09       	sbc	r23, r1
    11d6:	d7 fd       	sbrc	r29, 7
    11d8:	73 95       	inc	r23
    11da:	0e 94 11 13 	call	0x2622	; 0x2622 <__divmodhi4>
    11de:	8d 0f       	add	r24, r29
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <random_x_direction>:
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	0e 94 de 08 	call	0x11bc	; 0x11bc <generate_random_number>
    11ee:	88 23       	and	r24, r24
    11f0:	11 f0       	breq	.+4      	; 0x11f6 <random_x_direction+0x10>
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	08 95       	ret
    11f6:	8f ef       	ldi	r24, 0xFF	; 255
    11f8:	08 95       	ret

000011fa <random_y_direction>:
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	8f ef       	ldi	r24, 0xFF	; 255
    11fe:	0e 94 de 08 	call	0x11bc	; 0x11bc <generate_random_number>
    1202:	08 95       	ret

00001204 <reset_ball>:
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <ball_y>
    120a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <ball_x>
    120e:	0e 94 a9 06 	call	0xd52	; 0xd52 <update_square_colour>
    1212:	85 e0       	ldi	r24, 0x05	; 5
    1214:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <ball_x>
    1218:	84 e0       	ldi	r24, 0x04	; 4
    121a:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <ball_y>
    121e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <random_x_direction>
    1222:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <ball_x_direction>
    1226:	0e 94 fd 08 	call	0x11fa	; 0x11fa <random_y_direction>
    122a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ball_y_direction>
    122e:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <gained_point>
    1232:	08 95       	ret

00001234 <display_players_score>:
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	6a e0       	ldi	r22, 0x0A	; 10
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	8a e0       	ldi	r24, 0x0A	; 10
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <move_terminal_cursor>
    1244:	ca eb       	ldi	r28, 0xBA	; 186
    1246:	d1 e0       	ldi	r29, 0x01	; 1
    1248:	88 81       	ld	r24, Y
    124a:	28 2f       	mov	r18, r24
    124c:	08 2e       	mov	r0, r24
    124e:	00 0c       	add	r0, r0
    1250:	33 0b       	sbc	r19, r19
    1252:	3f 93       	push	r19
    1254:	8f 93       	push	r24
    1256:	89 eb       	ldi	r24, 0xB9	; 185
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9f 93       	push	r25
    125c:	8f 93       	push	r24
    125e:	0e 94 0e 14 	call	0x281c	; 0x281c <printf_P>
    1262:	6c e0       	ldi	r22, 0x0C	; 12
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	8a e0       	ldi	r24, 0x0A	; 10
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <move_terminal_cursor>
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	08 2e       	mov	r0, r24
    1274:	00 0c       	add	r0, r0
    1276:	33 0b       	sbc	r19, r19
    1278:	3f 93       	push	r19
    127a:	8f 93       	push	r24
    127c:	86 ea       	ldi	r24, 0xA6	; 166
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	9f 93       	push	r25
    1282:	8f 93       	push	r24
    1284:	0e 94 0e 14 	call	0x281c	; 0x281c <printf_P>
    1288:	8d b7       	in	r24, 0x3d	; 61
    128a:	9e b7       	in	r25, 0x3e	; 62
    128c:	08 96       	adiw	r24, 0x08	; 8
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	9e bf       	out	0x3e, r25	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	8d bf       	out	0x3d, r24	; 61
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <get_player_score>:
    129e:	e8 2f       	mov	r30, r24
    12a0:	88 0f       	add	r24, r24
    12a2:	ff 0b       	sbc	r31, r31
    12a4:	e6 54       	subi	r30, 0x46	; 70
    12a6:	fe 4f       	sbci	r31, 0xFE	; 254
    12a8:	80 81       	ld	r24, Z
    12aa:	08 95       	ret

000012ac <draw_player_score>:
    12ac:	cf 93       	push	r28
    12ae:	c8 2f       	mov	r28, r24
    12b0:	0e 94 4f 09 	call	0x129e	; 0x129e <get_player_score>
    12b4:	ec 2f       	mov	r30, r28
    12b6:	cc 0f       	add	r28, r28
    12b8:	ff 0b       	sbc	r31, r31
    12ba:	e9 5a       	subi	r30, 0xA9	; 169
    12bc:	fe 4f       	sbci	r31, 0xFE	; 254
    12be:	48 2f       	mov	r20, r24
    12c0:	66 e0       	ldi	r22, 0x06	; 6
    12c2:	80 81       	ld	r24, Z
    12c4:	0e 94 ba 06 	call	0xd74	; 0xd74 <draw_3x3_number>
    12c8:	cf 91       	pop	r28
    12ca:	08 95       	ret

000012cc <clear_player_score>:
    12cc:	e8 2f       	mov	r30, r24
    12ce:	88 0f       	add	r24, r24
    12d0:	ff 0b       	sbc	r31, r31
    12d2:	e9 5a       	subi	r30, 0xA9	; 169
    12d4:	fe 4f       	sbci	r31, 0xFE	; 254
    12d6:	66 e0       	ldi	r22, 0x06	; 6
    12d8:	80 81       	ld	r24, Z
    12da:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <clear_3x3_grid>
    12de:	08 95       	ret

000012e0 <is_game_over>:
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <resume_time>
    12e8:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <resume_time+0x1>
    12ec:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <resume_time+0x2>
    12f0:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <resume_time+0x3>
    12f4:	89 2b       	or	r24, r25
    12f6:	8a 2b       	or	r24, r26
    12f8:	8b 2b       	or	r24, r27
    12fa:	09 f1       	breq	.+66     	; 0x133e <is_game_over+0x5e>
    12fc:	0e 94 2c 11 	call	0x2258	; 0x2258 <get_current_time>
    1300:	00 91 b4 01 	lds	r16, 0x01B4	; 0x8001b4 <resume_time>
    1304:	10 91 b5 01 	lds	r17, 0x01B5	; 0x8001b5 <resume_time+0x1>
    1308:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <resume_time+0x2>
    130c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <resume_time+0x3>
    1310:	60 17       	cp	r22, r16
    1312:	71 07       	cpc	r23, r17
    1314:	82 07       	cpc	r24, r18
    1316:	93 07       	cpc	r25, r19
    1318:	90 f0       	brcs	.+36     	; 0x133e <is_game_over+0x5e>
    131a:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <resume_time>
    131e:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <resume_time+0x1>
    1322:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <resume_time+0x2>
    1326:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <resume_time+0x3>
    132a:	0e 94 02 09 	call	0x1204	; 0x1204 <reset_ball>
    132e:	0e 94 16 08 	call	0x102c	; 0x102c <toggle_pause>
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	0e 94 66 09 	call	0x12cc	; 0x12cc <clear_player_score>
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	0e 94 66 09 	call	0x12cc	; 0x12cc <clear_player_score>
    133e:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <player_score>
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	31 f0       	breq	.+12     	; 0x1352 <is_game_over+0x72>
    1346:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <player_score+0x1>
    134a:	83 30       	cpi	r24, 0x03	; 3
    134c:	21 f4       	brne	.+8      	; 0x1356 <is_game_over+0x76>
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <is_game_over+0x78>
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	01 c0       	rjmp	.+2      	; 0x1358 <is_game_over+0x78>
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	08 95       	ret

0000135e <reset_rally_counter>:
	reset_rally_counter(PLAYER_1);
	reset_rally_counter(PLAYER_2);
}

void reset_rally_counter(int8_t player){
	player_rally[player] = -1;
    135e:	08 2e       	mov	r0, r24
    1360:	00 0c       	add	r0, r0
    1362:	99 0b       	sbc	r25, r25
    1364:	fc 01       	movw	r30, r24
    1366:	ec 5f       	subi	r30, 0xFC	; 252
    1368:	fe 4f       	sbci	r31, 0xFE	; 254
    136a:	2f ef       	ldi	r18, 0xFF	; 255
    136c:	20 83       	st	Z, r18
	clear_rally_col(rally_start_x[player]);
    136e:	fc 01       	movw	r30, r24
    1370:	eb 5a       	subi	r30, 0xAB	; 171
    1372:	fe 4f       	sbci	r31, 0xFE	; 254
    1374:	80 81       	ld	r24, Z
    1376:	0e 94 4a 07 	call	0xe94	; 0xe94 <clear_rally_col>
    137a:	08 95       	ret

0000137c <reset_rally_counters>:
void clear_player_score(int8_t player){
	clear_3x3_grid(score_start_x[player], SCORE_START_Y);
}

void reset_rally_counters(void){
	reset_rally_counter(PLAYER_1);
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	0e 94 af 09 	call	0x135e	; 0x135e <reset_rally_counter>
	reset_rally_counter(PLAYER_2);
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	0e 94 af 09 	call	0x135e	; 0x135e <reset_rally_counter>
    1388:	08 95       	ret

0000138a <initialise_game>:
void draw_guide_paddle(void);

// Initialise the player paddles, ball and display to start a game of PONG.
void initialise_game(void) {
	// initialise the display we are using.
	initialise_display();
    138a:	0e 94 a0 05 	call	0xb40	; 0xb40 <initialise_display>

	// Start players in the middle of the board
	player_y_coordinates[PLAYER_1] = BOARD_HEIGHT / 2 - 1;
    138e:	ec eb       	ldi	r30, 0xBC	; 188
    1390:	f1 e0       	ldi	r31, 0x01	; 1
    1392:	83 e0       	ldi	r24, 0x03	; 3
    1394:	80 83       	st	Z, r24
	player_y_coordinates[PLAYER_2] = BOARD_HEIGHT / 2 - 1;
    1396:	81 83       	std	Z+1, r24	; 0x01

	player_score[PLAYER_1] = 0;
    1398:	ea eb       	ldi	r30, 0xBA	; 186
    139a:	f1 e0       	ldi	r31, 0x01	; 1
    139c:	10 82       	st	Z, r1
	player_score[PLAYER_2] = 0;
    139e:	11 82       	std	Z+1, r1	; 0x01
	
	display_players_score();
    13a0:	0e 94 1a 09 	call	0x1234	; 0x1234 <display_players_score>
	ssd_display_score();
    13a4:	0e 94 99 10 	call	0x2132	; 0x2132 <ssd_display_score>

	draw_player_paddle(PLAYER_1);
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	0e 94 bd 07 	call	0xf7a	; 0xf7a <draw_player_paddle>
	draw_player_paddle(PLAYER_2);
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	0e 94 bd 07 	call	0xf7a	; 0xf7a <draw_player_paddle>
	
	clear_player_score(PLAYER_1);
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	0e 94 66 09 	call	0x12cc	; 0x12cc <clear_player_score>
	clear_player_score(PLAYER_2);
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	0e 94 66 09 	call	0x12cc	; 0x12cc <clear_player_score>
	
	reset_rally_counters();
    13c0:	0e 94 be 09 	call	0x137c	; 0x137c <reset_rally_counters>
	// Set Random Seed
	srand(get_current_time());
    13c4:	0e 94 2c 11 	call	0x2258	; 0x2258 <get_current_time>
    13c8:	cb 01       	movw	r24, r22
    13ca:	0e 94 bd 13 	call	0x277a	; 0x277a <srand>
	
	reset_ball();
    13ce:	0e 94 02 09 	call	0x1204	; 0x1204 <reset_ball>
	
	// Draw new ball
	update_square_colour(ball_x, ball_y, BALL);
    13d2:	42 e0       	ldi	r20, 0x02	; 2
    13d4:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <ball_y>
    13d8:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <ball_x>
    13dc:	0e 94 a9 06 	call	0xd52	; 0xd52 <update_square_colour>
	
	// Set Pin D3 to be an output
	DDRD |= (1<<DDD3);
    13e0:	8a b1       	in	r24, 0x0a	; 10
    13e2:	88 60       	ori	r24, 0x08	; 8
    13e4:	8a b9       	out	0x0a, r24	; 10
    13e6:	08 95       	ret

000013e8 <add_point>:
	move_terminal_cursor(10,12);
	printf_P(PSTR("Player 2 Score: %d"), player_score[PLAYER_2]);
}

void add_point(int8_t player){
	if(gained_point) return;
    13e8:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <gained_point>
    13ec:	91 11       	cpse	r25, r1
    13ee:	2c c0       	rjmp	.+88     	; 0x1448 <add_point+0x60>
    13f0:	e8 2f       	mov	r30, r24
	player_score[player] += 1;
    13f2:	0e 2e       	mov	r0, r30
    13f4:	00 0c       	add	r0, r0
    13f6:	ff 0b       	sbc	r31, r31
    13f8:	e6 54       	subi	r30, 0x46	; 70
    13fa:	fe 4f       	sbci	r31, 0xFE	; 254
    13fc:	80 81       	ld	r24, Z
    13fe:	8f 5f       	subi	r24, 0xFF	; 255
    1400:	80 83       	st	Z, r24
	
	gained_point = 1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <gained_point>
	
	reset_rally_counters();
    1408:	0e 94 be 09 	call	0x137c	; 0x137c <reset_rally_counters>
	
	display_players_score();
    140c:	0e 94 1a 09 	call	0x1234	; 0x1234 <display_players_score>
	draw_player_score(PLAYER_1);
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	0e 94 56 09 	call	0x12ac	; 0x12ac <draw_player_score>
	draw_player_score(PLAYER_2);
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	0e 94 56 09 	call	0x12ac	; 0x12ac <draw_player_score>
	if(!is_game_over()){
    141c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <is_game_over>
    1420:	81 11       	cpse	r24, r1
    1422:	12 c0       	rjmp	.+36     	; 0x1448 <add_point+0x60>
		toggle_pause();
    1424:	0e 94 16 08 	call	0x102c	; 0x102c <toggle_pause>
		// Wait 1500ms before resuming
		uint32_t current_time = get_current_time();
    1428:	0e 94 2c 11 	call	0x2258	; 0x2258 <get_current_time>
		resume_time = current_time + 1500;
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	84 52       	subi	r24, 0x24	; 36
    1432:	9a 4f       	sbci	r25, 0xFA	; 250
    1434:	af 4f       	sbci	r26, 0xFF	; 255
    1436:	bf 4f       	sbci	r27, 0xFF	; 255
    1438:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <resume_time>
    143c:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <resume_time+0x1>
    1440:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <resume_time+0x2>
    1444:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <resume_time+0x3>
    1448:	08 95       	ret

0000144a <increment_rally_counter>:
	player_rally[player] = -1;
	clear_rally_col(rally_start_x[player]);
}

void increment_rally_counter(int8_t player) {
	player_rally[player] += 1;
    144a:	08 2e       	mov	r0, r24
    144c:	00 0c       	add	r0, r0
    144e:	99 0b       	sbc	r25, r25
    1450:	fc 01       	movw	r30, r24
    1452:	ec 5f       	subi	r30, 0xFC	; 252
    1454:	fe 4f       	sbci	r31, 0xFE	; 254
    1456:	60 81       	ld	r22, Z
    1458:	6f 5f       	subi	r22, 0xFF	; 255
    145a:	60 83       	st	Z, r22
	// Fast Modulus 8
	uint8_t num = (player_rally[player] & ( 8 - 1)) + 1;
    145c:	67 70       	andi	r22, 0x07	; 7
    145e:	6f 5f       	subi	r22, 0xFF	; 255
	draw_rally_count(rally_start_x[player], num);
    1460:	fc 01       	movw	r30, r24
    1462:	eb 5a       	subi	r30, 0xAB	; 171
    1464:	fe 4f       	sbci	r31, 0xFE	; 254
    1466:	80 81       	ld	r24, Z
    1468:	0e 94 1e 07 	call	0xe3c	; 0xe3c <draw_rally_count>
    146c:	08 95       	ret

0000146e <check_ball_collision_with_players>:
		ball_y_direction *= -1;
		*new_ball_y = ball_y + ball_y_direction;
	}
}

uint8_t check_ball_collision_with_players(int8_t new_ball_x, int8_t new_ball_y){
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	c8 2f       	mov	r28, r24
    1474:	d6 2f       	mov	r29, r22
	if(check_ball_collision_with_player(PLAYER_1, new_ball_x, new_ball_y)){
    1476:	46 2f       	mov	r20, r22
    1478:	68 2f       	mov	r22, r24
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	0e 94 cd 08 	call	0x119a	; 0x119a <check_ball_collision_with_player>
    1480:	88 23       	and	r24, r24
    1482:	29 f0       	breq	.+10     	; 0x148e <check_ball_collision_with_players+0x20>
		increment_rally_counter(PLAYER_1);
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	0e 94 25 0a 	call	0x144a	; 0x144a <increment_rally_counter>
		return 1;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	0b c0       	rjmp	.+22     	; 0x14a4 <check_ball_collision_with_players+0x36>
	}else if (check_ball_collision_with_player(PLAYER_2, new_ball_x, new_ball_y)){
    148e:	4d 2f       	mov	r20, r29
    1490:	6c 2f       	mov	r22, r28
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	0e 94 cd 08 	call	0x119a	; 0x119a <check_ball_collision_with_player>
    1498:	88 23       	and	r24, r24
    149a:	21 f0       	breq	.+8      	; 0x14a4 <check_ball_collision_with_players+0x36>
		increment_rally_counter(PLAYER_2);
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	0e 94 25 0a 	call	0x144a	; 0x144a <increment_rally_counter>
		return 1;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	08 95       	ret

000014aa <check_ball_collision>:
	if((move & PLAYER_1_UP) && !(move & PLAYER_1_DOWN)){
		move_player_paddle(PLAYER_1, UP);
	}
}

uint8_t check_ball_collision(int8_t *new_ball_x, int8_t *new_ball_y) {
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	ec 01       	movw	r28, r24
    14b4:	8b 01       	movw	r16, r22
	
	check_vertical_ball_collision(new_ball_x, new_ball_y);
    14b6:	0e 94 3e 08 	call	0x107c	; 0x107c <check_vertical_ball_collision>

	if(check_ball_collision_with_players(*new_ball_x, *new_ball_y)){
    14ba:	f8 01       	movw	r30, r16
    14bc:	60 81       	ld	r22, Z
    14be:	88 81       	ld	r24, Y
    14c0:	0e 94 37 0a 	call	0x146e	; 0x146e <check_ball_collision_with_players>
    14c4:	88 23       	and	r24, r24
    14c6:	f1 f0       	breq	.+60     	; 0x1504 <check_ball_collision+0x5a>
		ball_y_direction = random_y_direction();
    14c8:	0e 94 fd 08 	call	0x11fa	; 0x11fa <random_y_direction>
    14cc:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ball_y_direction>
		ball_x_direction *= -1;
    14d0:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <ball_x_direction>
    14d4:	81 95       	neg	r24
    14d6:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <ball_x_direction>
		*new_ball_x = ball_x + ball_x_direction;
    14da:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <ball_x>
    14de:	89 0f       	add	r24, r25
    14e0:	88 83       	st	Y, r24
		*new_ball_y = ball_y + ball_y_direction;
    14e2:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <ball_y>
    14e6:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <ball_y_direction>
    14ea:	89 0f       	add	r24, r25
    14ec:	f8 01       	movw	r30, r16
    14ee:	80 83       	st	Z, r24
		
		Tone(NOTE_C7, 100);
    14f0:	64 e6       	ldi	r22, 0x64	; 100
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	8d e2       	ldi	r24, 0x2D	; 45
    14f6:	98 e0       	ldi	r25, 0x08	; 8
    14f8:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <Tone>
		
		// Ensure we don't go off the board
		check_vertical_ball_collision(new_ball_x, new_ball_y);
    14fc:	b8 01       	movw	r22, r16
    14fe:	ce 01       	movw	r24, r28
    1500:	0e 94 3e 08 	call	0x107c	; 0x107c <check_vertical_ball_collision>
	}
	
	if(*new_ball_x > (BOARD_WIDTH - GAME_BORDER_WIDTH)){
    1504:	88 81       	ld	r24, Y
    1506:	8c 30       	cpi	r24, 0x0C	; 12
    1508:	2c f0       	brlt	.+10     	; 0x1514 <check_ball_collision+0x6a>
		add_point(PLAYER_1);
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <add_point>
		//reset_ball();
		return 1;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	08 c0       	rjmp	.+16     	; 0x1524 <check_ball_collision+0x7a>
	}
	
	if(*new_ball_x < 0){
    1514:	88 23       	and	r24, r24
    1516:	2c f4       	brge	.+10     	; 0x1522 <check_ball_collision+0x78>
		add_point(PLAYER_2);
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <add_point>
		//reset_ball();
		return 1;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <check_ball_collision+0x7a>
	}
	
	return 0;
    1522:	80 e0       	ldi	r24, 0x00	; 0
}
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	08 95       	ret

0000152e <update_ball_position>:
	
	draw_player_paddle(player); 
}

// Update ball position based on current x direction and y direction of ball
void update_ball_position(void) {
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	00 d0       	rcall	.+0      	; 0x1534 <update_ball_position+0x6>
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
	

	// Determine new ball coordinates
	int8_t new_ball_x = ball_x + ball_x_direction;
    1538:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <ball_x>
    153c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <ball_x_direction>
    1540:	89 0f       	add	r24, r25
    1542:	89 83       	std	Y+1, r24	; 0x01
	int8_t new_ball_y = ball_y + ball_y_direction;
    1544:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <ball_y>
    1548:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <ball_y_direction>
    154c:	89 0f       	add	r24, r25
    154e:	8a 83       	std	Y+2, r24	; 0x02
	
	if(check_ball_collision(&new_ball_x, &new_ball_y)){
    1550:	be 01       	movw	r22, r28
    1552:	6e 5f       	subi	r22, 0xFE	; 254
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	ce 01       	movw	r24, r28
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <check_ball_collision>
    155e:	81 11       	cpse	r24, r1
    1560:	10 c0       	rjmp	.+32     	; 0x1582 <update_ball_position+0x54>
		return;
	}
	
	// Erase old ball
	update_square_colour(ball_x, ball_y, EMPTY_SQUARE);
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <ball_y>
    1568:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <ball_x>
    156c:	0e 94 a9 06 	call	0xd52	; 0xd52 <update_square_colour>
	
	// Assign new ball coordinates
	ball_x = new_ball_x;
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <ball_x>
	ball_y = new_ball_y;
    1576:	6a 81       	ldd	r22, Y+2	; 0x02
    1578:	60 93 d5 01 	sts	0x01D5, r22	; 0x8001d5 <ball_y>
	
	// Draw new ball
	update_square_colour(ball_x, ball_y, BALL);
    157c:	42 e0       	ldi	r20, 0x02	; 2
    157e:	0e 94 a9 06 	call	0xd52	; 0xd52 <update_square_colour>
}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <get_game_speed>:

static uint8_t game_speed = SLOW_GAME_SPEED; // Current Game Speed
static const uint32_t game_speeds[] = {500, 300, 200}; // Possible Game Speeds

uint32_t get_game_speed(void){
	return game_speeds[game_speed];
    158c:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <game_speed>
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	ee 0f       	add	r30, r30
    1594:	ff 1f       	adc	r31, r31
    1596:	ee 0f       	add	r30, r30
    1598:	ff 1f       	adc	r31, r31
    159a:	e7 5b       	subi	r30, 0xB7	; 183
    159c:	fe 4f       	sbci	r31, 0xFE	; 254
    159e:	60 81       	ld	r22, Z
    15a0:	71 81       	ldd	r23, Z+1	; 0x01
    15a2:	82 81       	ldd	r24, Z+2	; 0x02
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
}
    15a6:	08 95       	ret

000015a8 <set_game_speed>:

void set_game_speed(uint8_t speed){
	game_speed = speed;
    15a8:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <game_speed>
    15ac:	08 95       	ret

000015ae <get_ball_data>:
}

void get_ball_data(struct ball_data* bd){
    15ae:	fc 01       	movw	r30, r24
	bd->ball_x = ball_x;
    15b0:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <ball_x>
    15b4:	80 83       	st	Z, r24
	bd->ball_y = ball_y;
    15b6:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <ball_y>
    15ba:	81 83       	std	Z+1, r24	; 0x01
	bd->ball_x_direction = ball_x_direction;
    15bc:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <ball_x_direction>
    15c0:	82 83       	std	Z+2, r24	; 0x02
	bd->ball_y_direction = ball_y_direction;
    15c2:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <ball_y_direction>
    15c6:	83 83       	std	Z+3, r24	; 0x03
    15c8:	08 95       	ret

000015ca <get_player_y>:
}

int8_t get_player_y(int8_t player){
	return player_y_coordinates[player];
    15ca:	e8 2f       	mov	r30, r24
    15cc:	88 0f       	add	r24, r24
    15ce:	ff 0b       	sbc	r31, r31
    15d0:	e4 54       	subi	r30, 0x44	; 68
    15d2:	fe 4f       	sbci	r31, 0xFE	; 254
}
    15d4:	80 81       	ld	r24, Z
    15d6:	08 95       	ret

000015d8 <get_player_x>:

int8_t get_player_x(int8_t player){
	return PLAYER_X_COORDINATES[player];
    15d8:	e8 2f       	mov	r30, r24
    15da:	88 0f       	add	r24, r24
    15dc:	ff 0b       	sbc	r31, r31
    15de:	e7 5a       	subi	r30, 0xA7	; 167
    15e0:	fe 4f       	sbci	r31, 0xFE	; 254
}
    15e2:	80 81       	ld	r24, Z
    15e4:	08 95       	ret

000015e6 <get_guide_y>:

int8_t get_guide_y(){
	return guide_y_coordinate;
    15e6:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <guide_y_coordinate>
    15ea:	08 95       	ret

000015ec <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    15ec:	80 e8       	ldi	r24, 0x80	; 128
    15ee:	0e 94 52 10 	call	0x20a4	; 0x20a4 <spi_setup_master>
    15f2:	08 95       	ret

000015f4 <ledmatrix_update_pixel>:
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	80 31       	cpi	r24, 0x10	; 16
    15fc:	b0 f4       	brcc	.+44     	; 0x162a <ledmatrix_update_pixel+0x36>
    15fe:	68 30       	cpi	r22, 0x08	; 8
    1600:	a0 f4       	brcc	.+40     	; 0x162a <ledmatrix_update_pixel+0x36>
    1602:	14 2f       	mov	r17, r20
    1604:	c6 2f       	mov	r28, r22
    1606:	d8 2f       	mov	r29, r24
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <spi_send_byte>
    160e:	6c 2f       	mov	r22, r28
    1610:	67 70       	andi	r22, 0x07	; 7
    1612:	80 e1       	ldi	r24, 0x10	; 16
    1614:	68 9f       	mul	r22, r24
    1616:	90 01       	movw	r18, r0
    1618:	11 24       	eor	r1, r1
    161a:	8d 2f       	mov	r24, r29
    161c:	8f 70       	andi	r24, 0x0F	; 15
    161e:	82 2b       	or	r24, r18
    1620:	0e 94 7e 10 	call	0x20fc	; 0x20fc <spi_send_byte>
    1624:	81 2f       	mov	r24, r17
    1626:	0e 94 7e 10 	call	0x20fc	; 0x20fc <spi_send_byte>
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	08 95       	ret

00001632 <ledmatrix_update_column>:
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	80 31       	cpi	r24, 0x10	; 16
    163a:	a0 f4       	brcc	.+40     	; 0x1664 <ledmatrix_update_column+0x32>
    163c:	8b 01       	movw	r16, r22
    163e:	c8 2f       	mov	r28, r24
    1640:	83 e0       	ldi	r24, 0x03	; 3
    1642:	0e 94 7e 10 	call	0x20fc	; 0x20fc <spi_send_byte>
    1646:	8c 2f       	mov	r24, r28
    1648:	8f 70       	andi	r24, 0x0F	; 15
    164a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <spi_send_byte>
    164e:	c0 e0       	ldi	r28, 0x00	; 0
    1650:	07 c0       	rjmp	.+14     	; 0x1660 <ledmatrix_update_column+0x2e>
    1652:	f8 01       	movw	r30, r16
    1654:	ec 0f       	add	r30, r28
    1656:	f1 1d       	adc	r31, r1
    1658:	80 81       	ld	r24, Z
    165a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <spi_send_byte>
    165e:	cf 5f       	subi	r28, 0xFF	; 255
    1660:	c8 30       	cpi	r28, 0x08	; 8
    1662:	b8 f3       	brcs	.-18     	; 0x1652 <ledmatrix_update_column+0x20>
    1664:	cf 91       	pop	r28
    1666:	1f 91       	pop	r17
    1668:	0f 91       	pop	r16
    166a:	08 95       	ret

0000166c <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    166c:	8f e0       	ldi	r24, 0x0F	; 15
    166e:	0e 94 7e 10 	call	0x20fc	; 0x20fc <spi_send_byte>
    1672:	08 95       	ret

00001674 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
    1674:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <ledmatrix_setup>
	init_button_interrupts();
    1678:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <init_button_interrupts>
	init_adc_interrupts();
    167c:	0e 94 cb 01 	call	0x396	; 0x396 <init_adc_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	7b e4       	ldi	r23, 0x4B	; 75
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <init_serial_stdio>
	
	init_timer0();
    168e:	0e 94 16 11 	call	0x222c	; 0x222c <init_timer0>
	
	// Seed random values
	srand(time(NULL));
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 b8 01 	call	0x370	; 0x370 <time>
    169a:	cb 01       	movw	r24, r22
    169c:	0e 94 bd 13 	call	0x277a	; 0x277a <srand>
	
	// Setup Seven Segment Display
	setup_ssd();
    16a0:	0e 94 84 10 	call	0x2108	; 0x2108 <setup_ssd>
	
	//Buzzer
	setup_sound_effects();
    16a4:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <setup_sound_effects>
	
	// Turn on global interrupts
	sei();
    16a8:	78 94       	sei
    16aa:	08 95       	ret

000016ac <start_screen>:
}

void start_screen(void) {
    16ac:	8f 92       	push	r8
    16ae:	9f 92       	push	r9
    16b0:	af 92       	push	r10
    16b2:	bf 92       	push	r11
    16b4:	cf 92       	push	r12
    16b6:	df 92       	push	r13
    16b8:	ef 92       	push	r14
    16ba:	ff 92       	push	r15
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
	// Clear terminal screen and output a message
	clear_terminal();
    16c0:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <clear_terminal>
	show_cursor();
    16c4:	0e 94 0d 11 	call	0x221a	; 0x221a <show_cursor>
	move_terminal_cursor(10,10);
    16c8:	6a e0       	ldi	r22, 0x0A	; 10
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	8a e0       	ldi	r24, 0x0A	; 10
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <move_terminal_cursor>
	printf_P(PSTR("PONG"));
    16d4:	81 e5       	ldi	r24, 0x51	; 81
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	9f 93       	push	r25
    16da:	8f 93       	push	r24
    16dc:	0e 94 0e 14 	call	0x281c	; 0x281c <printf_P>
	move_terminal_cursor(10,12);
    16e0:	6c e0       	ldi	r22, 0x0C	; 12
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	8a e0       	ldi	r24, 0x0A	; 10
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <move_terminal_cursor>
	printf_P(PSTR("CSSE2010 A2 by Alex Donnellan - 46963037"));
    16ec:	88 e2       	ldi	r24, 0x28	; 40
    16ee:	91 e0       	ldi	r25, 0x01	; 1
    16f0:	9f 93       	push	r25
    16f2:	8f 93       	push	r24
    16f4:	0e 94 0e 14 	call	0x281c	; 0x281c <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
    16f8:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <show_start_screen>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
    16fc:	0e 94 2c 11 	call	0x2258	; 0x2258 <get_current_time>
    1700:	4b 01       	movw	r8, r22
    1702:	5c 01       	movw	r10, r24
	
	uint8_t frame_number = 0;
	
	Tunes_Play_Mario();
    1704:	0e 94 67 0f 	call	0x1ece	; 0x1ece <Tunes_Play_Mario>
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
	show_start_screen();

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
	
	uint8_t frame_number = 0;
    1710:	d0 e0       	ldi	r29, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		// If the serial input is 's', then exit the start screen
		char serial_input = get_serial_input();
    1712:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <get_serial_input>
		char lower_input = (char)tolower(serial_input);
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0e 94 c8 13 	call	0x2790	; 0x2790 <tolower>
		if (lower_input == 's') {
    171c:	83 37       	cpi	r24, 0x73	; 115
    171e:	99 f1       	breq	.+102    	; 0x1786 <start_screen+0xda>
			break;
		}
		if(lower_input == 'm'){
    1720:	8d 36       	cpi	r24, 0x6D	; 109
    1722:	11 f4       	brne	.+4      	; 0x1728 <start_screen+0x7c>
			toggle_mute();
    1724:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <toggle_mute>
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
    1728:	0e 94 0c 03 	call	0x618	; 0x618 <button_pushed>
    172c:	c8 2f       	mov	r28, r24
		btn |= adc_move();
    172e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <adc_move>
    1732:	8c 2b       	or	r24, r28
		if (btn != NO_BUTTON_PUSHED) {
    1734:	41 f5       	brne	.+80     	; 0x1786 <start_screen+0xda>
			break;
		}

		current_time = get_current_time();
    1736:	0e 94 2c 11 	call	0x2258	; 0x2258 <get_current_time>
    173a:	6b 01       	movw	r12, r22
    173c:	7c 01       	movw	r14, r24
		if (current_time - last_screen_update > 500) {
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	88 19       	sub	r24, r8
    1744:	99 09       	sbc	r25, r9
    1746:	aa 09       	sbc	r26, r10
    1748:	bb 09       	sbc	r27, r11
    174a:	85 3f       	cpi	r24, 0xF5	; 245
    174c:	91 40       	sbci	r25, 0x01	; 1
    174e:	a1 05       	cpc	r26, r1
    1750:	b1 05       	cpc	r27, r1
    1752:	68 f0       	brcs	.+26     	; 0x176e <start_screen+0xc2>
			update_start_screen(frame_number);
    1754:	8d 2f       	mov	r24, r29
    1756:	0e 94 2d 06 	call	0xc5a	; 0xc5a <update_start_screen>
			frame_number = (frame_number + 1) % 12;
    175a:	8d 2f       	mov	r24, r29
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	6c e0       	ldi	r22, 0x0C	; 12
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	0e 94 11 13 	call	0x2622	; 0x2622 <__divmodhi4>
    1768:	d8 2f       	mov	r29, r24
			last_screen_update = current_time;
    176a:	46 01       	movw	r8, r12
    176c:	57 01       	movw	r10, r14
		}
		if(Tunes_IsPlaying()) Tunes_Think();
    176e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <Tunes_IsPlaying>
    1772:	81 11       	cpse	r24, r1
    1774:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Tunes_Think>
		if(!Tunes_IsPlaying()) Tunes_Play_Mario();
    1778:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <Tunes_IsPlaying>
    177c:	81 11       	cpse	r24, r1
    177e:	c9 cf       	rjmp	.-110    	; 0x1712 <start_screen+0x66>
    1780:	0e 94 67 0f 	call	0x1ece	; 0x1ece <Tunes_Play_Mario>
    1784:	c6 cf       	rjmp	.-116    	; 0x1712 <start_screen+0x66>
	}
	
	Tunes_Stop();
    1786:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <Tunes_Stop>
}
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	ff 90       	pop	r15
    1790:	ef 90       	pop	r14
    1792:	df 90       	pop	r13
    1794:	cf 90       	pop	r12
    1796:	bf 90       	pop	r11
    1798:	af 90       	pop	r10
    179a:	9f 90       	pop	r9
    179c:	8f 90       	pop	r8
    179e:	08 95       	ret

000017a0 <handle_game_over>:
	
	Tunes_Stop();
}

void handle_game_over() {
	move_terminal_cursor(10,14);
    17a0:	6e e0       	ldi	r22, 0x0E	; 14
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	8a e0       	ldi	r24, 0x0A	; 10
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    17ac:	8e e1       	ldi	r24, 0x1E	; 30
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	9f 93       	push	r25
    17b2:	8f 93       	push	r24
    17b4:	0e 94 0e 14 	call	0x281c	; 0x281c <printf_P>
	move_terminal_cursor(10,15);
    17b8:	6f e0       	ldi	r22, 0x0F	; 15
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	8a e0       	ldi	r24, 0x0A	; 10
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
    17c4:	80 ef       	ldi	r24, 0xF0	; 240
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	9f 93       	push	r25
    17ca:	8f 93       	push	r24
    17cc:	0e 94 0e 14 	call	0x281c	; 0x281c <printf_P>
	
	Tunes_Play_star();
    17d0:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Tunes_Play_star>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED && !start_input_pressed()) {
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0e c0       	rjmp	.+28     	; 0x17fa <handle_game_over+0x5a>
		char serial_input = get_serial_input();
    17de:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <get_serial_input>
		if((char)tolower(serial_input) == 'm') toggle_mute();
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 94 c8 13 	call	0x2790	; 0x2790 <tolower>
    17e8:	8d 36       	cpi	r24, 0x6D	; 109
    17ea:	11 f4       	brne	.+4      	; 0x17f0 <handle_game_over+0x50>
    17ec:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <toggle_mute>
		if(Tunes_IsPlaying()) Tunes_Think(); // wait
    17f0:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <Tunes_IsPlaying>
    17f4:	81 11       	cpse	r24, r1
    17f6:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Tunes_Think>
	
	Tunes_Play_star();
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED && !start_input_pressed()) {
    17fa:	0e 94 0c 03 	call	0x618	; 0x618 <button_pushed>
    17fe:	81 11       	cpse	r24, r1
    1800:	04 c0       	rjmp	.+8      	; 0x180a <handle_game_over+0x6a>
    1802:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <start_input_pressed>
    1806:	88 23       	and	r24, r24
    1808:	51 f3       	breq	.-44     	; 0x17de <handle_game_over+0x3e>
		char serial_input = get_serial_input();
		if((char)tolower(serial_input) == 'm') toggle_mute();
		if(Tunes_IsPlaying()) Tunes_Think(); // wait
	}
	
	Tunes_Stop();
    180a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <Tunes_Stop>
    180e:	08 95       	ret

00001810 <draw_game_speed>:
}

void draw_game_speed(int8_t speed) {
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	00 d0       	rcall	.+0      	; 0x1816 <draw_game_speed+0x6>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <draw_game_speed+0x8>
    1818:	1f 92       	push	r1
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
	char game_speed[] = "Slow";
    181e:	95 e0       	ldi	r25, 0x05	; 5
    1820:	e2 e6       	ldi	r30, 0x62	; 98
    1822:	f1 e0       	ldi	r31, 0x01	; 1
    1824:	de 01       	movw	r26, r28
    1826:	11 96       	adiw	r26, 0x01	; 1
    1828:	01 90       	ld	r0, Z+
    182a:	0d 92       	st	X+, r0
    182c:	9a 95       	dec	r25
    182e:	e1 f7       	brne	.-8      	; 0x1828 <draw_game_speed+0x18>
	
	switch(speed){
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	61 f0       	breq	.+24     	; 0x184c <draw_game_speed+0x3c>
    1834:	82 30       	cpi	r24, 0x02	; 2
    1836:	99 f4       	brne	.+38     	; 0x185e <draw_game_speed+0x4e>
		case FAST_GAME_SPEED:
			strcpy(game_speed, "Fast");
    1838:	85 e0       	ldi	r24, 0x05	; 5
    183a:	e7 e6       	ldi	r30, 0x67	; 103
    183c:	f1 e0       	ldi	r31, 0x01	; 1
    183e:	de 01       	movw	r26, r28
    1840:	11 96       	adiw	r26, 0x01	; 1
    1842:	01 90       	ld	r0, Z+
    1844:	0d 92       	st	X+, r0
    1846:	8a 95       	dec	r24
    1848:	e1 f7       	brne	.-8      	; 0x1842 <draw_game_speed+0x32>
			break;
    184a:	09 c0       	rjmp	.+18     	; 0x185e <draw_game_speed+0x4e>
		case MEDIUM_GAME_SPEED:
			strcpy(game_speed, "Medium");
    184c:	87 e0       	ldi	r24, 0x07	; 7
    184e:	eb e5       	ldi	r30, 0x5B	; 91
    1850:	f1 e0       	ldi	r31, 0x01	; 1
    1852:	de 01       	movw	r26, r28
    1854:	11 96       	adiw	r26, 0x01	; 1
    1856:	01 90       	ld	r0, Z+
    1858:	0d 92       	st	X+, r0
    185a:	8a 95       	dec	r24
    185c:	e1 f7       	brne	.-8      	; 0x1856 <draw_game_speed+0x46>
			break;
		default:
			break;
	}
	
	move_terminal_cursor(10,5);
    185e:	65 e0       	ldi	r22, 0x05	; 5
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	8a e0       	ldi	r24, 0x0A	; 10
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <move_terminal_cursor>
	// Clear the line so we don't get mashed words
	clear_to_end_of_line();
    186a:	0e 94 04 11 	call	0x2208	; 0x2208 <clear_to_end_of_line>
	printf_P(PSTR("Current Ball Speed: %s"), game_speed);
    186e:	ce 01       	movw	r24, r28
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	9f 93       	push	r25
    1874:	8f 93       	push	r24
    1876:	89 ed       	ldi	r24, 0xD9	; 217
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	9f 93       	push	r25
    187c:	8f 93       	push	r24
    187e:	0e 94 0e 14 	call	0x281c	; 0x281c <printf_P>
}
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	08 95       	ret

0000189a <new_game>:
	Tunes_Stop();
}

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    189a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <clear_terminal>
	
	// Initialise the game and display
	initialise_game();
    189e:	0e 94 c5 09 	call	0x138a	; 0x138a <initialise_game>
	
	draw_game_speed(get_game_speed());
    18a2:	0e 94 c6 0a 	call	0x158c	; 0x158c <get_game_speed>
    18a6:	86 2f       	mov	r24, r22
    18a8:	0e 94 08 0c 	call	0x1810	; 0x1810 <draw_game_speed>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    18ac:	0e 94 0c 03 	call	0x618	; 0x618 <button_pushed>
	clear_serial_input_buffer();
    18b0:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <clear_serial_input_buffer>
	(void)adc_move();
    18b4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <adc_move>
    18b8:	08 95       	ret

000018ba <handle_keyboard_movement>:
			break;
	}
}

void handle_keyboard_movement(int8_t move){
	btn |= move;
    18ba:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <btn>
    18be:	89 2b       	or	r24, r25
    18c0:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <btn>
    18c4:	08 95       	ret

000018c6 <handle_serial_input>:
	// Clear the line so we don't get mashed words
	clear_to_end_of_line();
	printf_P(PSTR("Current Ball Speed: %s"), game_speed);
}

void handle_serial_input(char input){
    18c6:	cf 93       	push	r28
    18c8:	c8 2f       	mov	r28, r24
	
	// Check inputs that can't be lowered first
	switch(input){
    18ca:	82 33       	cpi	r24, 0x32	; 50
    18cc:	59 f0       	breq	.+22     	; 0x18e4 <handle_serial_input+0x1e>
    18ce:	83 33       	cpi	r24, 0x33	; 51
    18d0:	81 f0       	breq	.+32     	; 0x18f2 <handle_serial_input+0x2c>
    18d2:	81 33       	cpi	r24, 0x31	; 49
    18d4:	a1 f4       	brne	.+40     	; 0x18fe <handle_serial_input+0x38>
		case '1':
			set_game_speed(SLOW_GAME_SPEED);
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <set_game_speed>
			draw_game_speed(SLOW_GAME_SPEED);
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	0e 94 08 0c 	call	0x1810	; 0x1810 <draw_game_speed>
			break;
    18e2:	0d c0       	rjmp	.+26     	; 0x18fe <handle_serial_input+0x38>
		case '2':
			set_game_speed(MEDIUM_GAME_SPEED);
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <set_game_speed>
			draw_game_speed(MEDIUM_GAME_SPEED);
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	0e 94 08 0c 	call	0x1810	; 0x1810 <draw_game_speed>
			break;
    18f0:	06 c0       	rjmp	.+12     	; 0x18fe <handle_serial_input+0x38>
		case '3':
			set_game_speed(FAST_GAME_SPEED);
    18f2:	82 e0       	ldi	r24, 0x02	; 2
    18f4:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <set_game_speed>
			draw_game_speed(FAST_GAME_SPEED);
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	0e 94 08 0c 	call	0x1810	; 0x1810 <draw_game_speed>
			break;
		default:
			break;
	}
	
	switch((char)tolower(input)){
    18fe:	8c 2f       	mov	r24, r28
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 c8 13 	call	0x2790	; 0x2790 <tolower>
    1906:	fc 01       	movw	r30, r24
    1908:	ff 27       	eor	r31, r31
    190a:	e3 56       	subi	r30, 0x63	; 99
    190c:	f1 09       	sbc	r31, r1
    190e:	e5 31       	cpi	r30, 0x15	; 21
    1910:	f1 05       	cpc	r31, r1
    1912:	08 f0       	brcs	.+2      	; 0x1916 <handle_serial_input+0x50>
    1914:	5f c0       	rjmp	.+190    	; 0x19d4 <handle_serial_input+0x10e>
    1916:	e2 5c       	subi	r30, 0xC2	; 194
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__tablejump2__>
		case 'k':
			handle_keyboard_movement(INPUT_K_PRESSED);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <handle_keyboard_movement>
			break;
    1924:	57 c0       	rjmp	.+174    	; 0x19d4 <handle_serial_input+0x10e>
		case 'l':
			handle_keyboard_movement(INPUT_L_PRESSED);
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <handle_keyboard_movement>
			break;
    192c:	53 c0       	rjmp	.+166    	; 0x19d4 <handle_serial_input+0x10e>
		case 'o':
			handle_keyboard_movement(INPUT_O_PRESSED);
    192e:	82 e0       	ldi	r24, 0x02	; 2
    1930:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <handle_keyboard_movement>
			break;
    1934:	4f c0       	rjmp	.+158    	; 0x19d4 <handle_serial_input+0x10e>
		case 'd':
			handle_keyboard_movement(INPUT_D_PRESSED);
    1936:	84 e0       	ldi	r24, 0x04	; 4
    1938:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <handle_keyboard_movement>
			break;
    193c:	4b c0       	rjmp	.+150    	; 0x19d4 <handle_serial_input+0x10e>
		case 's':
			handle_keyboard_movement(INPUT_S_PRESSED);
    193e:	84 e0       	ldi	r24, 0x04	; 4
    1940:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <handle_keyboard_movement>
			break;
    1944:	47 c0       	rjmp	.+142    	; 0x19d4 <handle_serial_input+0x10e>
		case 'w':
			handle_keyboard_movement(INPUT_W_PRESSED);
    1946:	88 e0       	ldi	r24, 0x08	; 8
    1948:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <handle_keyboard_movement>
			break;
    194c:	43 c0       	rjmp	.+134    	; 0x19d4 <handle_serial_input+0x10e>
		case 'p':
			if(toggle_pause()){
    194e:	0e 94 16 08 	call	0x102c	; 0x102c <toggle_pause>
    1952:	88 23       	and	r24, r24
    1954:	e9 f0       	breq	.+58     	; 0x1990 <handle_serial_input+0xca>
				remaining_time = next_ball_move_time - current_time;
    1956:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <next_ball_move_time>
    195a:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <next_ball_move_time+0x1>
    195e:	a0 91 df 01 	lds	r26, 0x01DF	; 0x8001df <next_ball_move_time+0x2>
    1962:	b0 91 e0 01 	lds	r27, 0x01E0	; 0x8001e0 <next_ball_move_time+0x3>
    1966:	40 91 be 01 	lds	r20, 0x01BE	; 0x8001be <current_time>
    196a:	50 91 bf 01 	lds	r21, 0x01BF	; 0x8001bf <current_time+0x1>
    196e:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <current_time+0x2>
    1972:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <current_time+0x3>
    1976:	84 1b       	sub	r24, r20
    1978:	95 0b       	sbc	r25, r21
    197a:	a6 0b       	sbc	r26, r22
    197c:	b7 0b       	sbc	r27, r23
    197e:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <remaining_time>
    1982:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <remaining_time+0x1>
    1986:	a0 93 db 01 	sts	0x01DB, r26	; 0x8001db <remaining_time+0x2>
    198a:	b0 93 dc 01 	sts	0x01DC, r27	; 0x8001dc <remaining_time+0x3>
    198e:	22 c0       	rjmp	.+68     	; 0x19d4 <handle_serial_input+0x10e>
			}else{
				next_ball_move_time = current_time + remaining_time;
    1990:	40 91 be 01 	lds	r20, 0x01BE	; 0x8001be <current_time>
    1994:	50 91 bf 01 	lds	r21, 0x01BF	; 0x8001bf <current_time+0x1>
    1998:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <current_time+0x2>
    199c:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <current_time+0x3>
    19a0:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <remaining_time>
    19a4:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <remaining_time+0x1>
    19a8:	a0 91 db 01 	lds	r26, 0x01DB	; 0x8001db <remaining_time+0x2>
    19ac:	b0 91 dc 01 	lds	r27, 0x01DC	; 0x8001dc <remaining_time+0x3>
    19b0:	84 0f       	add	r24, r20
    19b2:	95 1f       	adc	r25, r21
    19b4:	a6 1f       	adc	r26, r22
    19b6:	b7 1f       	adc	r27, r23
    19b8:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <next_ball_move_time>
    19bc:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <next_ball_move_time+0x1>
    19c0:	a0 93 df 01 	sts	0x01DF, r26	; 0x8001df <next_ball_move_time+0x2>
    19c4:	b0 93 e0 01 	sts	0x01E0, r27	; 0x8001e0 <next_ball_move_time+0x3>
    19c8:	05 c0       	rjmp	.+10     	; 0x19d4 <handle_serial_input+0x10e>
			}
			break;
		case 'c':
			toggle_cpu_enabled();
    19ca:	0e 94 48 04 	call	0x890	; 0x890 <toggle_cpu_enabled>
			break;
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <handle_serial_input+0x10e>
		case 'm':
			toggle_mute();
    19d0:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <toggle_mute>
			break;
		default:
			break;
	}
}
    19d4:	cf 91       	pop	r28
    19d6:	08 95       	ret

000019d8 <play_game>:
}

uint32_t remaining_time, next_ball_move_time, current_time = 0;
int8_t btn; // The button pushed

void play_game(void) {
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
	char input; // Serial input
	
	next_ball_move_time = get_current_time();
    19dc:	0e 94 2c 11 	call	0x2258	; 0x2258 <get_current_time>
    19e0:	60 93 dd 01 	sts	0x01DD, r22	; 0x8001dd <next_ball_move_time>
    19e4:	70 93 de 01 	sts	0x01DE, r23	; 0x8001de <next_ball_move_time+0x1>
    19e8:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <next_ball_move_time+0x2>
    19ec:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <next_ball_move_time+0x3>
	
	// We play the game until it's over
	while (!is_game_over()) {
    19f0:	59 c0       	rjmp	.+178    	; 0x1aa4 <play_game+0xcc>
				
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
    19f2:	0e 94 0c 03 	call	0x618	; 0x618 <button_pushed>
    19f6:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <btn>
		
		btn |= adc_move();
    19fa:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <adc_move>
    19fe:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <btn>
    1a02:	89 2b       	or	r24, r25
    1a04:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <btn>
		
		input = get_serial_input();
    1a08:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <get_serial_input>
		
		handle_serial_input(input);
    1a0c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <handle_serial_input>
		
		handle_player_move(btn);
    1a10:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <btn>
    1a14:	0e 94 9c 08 	call	0x1138	; 0x1138 <handle_player_move>
		
		cpu_think();
    1a18:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <cpu_think>
		guide_think();
    1a1c:	0e 94 41 05 	call	0xa82	; 0xa82 <guide_think>
		
		if(Tunes_IsPlaying()) Tunes_Think();
    1a20:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <Tunes_IsPlaying>
    1a24:	81 11       	cpse	r24, r1
    1a26:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Tunes_Think>
		
		current_time = get_current_time();
    1a2a:	0e 94 2c 11 	call	0x2258	; 0x2258 <get_current_time>
    1a2e:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <current_time>
    1a32:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <current_time+0x1>
    1a36:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <current_time+0x2>
    1a3a:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <current_time+0x3>
		if(is_game_paused()) continue;
    1a3e:	0e 94 13 08 	call	0x1026	; 0x1026 <is_game_paused>
    1a42:	81 11       	cpse	r24, r1
    1a44:	2f c0       	rjmp	.+94     	; 0x1aa4 <play_game+0xcc>
		if (current_time >= next_ball_move_time) {
    1a46:	40 91 be 01 	lds	r20, 0x01BE	; 0x8001be <current_time>
    1a4a:	50 91 bf 01 	lds	r21, 0x01BF	; 0x8001bf <current_time+0x1>
    1a4e:	60 91 c0 01 	lds	r22, 0x01C0	; 0x8001c0 <current_time+0x2>
    1a52:	70 91 c1 01 	lds	r23, 0x01C1	; 0x8001c1 <current_time+0x3>
    1a56:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <next_ball_move_time>
    1a5a:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <next_ball_move_time+0x1>
    1a5e:	a0 91 df 01 	lds	r26, 0x01DF	; 0x8001df <next_ball_move_time+0x2>
    1a62:	b0 91 e0 01 	lds	r27, 0x01E0	; 0x8001e0 <next_ball_move_time+0x3>
    1a66:	48 17       	cp	r20, r24
    1a68:	59 07       	cpc	r21, r25
    1a6a:	6a 07       	cpc	r22, r26
    1a6c:	7b 07       	cpc	r23, r27
    1a6e:	d0 f0       	brcs	.+52     	; 0x1aa4 <play_game+0xcc>
			// 500ms (0.5 second) has passed since the last time we move the
			// ball, so update the position of the ball based on current x
			// direction and y direction
			update_ball_position();
    1a70:	0e 94 97 0a 	call	0x152e	; 0x152e <update_ball_position>
			
			// set the next move time for the ball 
			next_ball_move_time = current_time + get_game_speed();
    1a74:	0e 94 c6 0a 	call	0x158c	; 0x158c <get_game_speed>
    1a78:	00 91 be 01 	lds	r16, 0x01BE	; 0x8001be <current_time>
    1a7c:	10 91 bf 01 	lds	r17, 0x01BF	; 0x8001bf <current_time+0x1>
    1a80:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <current_time+0x2>
    1a84:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <current_time+0x3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	80 0f       	add	r24, r16
    1a8e:	91 1f       	adc	r25, r17
    1a90:	a2 1f       	adc	r26, r18
    1a92:	b3 1f       	adc	r27, r19
    1a94:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <next_ball_move_time>
    1a98:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <next_ball_move_time+0x1>
    1a9c:	a0 93 df 01 	sts	0x01DF, r26	; 0x8001df <next_ball_move_time+0x2>
    1aa0:	b0 93 e0 01 	sts	0x01E0, r27	; 0x8001e0 <next_ball_move_time+0x3>
	char input; // Serial input
	
	next_ball_move_time = get_current_time();
	
	// We play the game until it's over
	while (!is_game_over()) {
    1aa4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <is_game_over>
    1aa8:	88 23       	and	r24, r24
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <play_game+0xd6>
    1aac:	a2 cf       	rjmp	.-188    	; 0x19f2 <play_game+0x1a>
			next_ball_move_time = current_time + get_game_speed();
		}
	}
	// We get here if the game is over.
	
	Tunes_Stop();
    1aae:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <Tunes_Stop>
}
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	08 95       	ret

00001ab8 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1ab8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
    1abc:	0e 94 56 0b 	call	0x16ac	; 0x16ac <start_screen>
	
	// Loop forever and continuously play the game.
	while(1) {
		new_game();
    1ac0:	0e 94 4d 0c 	call	0x189a	; 0x189a <new_game>
		play_game();
    1ac4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <play_game>
		handle_game_over();
    1ac8:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <handle_game_over>
    1acc:	f9 cf       	rjmp	.-14     	; 0x1ac0 <main+0x8>

00001ace <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1ace:	cf 93       	push	r28
    1ad0:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n') {
    1ad2:	8a 30       	cpi	r24, 0x0A	; 10
    1ad4:	19 f4       	brne	.+6      	; 0x1adc <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1ad6:	8d e0       	ldi	r24, 0x0D	; 13
    1ad8:	0e 94 67 0d 	call	0x1ace	; 0x1ace <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1adc:	9f b7       	in	r25, 0x3f	; 63
    1ade:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <uart_put_char+0x18>
		if (!interrupts_enabled) {
    1ae2:	99 23       	and	r25, r25
    1ae4:	29 f1       	breq	.+74     	; 0x1b30 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1ae6:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <bytes_in_out_buffer>
    1aea:	8f 3f       	cpi	r24, 0xFF	; 255
    1aec:	d1 f3       	breq	.-12     	; 0x1ae2 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1aee:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1af0:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <out_insert_pos>
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	8e 0f       	add	r24, r30
    1af8:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <out_insert_pos>
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	ec 51       	subi	r30, 0x1C	; 28
    1b00:	fe 4f       	sbci	r31, 0xFE	; 254
    1b02:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1b04:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <bytes_in_out_buffer>
    1b08:	8f 5f       	subi	r24, 0xFF	; 255
    1b0a:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1b0e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <out_insert_pos>
    1b12:	8f 3f       	cpi	r24, 0xFF	; 255
    1b14:	11 f4       	brne	.+4      	; 0x1b1a <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1b16:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1b1a:	e1 ec       	ldi	r30, 0xC1	; 193
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	80 62       	ori	r24, 0x20	; 32
    1b22:	80 83       	st	Z, r24
	if (interrupts_enabled) {
    1b24:	99 23       	and	r25, r25
    1b26:	39 f0       	breq	.+14     	; 0x1b36 <uart_put_char+0x68>
		sei();
    1b28:	78 94       	sei
	}
	return 0;
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	05 c0       	rjmp	.+10     	; 0x1b3a <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if (!interrupts_enabled) {
			return 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled) {
		sei();
	}
	return 0;
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
}
    1b3a:	cf 91       	pop	r28
    1b3c:	08 95       	ret

00001b3e <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0) {
    1b3e:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <bytes_in_input_buffer>
    1b42:	88 23       	and	r24, r24
    1b44:	e1 f3       	breq	.-8      	; 0x1b3e <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1b46:	2f b7       	in	r18, 0x3f	; 63
    1b48:	20 78       	andi	r18, 0x80	; 128
	cli();
    1b4a:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0) {
    1b4c:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <input_insert_pos>
    1b50:	30 91 f5 02 	lds	r19, 0x02F5	; 0x8002f5 <bytes_in_input_buffer>
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	83 1b       	sub	r24, r19
    1b58:	91 09       	sbc	r25, r1
    1b5a:	5a f4       	brpl	.+22     	; 0x1b72 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1b5c:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <input_insert_pos>
    1b60:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <bytes_in_input_buffer>
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	e8 1b       	sub	r30, r24
    1b68:	f1 09       	sbc	r31, r1
    1b6a:	ec 50       	subi	r30, 0x0C	; 12
    1b6c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b6e:	80 81       	ld	r24, Z
    1b70:	0a c0       	rjmp	.+20     	; 0x1b86 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1b72:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <input_insert_pos>
    1b76:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <bytes_in_input_buffer>
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	e8 1b       	sub	r30, r24
    1b7e:	f1 09       	sbc	r31, r1
    1b80:	ec 51       	subi	r30, 0x1C	; 28
    1b82:	fd 4f       	sbci	r31, 0xFD	; 253
    1b84:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1b86:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <bytes_in_input_buffer>
    1b8a:	91 50       	subi	r25, 0x01	; 1
    1b8c:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <bytes_in_input_buffer>
	if (interrupts_enabled) {
    1b90:	22 23       	and	r18, r18
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <uart_get_char+0x58>
		sei();
    1b94:	78 94       	sei
	}	
	return c;
}
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	08 95       	ret

00001b9a <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1b9a:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1b9e:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1ba2:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1ba6:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <bytes_in_input_buffer>
	input_overrun = 0;
    1baa:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1bae:	40 93 c2 01 	sts	0x01C2, r20	; 0x8001c2 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	aa 1f       	adc	r26, r26
    1bbc:	bb 1f       	adc	r27, r27
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	aa 1f       	adc	r26, r26
    1bc4:	bb 1f       	adc	r27, r27
    1bc6:	9c 01       	movw	r18, r24
    1bc8:	ad 01       	movw	r20, r26
    1bca:	22 0f       	add	r18, r18
    1bcc:	33 1f       	adc	r19, r19
    1bce:	44 1f       	adc	r20, r20
    1bd0:	55 1f       	adc	r21, r21
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	72 e1       	ldi	r23, 0x12	; 18
    1bd6:	8a e7       	ldi	r24, 0x7A	; 122
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	0e 94 47 13 	call	0x268e	; 0x268e <__divmodsi4>
    1bde:	ba 01       	movw	r22, r20
    1be0:	a9 01       	movw	r20, r18
    1be2:	4f 5f       	subi	r20, 0xFF	; 255
    1be4:	5f 4f       	sbci	r21, 0xFF	; 255
    1be6:	6f 4f       	sbci	r22, 0xFF	; 255
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	db 01       	movw	r26, r22
    1bec:	ca 01       	movw	r24, r20
    1bee:	1a f4       	brpl	.+6      	; 0x1bf6 <init_serial_stdio+0x5c>
    1bf0:	01 96       	adiw	r24, 0x01	; 1
    1bf2:	a1 1d       	adc	r26, r1
    1bf4:	b1 1d       	adc	r27, r1
    1bf6:	b5 95       	asr	r27
    1bf8:	a7 95       	ror	r26
    1bfa:	97 95       	ror	r25
    1bfc:	87 95       	ror	r24
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1c00:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1c04:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    1c08:	e1 ec       	ldi	r30, 0xC1	; 193
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	88 e1       	ldi	r24, 0x18	; 24
    1c0e:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
    1c10:	80 81       	ld	r24, Z
    1c12:	80 68       	ori	r24, 0x80	; 128
    1c14:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1c16:	e6 ef       	ldi	r30, 0xF6	; 246
    1c18:	f2 e0       	ldi	r31, 0x02	; 2
    1c1a:	86 e0       	ldi	r24, 0x06	; 6
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	93 83       	std	Z+3, r25	; 0x03
    1c20:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	80 83       	st	Z, r24
    1c26:	08 95       	ret

00001c28 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return bytes_in_input_buffer != 0;
    1c28:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <bytes_in_input_buffer>
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	91 11       	cpse	r25, r1
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <serial_input_available+0xc>
    1c32:	80 e0       	ldi	r24, 0x00	; 0
}
    1c34:	08 95       	ret

00001c36 <get_serial_input>:

char get_serial_input(void) {
	char serial_input = -1;
	if (serial_input_available()) {
    1c36:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <serial_input_available>
    1c3a:	88 23       	and	r24, r24
    1c3c:	39 f0       	breq	.+14     	; 0x1c4c <get_serial_input+0x16>
		serial_input = fgetc(stdin);
    1c3e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <__iob>
    1c42:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <__iob+0x1>
    1c46:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <fgetc>
    1c4a:	08 95       	ret
int8_t serial_input_available(void) {
	return bytes_in_input_buffer != 0;
}

char get_serial_input(void) {
	char serial_input = -1;
    1c4c:	8f ef       	ldi	r24, 0xFF	; 255
	if (serial_input_available()) {
		serial_input = fgetc(stdin);
	}
	return serial_input;
}
    1c4e:	08 95       	ret

00001c50 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1c50:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1c54:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <bytes_in_input_buffer>
    1c58:	08 95       	ret

00001c5a <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1c5a:	1f 92       	push	r1
    1c5c:	0f 92       	push	r0
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	0f 92       	push	r0
    1c62:	11 24       	eor	r1, r1
    1c64:	2f 93       	push	r18
    1c66:	8f 93       	push	r24
    1c68:	9f 93       	push	r25
    1c6a:	ef 93       	push	r30
    1c6c:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0) {
    1c6e:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <bytes_in_out_buffer>
    1c72:	88 23       	and	r24, r24
    1c74:	29 f1       	breq	.+74     	; 0x1cc0 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0) {
    1c76:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <out_insert_pos>
    1c7a:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <bytes_in_out_buffer>
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	82 1b       	sub	r24, r18
    1c82:	91 09       	sbc	r25, r1
    1c84:	5a f4       	brpl	.+22     	; 0x1c9c <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1c86:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <out_insert_pos>
    1c8a:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <bytes_in_out_buffer>
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	e8 1b       	sub	r30, r24
    1c92:	f1 09       	sbc	r31, r1
    1c94:	ed 51       	subi	r30, 0x1D	; 29
    1c96:	fd 4f       	sbci	r31, 0xFD	; 253
    1c98:	90 81       	ld	r25, Z
    1c9a:	0a c0       	rjmp	.+20     	; 0x1cb0 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1c9c:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <out_insert_pos>
    1ca0:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <bytes_in_out_buffer>
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	e8 1b       	sub	r30, r24
    1ca8:	f1 09       	sbc	r31, r1
    1caa:	ec 51       	subi	r30, 0x1C	; 28
    1cac:	fe 4f       	sbci	r31, 0xFE	; 254
    1cae:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1cb0:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <bytes_in_out_buffer>
    1cb4:	81 50       	subi	r24, 0x01	; 1
    1cb6:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1cba:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1cbe:	05 c0       	rjmp	.+10     	; 0x1cca <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
    1cc0:	e1 ec       	ldi	r30, 0xC1	; 193
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	8f 7d       	andi	r24, 0xDF	; 223
    1cc8:	80 83       	st	Z, r24
	}
}
    1cca:	ff 91       	pop	r31
    1ccc:	ef 91       	pop	r30
    1cce:	9f 91       	pop	r25
    1cd0:	8f 91       	pop	r24
    1cd2:	2f 91       	pop	r18
    1cd4:	0f 90       	pop	r0
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	0f 90       	pop	r0
    1cda:	1f 90       	pop	r1
    1cdc:	18 95       	reti

00001cde <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1cde:	1f 92       	push	r1
    1ce0:	0f 92       	push	r0
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	0f 92       	push	r0
    1ce6:	11 24       	eor	r1, r1
    1ce8:	2f 93       	push	r18
    1cea:	3f 93       	push	r19
    1cec:	4f 93       	push	r20
    1cee:	5f 93       	push	r21
    1cf0:	6f 93       	push	r22
    1cf2:	7f 93       	push	r23
    1cf4:	8f 93       	push	r24
    1cf6:	9f 93       	push	r25
    1cf8:	af 93       	push	r26
    1cfa:	bf 93       	push	r27
    1cfc:	cf 93       	push	r28
    1cfe:	ef 93       	push	r30
    1d00:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1d02:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1d06:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <do_echo>
    1d0a:	88 23       	and	r24, r24
    1d0c:	49 f0       	breq	.+18     	; 0x1d20 <__vector_20+0x42>
    1d0e:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <bytes_in_out_buffer>
    1d12:	8f 3f       	cpi	r24, 0xFF	; 255
    1d14:	29 f0       	breq	.+10     	; 0x1d20 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	8c 2f       	mov	r24, r28
    1d1c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1d20:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <bytes_in_input_buffer>
    1d24:	80 31       	cpi	r24, 0x10	; 16
    1d26:	20 f0       	brcs	.+8      	; 0x1d30 <__vector_20+0x52>
		input_overrun = 1;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <input_overrun>
    1d2e:	18 c0       	rjmp	.+48     	; 0x1d60 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1d30:	cd 30       	cpi	r28, 0x0D	; 13
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <__vector_20+0x58>
			c = '\n';
    1d34:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1d36:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <input_insert_pos>
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	8e 0f       	add	r24, r30
    1d3e:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <input_insert_pos>
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	ec 51       	subi	r30, 0x1C	; 28
    1d46:	fd 4f       	sbci	r31, 0xFD	; 253
    1d48:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1d4a:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <bytes_in_input_buffer>
    1d4e:	8f 5f       	subi	r24, 0xFF	; 255
    1d50:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE) {
    1d54:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <input_insert_pos>
    1d58:	80 31       	cpi	r24, 0x10	; 16
    1d5a:	11 f4       	brne	.+4      	; 0x1d60 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1d5c:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <input_insert_pos>
		}
	}
}
    1d60:	ff 91       	pop	r31
    1d62:	ef 91       	pop	r30
    1d64:	cf 91       	pop	r28
    1d66:	bf 91       	pop	r27
    1d68:	af 91       	pop	r26
    1d6a:	9f 91       	pop	r25
    1d6c:	8f 91       	pop	r24
    1d6e:	7f 91       	pop	r23
    1d70:	6f 91       	pop	r22
    1d72:	5f 91       	pop	r21
    1d74:	4f 91       	pop	r20
    1d76:	3f 91       	pop	r19
    1d78:	2f 91       	pop	r18
    1d7a:	0f 90       	pop	r0
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	0f 90       	pop	r0
    1d80:	1f 90       	pop	r1
    1d82:	18 95       	reti

00001d84 <start_input_pressed>:


/////////////////////////////////Extra Functions/////////////////////////

int8_t start_input_pressed(void) {
	char serial_input = get_serial_input();
    1d84:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <get_serial_input>
	return ((char)tolower(serial_input) == 's');
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 c8 13 	call	0x2790	; 0x2790 <tolower>
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	83 37       	cpi	r24, 0x73	; 115
    1d92:	09 f0       	breq	.+2      	; 0x1d96 <start_input_pressed+0x12>
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	89 2f       	mov	r24, r25
    1d98:	08 95       	ret

00001d9a <freq_to_clock_period>:
			
			if(vuvuzela) TCNT1 = 0;
	}
	
	Tunes_Stop();
}
    1d9a:	9c 01       	movw	r18, r24
    1d9c:	40 e0       	ldi	r20, 0x00	; 0
    1d9e:	50 e0       	ldi	r21, 0x00	; 0
    1da0:	60 e4       	ldi	r22, 0x40	; 64
    1da2:	72 e4       	ldi	r23, 0x42	; 66
    1da4:	8f e0       	ldi	r24, 0x0F	; 15
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	0e 94 25 13 	call	0x264a	; 0x264a <__udivmodsi4>
    1dac:	c9 01       	movw	r24, r18
    1dae:	08 95       	ret

00001db0 <duty_cycle_to_pulse_width>:
    1db0:	cf 92       	push	r12
    1db2:	df 92       	push	r13
    1db4:	ef 92       	push	r14
    1db6:	ff 92       	push	r15
    1db8:	6b 01       	movw	r12, r22
    1dba:	7c 01       	movw	r14, r24
    1dbc:	ba 01       	movw	r22, r20
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	0e 94 02 12 	call	0x2404	; 0x2404 <__floatunsisf>
    1dc6:	a7 01       	movw	r20, r14
    1dc8:	96 01       	movw	r18, r12
    1dca:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3>
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	48 ec       	ldi	r20, 0xC8	; 200
    1dd4:	52 e4       	ldi	r21, 0x42	; 66
    1dd6:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__divsf3>
    1dda:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fixunssfsi>
    1dde:	cb 01       	movw	r24, r22
    1de0:	ff 90       	pop	r15
    1de2:	ef 90       	pop	r14
    1de4:	df 90       	pop	r13
    1de6:	cf 90       	pop	r12
    1de8:	08 95       	ret

00001dea <Tunes_SetTimer>:
    1dea:	8a b1       	in	r24, 0x0a	; 10
    1dec:	80 61       	ori	r24, 0x10	; 16
    1dee:	8a b9       	out	0x0a, r24	; 10
    1df0:	e0 e8       	ldi	r30, 0x80	; 128
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	80 62       	ori	r24, 0x20	; 32
    1df8:	80 83       	st	Z, r24
    1dfa:	e1 e8       	ldi	r30, 0x81	; 129
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	82 60       	ori	r24, 0x02	; 2
    1e02:	80 83       	st	Z, r24
    1e04:	08 95       	ret

00001e06 <setup_sound_effects>:
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1e0c:	80 e1       	ldi	r24, 0x10	; 16
    1e0e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1e12:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <Tunes_SetTimer>
    1e16:	08 95       	ret

00001e18 <Tone>:
    1e18:	0f 93       	push	r16
    1e1a:	1f 93       	push	r17
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <mute>
    1e24:	21 11       	cpse	r18, r1
    1e26:	32 c0       	rjmp	.+100    	; 0x1e8c <Tone+0x74>
    1e28:	eb 01       	movw	r28, r22
    1e2a:	21 e0       	ldi	r18, 0x01	; 1
    1e2c:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <tunes_playing>
    1e30:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <freq_to_clock_period>
    1e34:	8c 01       	movw	r16, r24
    1e36:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <Volume>
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0e 94 02 12 	call	0x2404	; 0x2404 <__floatunsisf>
    1e44:	a8 01       	movw	r20, r16
    1e46:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <duty_cycle_to_pulse_width>
    1e4a:	01 50       	subi	r16, 0x01	; 1
    1e4c:	11 09       	sbc	r17, r1
    1e4e:	10 93 89 00 	sts	0x0089, r17	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1e52:	00 93 88 00 	sts	0x0088, r16	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	29 f4       	brne	.+10     	; 0x1e64 <Tone+0x4c>
    1e5a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1e5e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1e62:	05 c0       	rjmp	.+10     	; 0x1e6e <Tone+0x56>
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1e6a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1e6e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <Tunes_SetTimer>
    1e72:	20 97       	sbiw	r28, 0x00	; 0
    1e74:	59 f0       	breq	.+22     	; 0x1e8c <Tone+0x74>
    1e76:	0e 94 2c 11 	call	0x2258	; 0x2258 <get_current_time>
    1e7a:	c6 0f       	add	r28, r22
    1e7c:	d7 1f       	adc	r29, r23
    1e7e:	d0 93 c7 01 	sts	0x01C7, r29	; 0x8001c7 <delay_ms+0x1>
    1e82:	c0 93 c6 01 	sts	0x01C6, r28	; 0x8001c6 <delay_ms>
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <ToneOn>
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	08 95       	ret

00001e96 <Tunes_Play>:
    1e96:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <tunes_playing>
    1e9a:	21 11       	cpse	r18, r1
    1e9c:	17 c0       	rjmp	.+46     	; 0x1ecc <Tunes_Play+0x36>
    1e9e:	31 e0       	ldi	r19, 0x01	; 1
    1ea0:	30 93 cc 01 	sts	0x01CC, r19	; 0x8001cc <tunes_playing>
    1ea4:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <CurrentSong+0x1>
    1ea8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <CurrentSong>
    1eac:	26 2f       	mov	r18, r22
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	60 e8       	ldi	r22, 0x80	; 128
    1eb6:	79 ea       	ldi	r23, 0xA9	; 169
    1eb8:	83 e0       	ldi	r24, 0x03	; 3
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	0e 94 25 13 	call	0x264a	; 0x264a <__udivmodsi4>
    1ec0:	30 93 c9 01 	sts	0x01C9, r19	; 0x8001c9 <Wholenote+0x1>
    1ec4:	20 93 c8 01 	sts	0x01C8, r18	; 0x8001c8 <Wholenote>
    1ec8:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <Tunes_SetTimer>
    1ecc:	08 95       	ret

00001ece <Tunes_Play_Mario>:
    1ece:	68 e7       	ldi	r22, 0x78	; 120
    1ed0:	8e e6       	ldi	r24, 0x6E	; 110
    1ed2:	92 e0       	ldi	r25, 0x02	; 2
    1ed4:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <Tunes_Play>
    1ed8:	08 95       	ret

00001eda <Tunes_Play_star>:
    1eda:	6c e6       	ldi	r22, 0x6C	; 108
    1edc:	86 e5       	ldi	r24, 0x56	; 86
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <Tunes_Play>
    1ee4:	08 95       	ret

00001ee6 <Tunes_Stop>:
    1ee6:	e1 e8       	ldi	r30, 0x81	; 129
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	8d 7f       	andi	r24, 0xFD	; 253
    1eee:	80 83       	st	Z, r24
    1ef0:	e0 e8       	ldi	r30, 0x80	; 128
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	8f 7d       	andi	r24, 0xDF	; 223
    1ef8:	80 83       	st	Z, r24
    1efa:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1efe:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1f02:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1f06:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1f0a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1f0e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1f12:	8a b1       	in	r24, 0x0a	; 10
    1f14:	8f 7e       	andi	r24, 0xEF	; 239
    1f16:	8a b9       	out	0x0a, r24	; 10
    1f18:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <tunes_playing>
    1f1c:	08 95       	ret

00001f1e <toggle_mute>:
    1f1e:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <mute>
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	89 27       	eor	r24, r25
    1f26:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <mute>
    1f2a:	81 11       	cpse	r24, r1
    1f2c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <Tunes_Stop>
    1f30:	08 95       	ret

00001f32 <Tunes_IsPlaying>:
    1f32:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <tunes_playing>
    1f36:	08 95       	ret

00001f38 <Tunes_Think>:

void Tunes_Think(void){
    1f38:	cf 92       	push	r12
    1f3a:	df 92       	push	r13
    1f3c:	ef 92       	push	r14
    1f3e:	ff 92       	push	r15
	if(mute) return;
    1f40:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <mute>
    1f44:	81 11       	cpse	r24, r1
    1f46:	a9 c0       	rjmp	.+338    	; 0x209a <Tunes_Think+0x162>
	static int16_t duration = 0;
	uint16_t note = 0;
	
	if(delay_ms < get_current_time()){
    1f48:	c0 90 c6 01 	lds	r12, 0x01C6	; 0x8001c6 <delay_ms>
    1f4c:	d0 90 c7 01 	lds	r13, 0x01C7	; 0x8001c7 <delay_ms+0x1>
    1f50:	e1 2c       	mov	r14, r1
    1f52:	f1 2c       	mov	r15, r1
    1f54:	0e 94 2c 11 	call	0x2258	; 0x2258 <get_current_time>
    1f58:	c6 16       	cp	r12, r22
    1f5a:	d7 06       	cpc	r13, r23
    1f5c:	e8 06       	cpc	r14, r24
    1f5e:	f9 06       	cpc	r15, r25
    1f60:	08 f0       	brcs	.+2      	; 0x1f64 <Tunes_Think+0x2c>
    1f62:	9b c0       	rjmp	.+310    	; 0x209a <Tunes_Think+0x162>
		if(ToneOn){
    1f64:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <ToneOn>
    1f68:	88 23       	and	r24, r24
    1f6a:	29 f0       	breq	.+10     	; 0x1f76 <Tunes_Think+0x3e>
			ToneOn = 0;
    1f6c:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <ToneOn>
			Tunes_Stop();
    1f70:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <Tunes_Stop>
			return;
    1f74:	92 c0       	rjmp	.+292    	; 0x209a <Tunes_Think+0x162>
		}
		
		if(pgm_read_word(CurrentSong)){
    1f76:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <CurrentSong>
    1f7a:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <CurrentSong+0x1>
    1f7e:	fc 01       	movw	r30, r24
    1f80:	25 91       	lpm	r18, Z+
    1f82:	34 91       	lpm	r19, Z
    1f84:	23 2b       	or	r18, r19
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <Tunes_Think+0x52>
    1f88:	86 c0       	rjmp	.+268    	; 0x2096 <Tunes_Think+0x15e>
			note = pgm_read_word(CurrentSong);
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	25 91       	lpm	r18, Z+
    1f8e:	34 91       	lpm	r19, Z
    1f90:	79 01       	movw	r14, r18
			
			CurrentSong++;
    1f92:	02 96       	adiw	r24, 0x02	; 2
    1f94:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <CurrentSong+0x1>
    1f98:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <CurrentSong>
			
			if((int16_t)pgm_read_word(CurrentSong) < 33 && (int16_t)pgm_read_word(CurrentSong) != REST && (int16_t)pgm_read_word(CurrentSong) != 0){
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	45 91       	lpm	r20, Z+
    1fa0:	54 91       	lpm	r21, Z
    1fa2:	41 32       	cpi	r20, 0x21	; 33
    1fa4:	51 05       	cpc	r21, r1
    1fa6:	0c f0       	brlt	.+2      	; 0x1faa <Tunes_Think+0x72>
    1fa8:	3c c0       	rjmp	.+120    	; 0x2022 <Tunes_Think+0xea>
    1faa:	fc 01       	movw	r30, r24
    1fac:	45 91       	lpm	r20, Z+
    1fae:	54 91       	lpm	r21, Z
    1fb0:	41 30       	cpi	r20, 0x01	; 1
    1fb2:	51 05       	cpc	r21, r1
    1fb4:	b1 f1       	breq	.+108    	; 0x2022 <Tunes_Think+0xea>
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	45 91       	lpm	r20, Z+
    1fba:	54 91       	lpm	r21, Z
    1fbc:	45 2b       	or	r20, r21
    1fbe:	89 f1       	breq	.+98     	; 0x2022 <Tunes_Think+0xea>
				duration = (int16_t)pgm_read_word(CurrentSong);
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	45 91       	lpm	r20, Z+
    1fc4:	54 91       	lpm	r21, Z
    1fc6:	ba 01       	movw	r22, r20
				
				if(duration > 0){
    1fc8:	14 16       	cp	r1, r20
    1fca:	15 06       	cpc	r1, r21
    1fcc:	5c f4       	brge	.+22     	; 0x1fe4 <Tunes_Think+0xac>
					duration = Wholenote / duration;
    1fce:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <Wholenote>
    1fd2:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <Wholenote+0x1>
    1fd6:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__udivmodhi4>
    1fda:	70 93 c4 01 	sts	0x01C4, r23	; 0x8001c4 <duration.2183+0x1>
    1fde:	60 93 c3 01 	sts	0x01C3, r22	; 0x8001c3 <duration.2183>
    1fe2:	16 c0       	rjmp	.+44     	; 0x2010 <Tunes_Think+0xd8>
				}else{
					duration = Wholenote / (0 - duration);
    1fe4:	66 27       	eor	r22, r22
    1fe6:	77 27       	eor	r23, r23
    1fe8:	64 1b       	sub	r22, r20
    1fea:	75 0b       	sbc	r23, r21
    1fec:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <Wholenote>
    1ff0:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <Wholenote+0x1>
    1ff4:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__udivmodhi4>
					duration = duration + (duration / 2);
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	77 23       	and	r23, r23
    1ffc:	0c f4       	brge	.+2      	; 0x2000 <Tunes_Think+0xc8>
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	95 95       	asr	r25
    2002:	87 95       	ror	r24
    2004:	86 0f       	add	r24, r22
    2006:	97 1f       	adc	r25, r23
    2008:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <duration.2183+0x1>
    200c:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <duration.2183>
				}
				
				CurrentSong++;
    2010:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <CurrentSong>
    2014:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <CurrentSong+0x1>
    2018:	02 96       	adiw	r24, 0x02	; 2
    201a:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <CurrentSong+0x1>
    201e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <CurrentSong>
			}
			
			if(note == REST){
    2022:	ea 94       	dec	r14
    2024:	ef 28       	or	r14, r15
    2026:	29 f4       	brne	.+10     	; 0x2032 <Tunes_Think+0xfa>
				OCR1A = 0;
    2028:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    202c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2030:	25 c0       	rjmp	.+74     	; 0x207c <Tunes_Think+0x144>
			}else{
				uint16_t clockperiod = freq_to_clock_period(note);
    2032:	c9 01       	movw	r24, r18
    2034:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <freq_to_clock_period>
    2038:	7c 01       	movw	r14, r24
				uint16_t pulsewidth = duty_cycle_to_pulse_width(Volume, clockperiod);
    203a:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <Volume>
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	0e 94 02 12 	call	0x2404	; 0x2404 <__floatunsisf>
    2048:	a7 01       	movw	r20, r14
    204a:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <duty_cycle_to_pulse_width>
				
				OCR1A = clockperiod - 1;
    204e:	21 e0       	ldi	r18, 0x01	; 1
    2050:	e2 1a       	sub	r14, r18
    2052:	f1 08       	sbc	r15, r1
    2054:	f0 92 89 00 	sts	0x0089, r15	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2058:	e0 92 88 00 	sts	0x0088, r14	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				
				if(pulsewidth == 0){
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	29 f4       	brne	.+10     	; 0x206a <Tunes_Think+0x132>
					OCR1B = 0;
    2060:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2064:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    2068:	05 c0       	rjmp	.+10     	; 0x2074 <Tunes_Think+0x13c>
				}else{
					OCR1B = pulsewidth - 1;
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2070:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				}
				
				TCNT1 = 0;
    2074:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    2078:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			}
			
			delay_ms = get_current_time() + duration;
    207c:	0e 94 2c 11 	call	0x2258	; 0x2258 <get_current_time>
    2080:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <duration.2183>
    2084:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <duration.2183+0x1>
    2088:	62 0f       	add	r22, r18
    208a:	73 1f       	adc	r23, r19
    208c:	70 93 c7 01 	sts	0x01C7, r23	; 0x8001c7 <delay_ms+0x1>
    2090:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <delay_ms>
    2094:	02 c0       	rjmp	.+4      	; 0x209a <Tunes_Think+0x162>
		}else{
			Tunes_Stop();
    2096:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <Tunes_Stop>
		}
	}
    209a:	ff 90       	pop	r15
    209c:	ef 90       	pop	r14
    209e:	df 90       	pop	r13
    20a0:	cf 90       	pop	r12
    20a2:	08 95       	ret

000020a4 <spi_setup_master>:

void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    20a4:	94 b1       	in	r25, 0x04	; 4
    20a6:	90 6b       	ori	r25, 0xB0	; 176
    20a8:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
    20aa:	95 b1       	in	r25, 0x05	; 5
    20ac:	90 61       	ori	r25, 0x10	; 16
    20ae:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    20b0:	90 e5       	ldi	r25, 0x50	; 80
    20b2:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider) {
    20b4:	88 30       	cpi	r24, 0x08	; 8
    20b6:	21 f0       	breq	.+8      	; 0x20c0 <spi_setup_master+0x1c>
    20b8:	80 32       	cpi	r24, 0x20	; 32
    20ba:	11 f0       	breq	.+4      	; 0x20c0 <spi_setup_master+0x1c>
    20bc:	82 30       	cpi	r24, 0x02	; 2
    20be:	19 f4       	brne	.+6      	; 0x20c6 <spi_setup_master+0x22>
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
    20c0:	91 e0       	ldi	r25, 0x01	; 1
    20c2:	9d bd       	out	0x2d, r25	; 45
			break;
    20c4:	01 c0       	rjmp	.+2      	; 0x20c8 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    20c6:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider) {
    20c8:	80 32       	cpi	r24, 0x20	; 32
    20ca:	69 f0       	breq	.+26     	; 0x20e6 <spi_setup_master+0x42>
    20cc:	28 f4       	brcc	.+10     	; 0x20d8 <spi_setup_master+0x34>
    20ce:	88 30       	cpi	r24, 0x08	; 8
    20d0:	71 f0       	breq	.+28     	; 0x20ee <spi_setup_master+0x4a>
    20d2:	80 31       	cpi	r24, 0x10	; 16
    20d4:	61 f0       	breq	.+24     	; 0x20ee <spi_setup_master+0x4a>
    20d6:	0e c0       	rjmp	.+28     	; 0x20f4 <spi_setup_master+0x50>
    20d8:	80 34       	cpi	r24, 0x40	; 64
    20da:	29 f0       	breq	.+10     	; 0x20e6 <spi_setup_master+0x42>
    20dc:	80 38       	cpi	r24, 0x80	; 128
    20de:	51 f4       	brne	.+20     	; 0x20f4 <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1 << SPR00);
    20e0:	8c b5       	in	r24, 0x2c	; 44
    20e2:	81 60       	ori	r24, 0x01	; 1
    20e4:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
    20e6:	8c b5       	in	r24, 0x2c	; 44
    20e8:	82 60       	ori	r24, 0x02	; 2
    20ea:	8c bd       	out	0x2c, r24	; 44
			break;
    20ec:	03 c0       	rjmp	.+6      	; 0x20f4 <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
    20ee:	8c b5       	in	r24, 0x2c	; 44
    20f0:	81 60       	ori	r24, 0x01	; 1
    20f2:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
    20f4:	85 b1       	in	r24, 0x05	; 5
    20f6:	8f 7e       	andi	r24, 0xEF	; 239
    20f8:	85 b9       	out	0x05, r24	; 5
    20fa:	08 95       	ret

000020fc <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    20fc:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0) {
    20fe:	0d b4       	in	r0, 0x2d	; 45
    2100:	07 fe       	sbrs	r0, 7
    2102:	fd cf       	rjmp	.-6      	; 0x20fe <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    2104:	8e b5       	in	r24, 0x2e	; 46
}
    2106:	08 95       	ret

00002108 <setup_ssd>:
volatile uint8_t seven_seg_cc = 0;


void setup_ssd(){
	// Set port C (all pins) to outputs
	DDRC = 0xFF;
    2108:	8f ef       	ldi	r24, 0xFF	; 255
    210a:	87 b9       	out	0x07, r24	; 7
	
	// Set Port D pin 2 to output
	DDRD |= (1<<DDD2);
    210c:	8a b1       	in	r24, 0x0a	; 10
    210e:	84 60       	ori	r24, 0x04	; 4
    2110:	8a b9       	out	0x0a, r24	; 10
	
	/* Set up timer/counter 2 so that we get an 
	** interrupt 100 times per second, i.e. every
	** 10 milliseconds.
	*/
	OCR2A = 77; /* Clock divided by 1024 - count for 78 cycles */
    2112:	8d e4       	ldi	r24, 0x4D	; 77
    2114:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A = (1<<WGM21); /* CTC Mode */
    2118:	92 e0       	ldi	r25, 0x02	; 2
    211a:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	
	TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); /* Divide clock by 8 */
    211e:	87 e0       	ldi	r24, 0x07	; 7
    2120:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	TIMSK2 |= (1<<OCIE2A);
    2124:	e0 e7       	ldi	r30, 0x70	; 112
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	82 60       	ori	r24, 0x02	; 2
    212c:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR2 = (1 << OCF2A);
    212e:	97 bb       	out	0x17, r25	; 23
    2130:	08 95       	ret

00002132 <ssd_display_score>:
}

void ssd_display_score(){
	digits_displayed = 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <digits_displayed>
    2138:	08 95       	ret

0000213a <__vector_9>:
}

ISR(TIMER2_COMPA_vect){
    213a:	1f 92       	push	r1
    213c:	0f 92       	push	r0
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	0f 92       	push	r0
    2142:	11 24       	eor	r1, r1
    2144:	2f 93       	push	r18
    2146:	3f 93       	push	r19
    2148:	4f 93       	push	r20
    214a:	5f 93       	push	r21
    214c:	6f 93       	push	r22
    214e:	7f 93       	push	r23
    2150:	8f 93       	push	r24
    2152:	9f 93       	push	r25
    2154:	af 93       	push	r26
    2156:	bf 93       	push	r27
    2158:	ef 93       	push	r30
    215a:	ff 93       	push	r31
	
	/* Change which digit will be displayed. If last time was
	** left, now display right. If last time was right, now 
	** display left.
	*/
	seven_seg_cc = 1 ^ seven_seg_cc;
    215c:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <seven_seg_cc>
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	89 27       	eor	r24, r25
    2164:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <seven_seg_cc>
	
	
	if(digits_displayed){
    2168:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <digits_displayed>
    216c:	88 23       	and	r24, r24
    216e:	01 f1       	breq	.+64     	; 0x21b0 <__vector_9+0x76>
		int8_t score = 0;
		if(seven_seg_cc == 0){
    2170:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <seven_seg_cc>
    2174:	81 11       	cpse	r24, r1
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <__vector_9+0x46>
			score = get_player_score(PLAYER_2);
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	0e 94 4f 09 	call	0x129e	; 0x129e <get_player_score>
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <__vector_9+0x4c>
		}else{
			score = get_player_score(PLAYER_1);
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	0e 94 4f 09 	call	0x129e	; 0x129e <get_player_score>
		}
		PORTC = seven_seg[score];
    2186:	e8 2f       	mov	r30, r24
    2188:	88 0f       	add	r24, r24
    218a:	ff 0b       	sbc	r31, r31
    218c:	eb 5e       	subi	r30, 0xEB	; 235
    218e:	fe 4f       	sbci	r31, 0xFE	; 254
    2190:	80 81       	ld	r24, Z
    2192:	88 b9       	out	0x08, r24	; 8
		// Set pin D2 to seven_seg_cc
		PORTD = (PORTD & ~(1<<PORTD2)) | (seven_seg_cc<<PORTD2);
    2194:	2b b1       	in	r18, 0x0b	; 11
    2196:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <seven_seg_cc>
    219a:	89 2f       	mov	r24, r25
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	92 2f       	mov	r25, r18
    21a8:	9b 7f       	andi	r25, 0xFB	; 251
    21aa:	89 2b       	or	r24, r25
    21ac:	8b b9       	out	0x0b, r24	; 11
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <__vector_9+0x78>
	}else{
		/* No digits displayed -  display is blank */
		PORTC = 0;
    21b0:	18 b8       	out	0x08, r1	; 8
	}
    21b2:	ff 91       	pop	r31
    21b4:	ef 91       	pop	r30
    21b6:	bf 91       	pop	r27
    21b8:	af 91       	pop	r26
    21ba:	9f 91       	pop	r25
    21bc:	8f 91       	pop	r24
    21be:	7f 91       	pop	r23
    21c0:	6f 91       	pop	r22
    21c2:	5f 91       	pop	r21
    21c4:	4f 91       	pop	r20
    21c6:	3f 91       	pop	r19
    21c8:	2f 91       	pop	r18
    21ca:	0f 90       	pop	r0
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	0f 90       	pop	r0
    21d0:	1f 90       	pop	r1
    21d2:	18 95       	reti

000021d4 <move_terminal_cursor>:
	printf_P(PSTR("\x1b[%dm"), parameter);
}

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
}
    21d4:	9f 93       	push	r25
    21d6:	8f 93       	push	r24
    21d8:	7f 93       	push	r23
    21da:	6f 93       	push	r22
    21dc:	88 e2       	ldi	r24, 0x28	; 40
    21de:	93 e0       	ldi	r25, 0x03	; 3
    21e0:	9f 93       	push	r25
    21e2:	8f 93       	push	r24
    21e4:	0e 94 0e 14 	call	0x281c	; 0x281c <printf_P>
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	08 95       	ret

000021f6 <clear_terminal>:
    21f6:	83 e2       	ldi	r24, 0x23	; 35
    21f8:	93 e0       	ldi	r25, 0x03	; 3
    21fa:	9f 93       	push	r25
    21fc:	8f 93       	push	r24
    21fe:	0e 94 0e 14 	call	0x281c	; 0x281c <printf_P>
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	08 95       	ret

00002208 <clear_to_end_of_line>:
    2208:	8f e1       	ldi	r24, 0x1F	; 31
    220a:	93 e0       	ldi	r25, 0x03	; 3
    220c:	9f 93       	push	r25
    220e:	8f 93       	push	r24
    2210:	0e 94 0e 14 	call	0x281c	; 0x281c <printf_P>
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	08 95       	ret

0000221a <show_cursor>:

void show_cursor() {
	printf_P(PSTR("\x1b[?25h"));
    221a:	88 e1       	ldi	r24, 0x18	; 24
    221c:	93 e0       	ldi	r25, 0x03	; 3
    221e:	9f 93       	push	r25
    2220:	8f 93       	push	r24
    2222:	0e 94 0e 14 	call	0x281c	; 0x281c <printf_P>
}
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	08 95       	ret

0000222c <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
    222c:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <clock_ticks_ms>
    2230:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <clock_ticks_ms+0x1>
    2234:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <clock_ticks_ms+0x2>
    2238:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    223c:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    223e:	8c e7       	ldi	r24, 0x7C	; 124
    2240:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
    2242:	92 e0       	ldi	r25, 0x02	; 2
    2244:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    2246:	83 e0       	ldi	r24, 0x03	; 3
    2248:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
    224a:	ee e6       	ldi	r30, 0x6E	; 110
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	82 60       	ori	r24, 0x02	; 2
    2252:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
    2254:	95 bb       	out	0x15, r25	; 21
    2256:	08 95       	ret

00002258 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    2258:	8f b7       	in	r24, 0x3f	; 63
    225a:	28 2f       	mov	r18, r24
    225c:	20 78       	andi	r18, 0x80	; 128
	cli();
    225e:	f8 94       	cli
	return_value = clock_ticks_ms;
    2260:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <clock_ticks_ms>
    2264:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <clock_ticks_ms+0x1>
    2268:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <clock_ticks_ms+0x2>
    226c:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <clock_ticks_ms+0x3>
	if (interrupts_were_enabled) {
    2270:	22 23       	and	r18, r18
    2272:	09 f0       	breq	.+2      	; 0x2276 <get_current_time+0x1e>
		sei();
    2274:	78 94       	sei
	}
	return return_value;
}
    2276:	08 95       	ret

00002278 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    2278:	1f 92       	push	r1
    227a:	0f 92       	push	r0
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	0f 92       	push	r0
    2280:	11 24       	eor	r1, r1
    2282:	8f 93       	push	r24
    2284:	9f 93       	push	r25
    2286:	af 93       	push	r26
    2288:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks_ms++;
    228a:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <clock_ticks_ms>
    228e:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <clock_ticks_ms+0x1>
    2292:	a0 91 d2 01 	lds	r26, 0x01D2	; 0x8001d2 <clock_ticks_ms+0x2>
    2296:	b0 91 d3 01 	lds	r27, 0x01D3	; 0x8001d3 <clock_ticks_ms+0x3>
    229a:	01 96       	adiw	r24, 0x01	; 1
    229c:	a1 1d       	adc	r26, r1
    229e:	b1 1d       	adc	r27, r1
    22a0:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <clock_ticks_ms>
    22a4:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <clock_ticks_ms+0x1>
    22a8:	a0 93 d2 01 	sts	0x01D2, r26	; 0x8001d2 <clock_ticks_ms+0x2>
    22ac:	b0 93 d3 01 	sts	0x01D3, r27	; 0x8001d3 <clock_ticks_ms+0x3>
}
    22b0:	bf 91       	pop	r27
    22b2:	af 91       	pop	r26
    22b4:	9f 91       	pop	r25
    22b6:	8f 91       	pop	r24
    22b8:	0f 90       	pop	r0
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	0f 90       	pop	r0
    22be:	1f 90       	pop	r1
    22c0:	18 95       	reti

000022c2 <__divsf3>:
    22c2:	0e 94 75 11 	call	0x22ea	; 0x22ea <__divsf3x>
    22c6:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__fp_round>
    22ca:	0e 94 4f 12 	call	0x249e	; 0x249e <__fp_pscB>
    22ce:	58 f0       	brcs	.+22     	; 0x22e6 <__divsf3+0x24>
    22d0:	0e 94 48 12 	call	0x2490	; 0x2490 <__fp_pscA>
    22d4:	40 f0       	brcs	.+16     	; 0x22e6 <__divsf3+0x24>
    22d6:	29 f4       	brne	.+10     	; 0x22e2 <__divsf3+0x20>
    22d8:	5f 3f       	cpi	r21, 0xFF	; 255
    22da:	29 f0       	breq	.+10     	; 0x22e6 <__divsf3+0x24>
    22dc:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__fp_inf>
    22e0:	51 11       	cpse	r21, r1
    22e2:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__fp_szero>
    22e6:	0c 94 45 12 	jmp	0x248a	; 0x248a <__fp_nan>

000022ea <__divsf3x>:
    22ea:	0e 94 67 12 	call	0x24ce	; 0x24ce <__fp_split3>
    22ee:	68 f3       	brcs	.-38     	; 0x22ca <__divsf3+0x8>

000022f0 <__divsf3_pse>:
    22f0:	99 23       	and	r25, r25
    22f2:	b1 f3       	breq	.-20     	; 0x22e0 <__divsf3+0x1e>
    22f4:	55 23       	and	r21, r21
    22f6:	91 f3       	breq	.-28     	; 0x22dc <__divsf3+0x1a>
    22f8:	95 1b       	sub	r25, r21
    22fa:	55 0b       	sbc	r21, r21
    22fc:	bb 27       	eor	r27, r27
    22fe:	aa 27       	eor	r26, r26
    2300:	62 17       	cp	r22, r18
    2302:	73 07       	cpc	r23, r19
    2304:	84 07       	cpc	r24, r20
    2306:	38 f0       	brcs	.+14     	; 0x2316 <__divsf3_pse+0x26>
    2308:	9f 5f       	subi	r25, 0xFF	; 255
    230a:	5f 4f       	sbci	r21, 0xFF	; 255
    230c:	22 0f       	add	r18, r18
    230e:	33 1f       	adc	r19, r19
    2310:	44 1f       	adc	r20, r20
    2312:	aa 1f       	adc	r26, r26
    2314:	a9 f3       	breq	.-22     	; 0x2300 <__divsf3_pse+0x10>
    2316:	35 d0       	rcall	.+106    	; 0x2382 <__divsf3_pse+0x92>
    2318:	0e 2e       	mov	r0, r30
    231a:	3a f0       	brmi	.+14     	; 0x232a <__divsf3_pse+0x3a>
    231c:	e0 e8       	ldi	r30, 0x80	; 128
    231e:	32 d0       	rcall	.+100    	; 0x2384 <__divsf3_pse+0x94>
    2320:	91 50       	subi	r25, 0x01	; 1
    2322:	50 40       	sbci	r21, 0x00	; 0
    2324:	e6 95       	lsr	r30
    2326:	00 1c       	adc	r0, r0
    2328:	ca f7       	brpl	.-14     	; 0x231c <__divsf3_pse+0x2c>
    232a:	2b d0       	rcall	.+86     	; 0x2382 <__divsf3_pse+0x92>
    232c:	fe 2f       	mov	r31, r30
    232e:	29 d0       	rcall	.+82     	; 0x2382 <__divsf3_pse+0x92>
    2330:	66 0f       	add	r22, r22
    2332:	77 1f       	adc	r23, r23
    2334:	88 1f       	adc	r24, r24
    2336:	bb 1f       	adc	r27, r27
    2338:	26 17       	cp	r18, r22
    233a:	37 07       	cpc	r19, r23
    233c:	48 07       	cpc	r20, r24
    233e:	ab 07       	cpc	r26, r27
    2340:	b0 e8       	ldi	r27, 0x80	; 128
    2342:	09 f0       	breq	.+2      	; 0x2346 <__divsf3_pse+0x56>
    2344:	bb 0b       	sbc	r27, r27
    2346:	80 2d       	mov	r24, r0
    2348:	bf 01       	movw	r22, r30
    234a:	ff 27       	eor	r31, r31
    234c:	93 58       	subi	r25, 0x83	; 131
    234e:	5f 4f       	sbci	r21, 0xFF	; 255
    2350:	3a f0       	brmi	.+14     	; 0x2360 <__divsf3_pse+0x70>
    2352:	9e 3f       	cpi	r25, 0xFE	; 254
    2354:	51 05       	cpc	r21, r1
    2356:	78 f0       	brcs	.+30     	; 0x2376 <__divsf3_pse+0x86>
    2358:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__fp_inf>
    235c:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__fp_szero>
    2360:	5f 3f       	cpi	r21, 0xFF	; 255
    2362:	e4 f3       	brlt	.-8      	; 0x235c <__divsf3_pse+0x6c>
    2364:	98 3e       	cpi	r25, 0xE8	; 232
    2366:	d4 f3       	brlt	.-12     	; 0x235c <__divsf3_pse+0x6c>
    2368:	86 95       	lsr	r24
    236a:	77 95       	ror	r23
    236c:	67 95       	ror	r22
    236e:	b7 95       	ror	r27
    2370:	f7 95       	ror	r31
    2372:	9f 5f       	subi	r25, 0xFF	; 255
    2374:	c9 f7       	brne	.-14     	; 0x2368 <__divsf3_pse+0x78>
    2376:	88 0f       	add	r24, r24
    2378:	91 1d       	adc	r25, r1
    237a:	96 95       	lsr	r25
    237c:	87 95       	ror	r24
    237e:	97 f9       	bld	r25, 7
    2380:	08 95       	ret
    2382:	e1 e0       	ldi	r30, 0x01	; 1
    2384:	66 0f       	add	r22, r22
    2386:	77 1f       	adc	r23, r23
    2388:	88 1f       	adc	r24, r24
    238a:	bb 1f       	adc	r27, r27
    238c:	62 17       	cp	r22, r18
    238e:	73 07       	cpc	r23, r19
    2390:	84 07       	cpc	r24, r20
    2392:	ba 07       	cpc	r27, r26
    2394:	20 f0       	brcs	.+8      	; 0x239e <__divsf3_pse+0xae>
    2396:	62 1b       	sub	r22, r18
    2398:	73 0b       	sbc	r23, r19
    239a:	84 0b       	sbc	r24, r20
    239c:	ba 0b       	sbc	r27, r26
    239e:	ee 1f       	adc	r30, r30
    23a0:	88 f7       	brcc	.-30     	; 0x2384 <__divsf3_pse+0x94>
    23a2:	e0 95       	com	r30
    23a4:	08 95       	ret

000023a6 <__fixunssfsi>:
    23a6:	0e 94 6f 12 	call	0x24de	; 0x24de <__fp_splitA>
    23aa:	88 f0       	brcs	.+34     	; 0x23ce <__fixunssfsi+0x28>
    23ac:	9f 57       	subi	r25, 0x7F	; 127
    23ae:	98 f0       	brcs	.+38     	; 0x23d6 <__fixunssfsi+0x30>
    23b0:	b9 2f       	mov	r27, r25
    23b2:	99 27       	eor	r25, r25
    23b4:	b7 51       	subi	r27, 0x17	; 23
    23b6:	b0 f0       	brcs	.+44     	; 0x23e4 <__fixunssfsi+0x3e>
    23b8:	e1 f0       	breq	.+56     	; 0x23f2 <__fixunssfsi+0x4c>
    23ba:	66 0f       	add	r22, r22
    23bc:	77 1f       	adc	r23, r23
    23be:	88 1f       	adc	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	1a f0       	brmi	.+6      	; 0x23ca <__fixunssfsi+0x24>
    23c4:	ba 95       	dec	r27
    23c6:	c9 f7       	brne	.-14     	; 0x23ba <__fixunssfsi+0x14>
    23c8:	14 c0       	rjmp	.+40     	; 0x23f2 <__fixunssfsi+0x4c>
    23ca:	b1 30       	cpi	r27, 0x01	; 1
    23cc:	91 f0       	breq	.+36     	; 0x23f2 <__fixunssfsi+0x4c>
    23ce:	0e 94 89 12 	call	0x2512	; 0x2512 <__fp_zero>
    23d2:	b1 e0       	ldi	r27, 0x01	; 1
    23d4:	08 95       	ret
    23d6:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__fp_zero>
    23da:	67 2f       	mov	r22, r23
    23dc:	78 2f       	mov	r23, r24
    23de:	88 27       	eor	r24, r24
    23e0:	b8 5f       	subi	r27, 0xF8	; 248
    23e2:	39 f0       	breq	.+14     	; 0x23f2 <__fixunssfsi+0x4c>
    23e4:	b9 3f       	cpi	r27, 0xF9	; 249
    23e6:	cc f3       	brlt	.-14     	; 0x23da <__fixunssfsi+0x34>
    23e8:	86 95       	lsr	r24
    23ea:	77 95       	ror	r23
    23ec:	67 95       	ror	r22
    23ee:	b3 95       	inc	r27
    23f0:	d9 f7       	brne	.-10     	; 0x23e8 <__fixunssfsi+0x42>
    23f2:	3e f4       	brtc	.+14     	; 0x2402 <__fixunssfsi+0x5c>
    23f4:	90 95       	com	r25
    23f6:	80 95       	com	r24
    23f8:	70 95       	com	r23
    23fa:	61 95       	neg	r22
    23fc:	7f 4f       	sbci	r23, 0xFF	; 255
    23fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2400:	9f 4f       	sbci	r25, 0xFF	; 255
    2402:	08 95       	ret

00002404 <__floatunsisf>:
    2404:	e8 94       	clt
    2406:	09 c0       	rjmp	.+18     	; 0x241a <__floatsisf+0x12>

00002408 <__floatsisf>:
    2408:	97 fb       	bst	r25, 7
    240a:	3e f4       	brtc	.+14     	; 0x241a <__floatsisf+0x12>
    240c:	90 95       	com	r25
    240e:	80 95       	com	r24
    2410:	70 95       	com	r23
    2412:	61 95       	neg	r22
    2414:	7f 4f       	sbci	r23, 0xFF	; 255
    2416:	8f 4f       	sbci	r24, 0xFF	; 255
    2418:	9f 4f       	sbci	r25, 0xFF	; 255
    241a:	99 23       	and	r25, r25
    241c:	a9 f0       	breq	.+42     	; 0x2448 <__floatsisf+0x40>
    241e:	f9 2f       	mov	r31, r25
    2420:	96 e9       	ldi	r25, 0x96	; 150
    2422:	bb 27       	eor	r27, r27
    2424:	93 95       	inc	r25
    2426:	f6 95       	lsr	r31
    2428:	87 95       	ror	r24
    242a:	77 95       	ror	r23
    242c:	67 95       	ror	r22
    242e:	b7 95       	ror	r27
    2430:	f1 11       	cpse	r31, r1
    2432:	f8 cf       	rjmp	.-16     	; 0x2424 <__floatsisf+0x1c>
    2434:	fa f4       	brpl	.+62     	; 0x2474 <__floatsisf+0x6c>
    2436:	bb 0f       	add	r27, r27
    2438:	11 f4       	brne	.+4      	; 0x243e <__floatsisf+0x36>
    243a:	60 ff       	sbrs	r22, 0
    243c:	1b c0       	rjmp	.+54     	; 0x2474 <__floatsisf+0x6c>
    243e:	6f 5f       	subi	r22, 0xFF	; 255
    2440:	7f 4f       	sbci	r23, 0xFF	; 255
    2442:	8f 4f       	sbci	r24, 0xFF	; 255
    2444:	9f 4f       	sbci	r25, 0xFF	; 255
    2446:	16 c0       	rjmp	.+44     	; 0x2474 <__floatsisf+0x6c>
    2448:	88 23       	and	r24, r24
    244a:	11 f0       	breq	.+4      	; 0x2450 <__floatsisf+0x48>
    244c:	96 e9       	ldi	r25, 0x96	; 150
    244e:	11 c0       	rjmp	.+34     	; 0x2472 <__floatsisf+0x6a>
    2450:	77 23       	and	r23, r23
    2452:	21 f0       	breq	.+8      	; 0x245c <__floatsisf+0x54>
    2454:	9e e8       	ldi	r25, 0x8E	; 142
    2456:	87 2f       	mov	r24, r23
    2458:	76 2f       	mov	r23, r22
    245a:	05 c0       	rjmp	.+10     	; 0x2466 <__floatsisf+0x5e>
    245c:	66 23       	and	r22, r22
    245e:	71 f0       	breq	.+28     	; 0x247c <__floatsisf+0x74>
    2460:	96 e8       	ldi	r25, 0x86	; 134
    2462:	86 2f       	mov	r24, r22
    2464:	70 e0       	ldi	r23, 0x00	; 0
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	2a f0       	brmi	.+10     	; 0x2474 <__floatsisf+0x6c>
    246a:	9a 95       	dec	r25
    246c:	66 0f       	add	r22, r22
    246e:	77 1f       	adc	r23, r23
    2470:	88 1f       	adc	r24, r24
    2472:	da f7       	brpl	.-10     	; 0x246a <__floatsisf+0x62>
    2474:	88 0f       	add	r24, r24
    2476:	96 95       	lsr	r25
    2478:	87 95       	ror	r24
    247a:	97 f9       	bld	r25, 7
    247c:	08 95       	ret

0000247e <__fp_inf>:
    247e:	97 f9       	bld	r25, 7
    2480:	9f 67       	ori	r25, 0x7F	; 127
    2482:	80 e8       	ldi	r24, 0x80	; 128
    2484:	70 e0       	ldi	r23, 0x00	; 0
    2486:	60 e0       	ldi	r22, 0x00	; 0
    2488:	08 95       	ret

0000248a <__fp_nan>:
    248a:	9f ef       	ldi	r25, 0xFF	; 255
    248c:	80 ec       	ldi	r24, 0xC0	; 192
    248e:	08 95       	ret

00002490 <__fp_pscA>:
    2490:	00 24       	eor	r0, r0
    2492:	0a 94       	dec	r0
    2494:	16 16       	cp	r1, r22
    2496:	17 06       	cpc	r1, r23
    2498:	18 06       	cpc	r1, r24
    249a:	09 06       	cpc	r0, r25
    249c:	08 95       	ret

0000249e <__fp_pscB>:
    249e:	00 24       	eor	r0, r0
    24a0:	0a 94       	dec	r0
    24a2:	12 16       	cp	r1, r18
    24a4:	13 06       	cpc	r1, r19
    24a6:	14 06       	cpc	r1, r20
    24a8:	05 06       	cpc	r0, r21
    24aa:	08 95       	ret

000024ac <__fp_round>:
    24ac:	09 2e       	mov	r0, r25
    24ae:	03 94       	inc	r0
    24b0:	00 0c       	add	r0, r0
    24b2:	11 f4       	brne	.+4      	; 0x24b8 <__fp_round+0xc>
    24b4:	88 23       	and	r24, r24
    24b6:	52 f0       	brmi	.+20     	; 0x24cc <__fp_round+0x20>
    24b8:	bb 0f       	add	r27, r27
    24ba:	40 f4       	brcc	.+16     	; 0x24cc <__fp_round+0x20>
    24bc:	bf 2b       	or	r27, r31
    24be:	11 f4       	brne	.+4      	; 0x24c4 <__fp_round+0x18>
    24c0:	60 ff       	sbrs	r22, 0
    24c2:	04 c0       	rjmp	.+8      	; 0x24cc <__fp_round+0x20>
    24c4:	6f 5f       	subi	r22, 0xFF	; 255
    24c6:	7f 4f       	sbci	r23, 0xFF	; 255
    24c8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ca:	9f 4f       	sbci	r25, 0xFF	; 255
    24cc:	08 95       	ret

000024ce <__fp_split3>:
    24ce:	57 fd       	sbrc	r21, 7
    24d0:	90 58       	subi	r25, 0x80	; 128
    24d2:	44 0f       	add	r20, r20
    24d4:	55 1f       	adc	r21, r21
    24d6:	59 f0       	breq	.+22     	; 0x24ee <__fp_splitA+0x10>
    24d8:	5f 3f       	cpi	r21, 0xFF	; 255
    24da:	71 f0       	breq	.+28     	; 0x24f8 <__fp_splitA+0x1a>
    24dc:	47 95       	ror	r20

000024de <__fp_splitA>:
    24de:	88 0f       	add	r24, r24
    24e0:	97 fb       	bst	r25, 7
    24e2:	99 1f       	adc	r25, r25
    24e4:	61 f0       	breq	.+24     	; 0x24fe <__fp_splitA+0x20>
    24e6:	9f 3f       	cpi	r25, 0xFF	; 255
    24e8:	79 f0       	breq	.+30     	; 0x2508 <__fp_splitA+0x2a>
    24ea:	87 95       	ror	r24
    24ec:	08 95       	ret
    24ee:	12 16       	cp	r1, r18
    24f0:	13 06       	cpc	r1, r19
    24f2:	14 06       	cpc	r1, r20
    24f4:	55 1f       	adc	r21, r21
    24f6:	f2 cf       	rjmp	.-28     	; 0x24dc <__fp_split3+0xe>
    24f8:	46 95       	lsr	r20
    24fa:	f1 df       	rcall	.-30     	; 0x24de <__fp_splitA>
    24fc:	08 c0       	rjmp	.+16     	; 0x250e <__fp_splitA+0x30>
    24fe:	16 16       	cp	r1, r22
    2500:	17 06       	cpc	r1, r23
    2502:	18 06       	cpc	r1, r24
    2504:	99 1f       	adc	r25, r25
    2506:	f1 cf       	rjmp	.-30     	; 0x24ea <__fp_splitA+0xc>
    2508:	86 95       	lsr	r24
    250a:	71 05       	cpc	r23, r1
    250c:	61 05       	cpc	r22, r1
    250e:	08 94       	sec
    2510:	08 95       	ret

00002512 <__fp_zero>:
    2512:	e8 94       	clt

00002514 <__fp_szero>:
    2514:	bb 27       	eor	r27, r27
    2516:	66 27       	eor	r22, r22
    2518:	77 27       	eor	r23, r23
    251a:	cb 01       	movw	r24, r22
    251c:	97 f9       	bld	r25, 7
    251e:	08 95       	ret

00002520 <__mulsf3>:
    2520:	0e 94 a3 12 	call	0x2546	; 0x2546 <__mulsf3x>
    2524:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__fp_round>
    2528:	0e 94 48 12 	call	0x2490	; 0x2490 <__fp_pscA>
    252c:	38 f0       	brcs	.+14     	; 0x253c <__mulsf3+0x1c>
    252e:	0e 94 4f 12 	call	0x249e	; 0x249e <__fp_pscB>
    2532:	20 f0       	brcs	.+8      	; 0x253c <__mulsf3+0x1c>
    2534:	95 23       	and	r25, r21
    2536:	11 f0       	breq	.+4      	; 0x253c <__mulsf3+0x1c>
    2538:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__fp_inf>
    253c:	0c 94 45 12 	jmp	0x248a	; 0x248a <__fp_nan>
    2540:	11 24       	eor	r1, r1
    2542:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__fp_szero>

00002546 <__mulsf3x>:
    2546:	0e 94 67 12 	call	0x24ce	; 0x24ce <__fp_split3>
    254a:	70 f3       	brcs	.-36     	; 0x2528 <__mulsf3+0x8>

0000254c <__mulsf3_pse>:
    254c:	95 9f       	mul	r25, r21
    254e:	c1 f3       	breq	.-16     	; 0x2540 <__mulsf3+0x20>
    2550:	95 0f       	add	r25, r21
    2552:	50 e0       	ldi	r21, 0x00	; 0
    2554:	55 1f       	adc	r21, r21
    2556:	62 9f       	mul	r22, r18
    2558:	f0 01       	movw	r30, r0
    255a:	72 9f       	mul	r23, r18
    255c:	bb 27       	eor	r27, r27
    255e:	f0 0d       	add	r31, r0
    2560:	b1 1d       	adc	r27, r1
    2562:	63 9f       	mul	r22, r19
    2564:	aa 27       	eor	r26, r26
    2566:	f0 0d       	add	r31, r0
    2568:	b1 1d       	adc	r27, r1
    256a:	aa 1f       	adc	r26, r26
    256c:	64 9f       	mul	r22, r20
    256e:	66 27       	eor	r22, r22
    2570:	b0 0d       	add	r27, r0
    2572:	a1 1d       	adc	r26, r1
    2574:	66 1f       	adc	r22, r22
    2576:	82 9f       	mul	r24, r18
    2578:	22 27       	eor	r18, r18
    257a:	b0 0d       	add	r27, r0
    257c:	a1 1d       	adc	r26, r1
    257e:	62 1f       	adc	r22, r18
    2580:	73 9f       	mul	r23, r19
    2582:	b0 0d       	add	r27, r0
    2584:	a1 1d       	adc	r26, r1
    2586:	62 1f       	adc	r22, r18
    2588:	83 9f       	mul	r24, r19
    258a:	a0 0d       	add	r26, r0
    258c:	61 1d       	adc	r22, r1
    258e:	22 1f       	adc	r18, r18
    2590:	74 9f       	mul	r23, r20
    2592:	33 27       	eor	r19, r19
    2594:	a0 0d       	add	r26, r0
    2596:	61 1d       	adc	r22, r1
    2598:	23 1f       	adc	r18, r19
    259a:	84 9f       	mul	r24, r20
    259c:	60 0d       	add	r22, r0
    259e:	21 1d       	adc	r18, r1
    25a0:	82 2f       	mov	r24, r18
    25a2:	76 2f       	mov	r23, r22
    25a4:	6a 2f       	mov	r22, r26
    25a6:	11 24       	eor	r1, r1
    25a8:	9f 57       	subi	r25, 0x7F	; 127
    25aa:	50 40       	sbci	r21, 0x00	; 0
    25ac:	9a f0       	brmi	.+38     	; 0x25d4 <__mulsf3_pse+0x88>
    25ae:	f1 f0       	breq	.+60     	; 0x25ec <__mulsf3_pse+0xa0>
    25b0:	88 23       	and	r24, r24
    25b2:	4a f0       	brmi	.+18     	; 0x25c6 <__mulsf3_pse+0x7a>
    25b4:	ee 0f       	add	r30, r30
    25b6:	ff 1f       	adc	r31, r31
    25b8:	bb 1f       	adc	r27, r27
    25ba:	66 1f       	adc	r22, r22
    25bc:	77 1f       	adc	r23, r23
    25be:	88 1f       	adc	r24, r24
    25c0:	91 50       	subi	r25, 0x01	; 1
    25c2:	50 40       	sbci	r21, 0x00	; 0
    25c4:	a9 f7       	brne	.-22     	; 0x25b0 <__mulsf3_pse+0x64>
    25c6:	9e 3f       	cpi	r25, 0xFE	; 254
    25c8:	51 05       	cpc	r21, r1
    25ca:	80 f0       	brcs	.+32     	; 0x25ec <__mulsf3_pse+0xa0>
    25cc:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__fp_inf>
    25d0:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__fp_szero>
    25d4:	5f 3f       	cpi	r21, 0xFF	; 255
    25d6:	e4 f3       	brlt	.-8      	; 0x25d0 <__mulsf3_pse+0x84>
    25d8:	98 3e       	cpi	r25, 0xE8	; 232
    25da:	d4 f3       	brlt	.-12     	; 0x25d0 <__mulsf3_pse+0x84>
    25dc:	86 95       	lsr	r24
    25de:	77 95       	ror	r23
    25e0:	67 95       	ror	r22
    25e2:	b7 95       	ror	r27
    25e4:	f7 95       	ror	r31
    25e6:	e7 95       	ror	r30
    25e8:	9f 5f       	subi	r25, 0xFF	; 255
    25ea:	c1 f7       	brne	.-16     	; 0x25dc <__mulsf3_pse+0x90>
    25ec:	fe 2b       	or	r31, r30
    25ee:	88 0f       	add	r24, r24
    25f0:	91 1d       	adc	r25, r1
    25f2:	96 95       	lsr	r25
    25f4:	87 95       	ror	r24
    25f6:	97 f9       	bld	r25, 7
    25f8:	08 95       	ret

000025fa <__udivmodhi4>:
    25fa:	aa 1b       	sub	r26, r26
    25fc:	bb 1b       	sub	r27, r27
    25fe:	51 e1       	ldi	r21, 0x11	; 17
    2600:	07 c0       	rjmp	.+14     	; 0x2610 <__udivmodhi4_ep>

00002602 <__udivmodhi4_loop>:
    2602:	aa 1f       	adc	r26, r26
    2604:	bb 1f       	adc	r27, r27
    2606:	a6 17       	cp	r26, r22
    2608:	b7 07       	cpc	r27, r23
    260a:	10 f0       	brcs	.+4      	; 0x2610 <__udivmodhi4_ep>
    260c:	a6 1b       	sub	r26, r22
    260e:	b7 0b       	sbc	r27, r23

00002610 <__udivmodhi4_ep>:
    2610:	88 1f       	adc	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	5a 95       	dec	r21
    2616:	a9 f7       	brne	.-22     	; 0x2602 <__udivmodhi4_loop>
    2618:	80 95       	com	r24
    261a:	90 95       	com	r25
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	08 95       	ret

00002622 <__divmodhi4>:
    2622:	97 fb       	bst	r25, 7
    2624:	07 2e       	mov	r0, r23
    2626:	16 f4       	brtc	.+4      	; 0x262c <__divmodhi4+0xa>
    2628:	00 94       	com	r0
    262a:	07 d0       	rcall	.+14     	; 0x263a <__divmodhi4_neg1>
    262c:	77 fd       	sbrc	r23, 7
    262e:	09 d0       	rcall	.+18     	; 0x2642 <__divmodhi4_neg2>
    2630:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__udivmodhi4>
    2634:	07 fc       	sbrc	r0, 7
    2636:	05 d0       	rcall	.+10     	; 0x2642 <__divmodhi4_neg2>
    2638:	3e f4       	brtc	.+14     	; 0x2648 <__divmodhi4_exit>

0000263a <__divmodhi4_neg1>:
    263a:	90 95       	com	r25
    263c:	81 95       	neg	r24
    263e:	9f 4f       	sbci	r25, 0xFF	; 255
    2640:	08 95       	ret

00002642 <__divmodhi4_neg2>:
    2642:	70 95       	com	r23
    2644:	61 95       	neg	r22
    2646:	7f 4f       	sbci	r23, 0xFF	; 255

00002648 <__divmodhi4_exit>:
    2648:	08 95       	ret

0000264a <__udivmodsi4>:
    264a:	a1 e2       	ldi	r26, 0x21	; 33
    264c:	1a 2e       	mov	r1, r26
    264e:	aa 1b       	sub	r26, r26
    2650:	bb 1b       	sub	r27, r27
    2652:	fd 01       	movw	r30, r26
    2654:	0d c0       	rjmp	.+26     	; 0x2670 <__udivmodsi4_ep>

00002656 <__udivmodsi4_loop>:
    2656:	aa 1f       	adc	r26, r26
    2658:	bb 1f       	adc	r27, r27
    265a:	ee 1f       	adc	r30, r30
    265c:	ff 1f       	adc	r31, r31
    265e:	a2 17       	cp	r26, r18
    2660:	b3 07       	cpc	r27, r19
    2662:	e4 07       	cpc	r30, r20
    2664:	f5 07       	cpc	r31, r21
    2666:	20 f0       	brcs	.+8      	; 0x2670 <__udivmodsi4_ep>
    2668:	a2 1b       	sub	r26, r18
    266a:	b3 0b       	sbc	r27, r19
    266c:	e4 0b       	sbc	r30, r20
    266e:	f5 0b       	sbc	r31, r21

00002670 <__udivmodsi4_ep>:
    2670:	66 1f       	adc	r22, r22
    2672:	77 1f       	adc	r23, r23
    2674:	88 1f       	adc	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	1a 94       	dec	r1
    267a:	69 f7       	brne	.-38     	; 0x2656 <__udivmodsi4_loop>
    267c:	60 95       	com	r22
    267e:	70 95       	com	r23
    2680:	80 95       	com	r24
    2682:	90 95       	com	r25
    2684:	9b 01       	movw	r18, r22
    2686:	ac 01       	movw	r20, r24
    2688:	bd 01       	movw	r22, r26
    268a:	cf 01       	movw	r24, r30
    268c:	08 95       	ret

0000268e <__divmodsi4>:
    268e:	05 2e       	mov	r0, r21
    2690:	97 fb       	bst	r25, 7
    2692:	1e f4       	brtc	.+6      	; 0x269a <__divmodsi4+0xc>
    2694:	00 94       	com	r0
    2696:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__negsi2>
    269a:	57 fd       	sbrc	r21, 7
    269c:	07 d0       	rcall	.+14     	; 0x26ac <__divmodsi4_neg2>
    269e:	0e 94 25 13 	call	0x264a	; 0x264a <__udivmodsi4>
    26a2:	07 fc       	sbrc	r0, 7
    26a4:	03 d0       	rcall	.+6      	; 0x26ac <__divmodsi4_neg2>
    26a6:	4e f4       	brtc	.+18     	; 0x26ba <__divmodsi4_exit>
    26a8:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__negsi2>

000026ac <__divmodsi4_neg2>:
    26ac:	50 95       	com	r21
    26ae:	40 95       	com	r20
    26b0:	30 95       	com	r19
    26b2:	21 95       	neg	r18
    26b4:	3f 4f       	sbci	r19, 0xFF	; 255
    26b6:	4f 4f       	sbci	r20, 0xFF	; 255
    26b8:	5f 4f       	sbci	r21, 0xFF	; 255

000026ba <__divmodsi4_exit>:
    26ba:	08 95       	ret

000026bc <__negsi2>:
    26bc:	90 95       	com	r25
    26be:	80 95       	com	r24
    26c0:	70 95       	com	r23
    26c2:	61 95       	neg	r22
    26c4:	7f 4f       	sbci	r23, 0xFF	; 255
    26c6:	8f 4f       	sbci	r24, 0xFF	; 255
    26c8:	9f 4f       	sbci	r25, 0xFF	; 255
    26ca:	08 95       	ret

000026cc <__tablejump2__>:
    26cc:	ee 0f       	add	r30, r30
    26ce:	ff 1f       	adc	r31, r31
    26d0:	05 90       	lpm	r0, Z+
    26d2:	f4 91       	lpm	r31, Z
    26d4:	e0 2d       	mov	r30, r0
    26d6:	09 94       	ijmp

000026d8 <do_rand>:
    26d8:	8f 92       	push	r8
    26da:	9f 92       	push	r9
    26dc:	af 92       	push	r10
    26de:	bf 92       	push	r11
    26e0:	cf 92       	push	r12
    26e2:	df 92       	push	r13
    26e4:	ef 92       	push	r14
    26e6:	ff 92       	push	r15
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	ec 01       	movw	r28, r24
    26ee:	68 81       	ld	r22, Y
    26f0:	79 81       	ldd	r23, Y+1	; 0x01
    26f2:	8a 81       	ldd	r24, Y+2	; 0x02
    26f4:	9b 81       	ldd	r25, Y+3	; 0x03
    26f6:	61 15       	cp	r22, r1
    26f8:	71 05       	cpc	r23, r1
    26fa:	81 05       	cpc	r24, r1
    26fc:	91 05       	cpc	r25, r1
    26fe:	21 f4       	brne	.+8      	; 0x2708 <do_rand+0x30>
    2700:	64 e2       	ldi	r22, 0x24	; 36
    2702:	79 ed       	ldi	r23, 0xD9	; 217
    2704:	8b e5       	ldi	r24, 0x5B	; 91
    2706:	97 e0       	ldi	r25, 0x07	; 7
    2708:	2d e1       	ldi	r18, 0x1D	; 29
    270a:	33 ef       	ldi	r19, 0xF3	; 243
    270c:	41 e0       	ldi	r20, 0x01	; 1
    270e:	50 e0       	ldi	r21, 0x00	; 0
    2710:	0e 94 47 13 	call	0x268e	; 0x268e <__divmodsi4>
    2714:	49 01       	movw	r8, r18
    2716:	5a 01       	movw	r10, r20
    2718:	9b 01       	movw	r18, r22
    271a:	ac 01       	movw	r20, r24
    271c:	a7 ea       	ldi	r26, 0xA7	; 167
    271e:	b1 e4       	ldi	r27, 0x41	; 65
    2720:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__muluhisi3>
    2724:	6b 01       	movw	r12, r22
    2726:	7c 01       	movw	r14, r24
    2728:	ac ee       	ldi	r26, 0xEC	; 236
    272a:	b4 ef       	ldi	r27, 0xF4	; 244
    272c:	a5 01       	movw	r20, r10
    272e:	94 01       	movw	r18, r8
    2730:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__mulohisi3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8c 0d       	add	r24, r12
    273a:	9d 1d       	adc	r25, r13
    273c:	ae 1d       	adc	r26, r14
    273e:	bf 1d       	adc	r27, r15
    2740:	b7 ff       	sbrs	r27, 7
    2742:	03 c0       	rjmp	.+6      	; 0x274a <do_rand+0x72>
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	a1 09       	sbc	r26, r1
    2748:	b0 48       	sbci	r27, 0x80	; 128
    274a:	88 83       	st	Y, r24
    274c:	99 83       	std	Y+1, r25	; 0x01
    274e:	aa 83       	std	Y+2, r26	; 0x02
    2750:	bb 83       	std	Y+3, r27	; 0x03
    2752:	9f 77       	andi	r25, 0x7F	; 127
    2754:	df 91       	pop	r29
    2756:	cf 91       	pop	r28
    2758:	ff 90       	pop	r15
    275a:	ef 90       	pop	r14
    275c:	df 90       	pop	r13
    275e:	cf 90       	pop	r12
    2760:	bf 90       	pop	r11
    2762:	af 90       	pop	r10
    2764:	9f 90       	pop	r9
    2766:	8f 90       	pop	r8
    2768:	08 95       	ret

0000276a <rand_r>:
    276a:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <do_rand>
    276e:	08 95       	ret

00002770 <rand>:
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <do_rand>
    2778:	08 95       	ret

0000277a <srand>:
    277a:	a0 e0       	ldi	r26, 0x00	; 0
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    2782:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2786:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    278a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    278e:	08 95       	ret

00002790 <tolower>:
    2790:	91 11       	cpse	r25, r1
    2792:	08 95       	ret
    2794:	81 54       	subi	r24, 0x41	; 65
    2796:	8a 51       	subi	r24, 0x1A	; 26
    2798:	08 f4       	brcc	.+2      	; 0x279c <tolower+0xc>
    279a:	80 5e       	subi	r24, 0xE0	; 224
    279c:	85 5a       	subi	r24, 0xA5	; 165
    279e:	08 95       	ret

000027a0 <fgetc>:
    27a0:	cf 93       	push	r28
    27a2:	df 93       	push	r29
    27a4:	ec 01       	movw	r28, r24
    27a6:	2b 81       	ldd	r18, Y+3	; 0x03
    27a8:	20 ff       	sbrs	r18, 0
    27aa:	33 c0       	rjmp	.+102    	; 0x2812 <fgetc+0x72>
    27ac:	26 ff       	sbrs	r18, 6
    27ae:	0a c0       	rjmp	.+20     	; 0x27c4 <fgetc+0x24>
    27b0:	2f 7b       	andi	r18, 0xBF	; 191
    27b2:	2b 83       	std	Y+3, r18	; 0x03
    27b4:	8e 81       	ldd	r24, Y+6	; 0x06
    27b6:	9f 81       	ldd	r25, Y+7	; 0x07
    27b8:	01 96       	adiw	r24, 0x01	; 1
    27ba:	9f 83       	std	Y+7, r25	; 0x07
    27bc:	8e 83       	std	Y+6, r24	; 0x06
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	29 c0       	rjmp	.+82     	; 0x2816 <fgetc+0x76>
    27c4:	22 ff       	sbrs	r18, 2
    27c6:	0f c0       	rjmp	.+30     	; 0x27e6 <fgetc+0x46>
    27c8:	e8 81       	ld	r30, Y
    27ca:	f9 81       	ldd	r31, Y+1	; 0x01
    27cc:	80 81       	ld	r24, Z
    27ce:	08 2e       	mov	r0, r24
    27d0:	00 0c       	add	r0, r0
    27d2:	99 0b       	sbc	r25, r25
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	19 f4       	brne	.+6      	; 0x27de <fgetc+0x3e>
    27d8:	20 62       	ori	r18, 0x20	; 32
    27da:	2b 83       	std	Y+3, r18	; 0x03
    27dc:	1a c0       	rjmp	.+52     	; 0x2812 <fgetc+0x72>
    27de:	31 96       	adiw	r30, 0x01	; 1
    27e0:	f9 83       	std	Y+1, r31	; 0x01
    27e2:	e8 83       	st	Y, r30
    27e4:	0e c0       	rjmp	.+28     	; 0x2802 <fgetc+0x62>
    27e6:	ea 85       	ldd	r30, Y+10	; 0x0a
    27e8:	fb 85       	ldd	r31, Y+11	; 0x0b
    27ea:	09 95       	icall
    27ec:	97 ff       	sbrs	r25, 7
    27ee:	09 c0       	rjmp	.+18     	; 0x2802 <fgetc+0x62>
    27f0:	2b 81       	ldd	r18, Y+3	; 0x03
    27f2:	01 96       	adiw	r24, 0x01	; 1
    27f4:	11 f0       	breq	.+4      	; 0x27fa <fgetc+0x5a>
    27f6:	80 e2       	ldi	r24, 0x20	; 32
    27f8:	01 c0       	rjmp	.+2      	; 0x27fc <fgetc+0x5c>
    27fa:	80 e1       	ldi	r24, 0x10	; 16
    27fc:	82 2b       	or	r24, r18
    27fe:	8b 83       	std	Y+3, r24	; 0x03
    2800:	08 c0       	rjmp	.+16     	; 0x2812 <fgetc+0x72>
    2802:	2e 81       	ldd	r18, Y+6	; 0x06
    2804:	3f 81       	ldd	r19, Y+7	; 0x07
    2806:	2f 5f       	subi	r18, 0xFF	; 255
    2808:	3f 4f       	sbci	r19, 0xFF	; 255
    280a:	3f 83       	std	Y+7, r19	; 0x07
    280c:	2e 83       	std	Y+6, r18	; 0x06
    280e:	99 27       	eor	r25, r25
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <fgetc+0x76>
    2812:	8f ef       	ldi	r24, 0xFF	; 255
    2814:	9f ef       	ldi	r25, 0xFF	; 255
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	08 95       	ret

0000281c <printf_P>:
    281c:	a0 e0       	ldi	r26, 0x00	; 0
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e4 e1       	ldi	r30, 0x14	; 20
    2822:	f4 e1       	ldi	r31, 0x14	; 20
    2824:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__prologue_saves__+0x1c>
    2828:	ae 01       	movw	r20, r28
    282a:	49 5f       	subi	r20, 0xF9	; 249
    282c:	5f 4f       	sbci	r21, 0xFF	; 255
    282e:	da 01       	movw	r26, r20
    2830:	6d 91       	ld	r22, X+
    2832:	7d 91       	ld	r23, X+
    2834:	ad 01       	movw	r20, r26
    2836:	06 ef       	ldi	r16, 0xF6	; 246
    2838:	12 e0       	ldi	r17, 0x02	; 2
    283a:	f8 01       	movw	r30, r16
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	dc 01       	movw	r26, r24
    2842:	13 96       	adiw	r26, 0x03	; 3
    2844:	2c 91       	ld	r18, X
    2846:	13 97       	sbiw	r26, 0x03	; 3
    2848:	28 60       	ori	r18, 0x08	; 8
    284a:	13 96       	adiw	r26, 0x03	; 3
    284c:	2c 93       	st	X, r18
    284e:	0e 94 34 14 	call	0x2868	; 0x2868 <vfprintf>
    2852:	d8 01       	movw	r26, r16
    2854:	12 96       	adiw	r26, 0x02	; 2
    2856:	ed 91       	ld	r30, X+
    2858:	fc 91       	ld	r31, X
    285a:	13 97       	sbiw	r26, 0x03	; 3
    285c:	23 81       	ldd	r18, Z+3	; 0x03
    285e:	27 7f       	andi	r18, 0xF7	; 247
    2860:	23 83       	std	Z+3, r18	; 0x03
    2862:	e4 e0       	ldi	r30, 0x04	; 4
    2864:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__epilogue_restores__+0x1c>

00002868 <vfprintf>:
    2868:	ab e0       	ldi	r26, 0x0B	; 11
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	ea e3       	ldi	r30, 0x3A	; 58
    286e:	f4 e1       	ldi	r31, 0x14	; 20
    2870:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <__prologue_saves__>
    2874:	6c 01       	movw	r12, r24
    2876:	7b 01       	movw	r14, r22
    2878:	8a 01       	movw	r16, r20
    287a:	fc 01       	movw	r30, r24
    287c:	17 82       	std	Z+7, r1	; 0x07
    287e:	16 82       	std	Z+6, r1	; 0x06
    2880:	83 81       	ldd	r24, Z+3	; 0x03
    2882:	81 ff       	sbrs	r24, 1
    2884:	cc c1       	rjmp	.+920    	; 0x2c1e <vfprintf+0x3b6>
    2886:	ce 01       	movw	r24, r28
    2888:	01 96       	adiw	r24, 0x01	; 1
    288a:	3c 01       	movw	r6, r24
    288c:	f6 01       	movw	r30, r12
    288e:	93 81       	ldd	r25, Z+3	; 0x03
    2890:	f7 01       	movw	r30, r14
    2892:	93 fd       	sbrc	r25, 3
    2894:	85 91       	lpm	r24, Z+
    2896:	93 ff       	sbrs	r25, 3
    2898:	81 91       	ld	r24, Z+
    289a:	7f 01       	movw	r14, r30
    289c:	88 23       	and	r24, r24
    289e:	09 f4       	brne	.+2      	; 0x28a2 <vfprintf+0x3a>
    28a0:	ba c1       	rjmp	.+884    	; 0x2c16 <vfprintf+0x3ae>
    28a2:	85 32       	cpi	r24, 0x25	; 37
    28a4:	39 f4       	brne	.+14     	; 0x28b4 <vfprintf+0x4c>
    28a6:	93 fd       	sbrc	r25, 3
    28a8:	85 91       	lpm	r24, Z+
    28aa:	93 ff       	sbrs	r25, 3
    28ac:	81 91       	ld	r24, Z+
    28ae:	7f 01       	movw	r14, r30
    28b0:	85 32       	cpi	r24, 0x25	; 37
    28b2:	29 f4       	brne	.+10     	; 0x28be <vfprintf+0x56>
    28b4:	b6 01       	movw	r22, r12
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <fputc>
    28bc:	e7 cf       	rjmp	.-50     	; 0x288c <vfprintf+0x24>
    28be:	91 2c       	mov	r9, r1
    28c0:	21 2c       	mov	r2, r1
    28c2:	31 2c       	mov	r3, r1
    28c4:	ff e1       	ldi	r31, 0x1F	; 31
    28c6:	f3 15       	cp	r31, r3
    28c8:	d8 f0       	brcs	.+54     	; 0x2900 <vfprintf+0x98>
    28ca:	8b 32       	cpi	r24, 0x2B	; 43
    28cc:	79 f0       	breq	.+30     	; 0x28ec <vfprintf+0x84>
    28ce:	38 f4       	brcc	.+14     	; 0x28de <vfprintf+0x76>
    28d0:	80 32       	cpi	r24, 0x20	; 32
    28d2:	79 f0       	breq	.+30     	; 0x28f2 <vfprintf+0x8a>
    28d4:	83 32       	cpi	r24, 0x23	; 35
    28d6:	a1 f4       	brne	.+40     	; 0x2900 <vfprintf+0x98>
    28d8:	23 2d       	mov	r18, r3
    28da:	20 61       	ori	r18, 0x10	; 16
    28dc:	1d c0       	rjmp	.+58     	; 0x2918 <vfprintf+0xb0>
    28de:	8d 32       	cpi	r24, 0x2D	; 45
    28e0:	61 f0       	breq	.+24     	; 0x28fa <vfprintf+0x92>
    28e2:	80 33       	cpi	r24, 0x30	; 48
    28e4:	69 f4       	brne	.+26     	; 0x2900 <vfprintf+0x98>
    28e6:	23 2d       	mov	r18, r3
    28e8:	21 60       	ori	r18, 0x01	; 1
    28ea:	16 c0       	rjmp	.+44     	; 0x2918 <vfprintf+0xb0>
    28ec:	83 2d       	mov	r24, r3
    28ee:	82 60       	ori	r24, 0x02	; 2
    28f0:	38 2e       	mov	r3, r24
    28f2:	e3 2d       	mov	r30, r3
    28f4:	e4 60       	ori	r30, 0x04	; 4
    28f6:	3e 2e       	mov	r3, r30
    28f8:	2a c0       	rjmp	.+84     	; 0x294e <vfprintf+0xe6>
    28fa:	f3 2d       	mov	r31, r3
    28fc:	f8 60       	ori	r31, 0x08	; 8
    28fe:	1d c0       	rjmp	.+58     	; 0x293a <vfprintf+0xd2>
    2900:	37 fc       	sbrc	r3, 7
    2902:	2d c0       	rjmp	.+90     	; 0x295e <vfprintf+0xf6>
    2904:	20 ed       	ldi	r18, 0xD0	; 208
    2906:	28 0f       	add	r18, r24
    2908:	2a 30       	cpi	r18, 0x0A	; 10
    290a:	40 f0       	brcs	.+16     	; 0x291c <vfprintf+0xb4>
    290c:	8e 32       	cpi	r24, 0x2E	; 46
    290e:	b9 f4       	brne	.+46     	; 0x293e <vfprintf+0xd6>
    2910:	36 fc       	sbrc	r3, 6
    2912:	81 c1       	rjmp	.+770    	; 0x2c16 <vfprintf+0x3ae>
    2914:	23 2d       	mov	r18, r3
    2916:	20 64       	ori	r18, 0x40	; 64
    2918:	32 2e       	mov	r3, r18
    291a:	19 c0       	rjmp	.+50     	; 0x294e <vfprintf+0xe6>
    291c:	36 fe       	sbrs	r3, 6
    291e:	06 c0       	rjmp	.+12     	; 0x292c <vfprintf+0xc4>
    2920:	8a e0       	ldi	r24, 0x0A	; 10
    2922:	98 9e       	mul	r9, r24
    2924:	20 0d       	add	r18, r0
    2926:	11 24       	eor	r1, r1
    2928:	92 2e       	mov	r9, r18
    292a:	11 c0       	rjmp	.+34     	; 0x294e <vfprintf+0xe6>
    292c:	ea e0       	ldi	r30, 0x0A	; 10
    292e:	2e 9e       	mul	r2, r30
    2930:	20 0d       	add	r18, r0
    2932:	11 24       	eor	r1, r1
    2934:	22 2e       	mov	r2, r18
    2936:	f3 2d       	mov	r31, r3
    2938:	f0 62       	ori	r31, 0x20	; 32
    293a:	3f 2e       	mov	r3, r31
    293c:	08 c0       	rjmp	.+16     	; 0x294e <vfprintf+0xe6>
    293e:	8c 36       	cpi	r24, 0x6C	; 108
    2940:	21 f4       	brne	.+8      	; 0x294a <vfprintf+0xe2>
    2942:	83 2d       	mov	r24, r3
    2944:	80 68       	ori	r24, 0x80	; 128
    2946:	38 2e       	mov	r3, r24
    2948:	02 c0       	rjmp	.+4      	; 0x294e <vfprintf+0xe6>
    294a:	88 36       	cpi	r24, 0x68	; 104
    294c:	41 f4       	brne	.+16     	; 0x295e <vfprintf+0xf6>
    294e:	f7 01       	movw	r30, r14
    2950:	93 fd       	sbrc	r25, 3
    2952:	85 91       	lpm	r24, Z+
    2954:	93 ff       	sbrs	r25, 3
    2956:	81 91       	ld	r24, Z+
    2958:	7f 01       	movw	r14, r30
    295a:	81 11       	cpse	r24, r1
    295c:	b3 cf       	rjmp	.-154    	; 0x28c4 <vfprintf+0x5c>
    295e:	98 2f       	mov	r25, r24
    2960:	9f 7d       	andi	r25, 0xDF	; 223
    2962:	95 54       	subi	r25, 0x45	; 69
    2964:	93 30       	cpi	r25, 0x03	; 3
    2966:	28 f4       	brcc	.+10     	; 0x2972 <vfprintf+0x10a>
    2968:	0c 5f       	subi	r16, 0xFC	; 252
    296a:	1f 4f       	sbci	r17, 0xFF	; 255
    296c:	9f e3       	ldi	r25, 0x3F	; 63
    296e:	99 83       	std	Y+1, r25	; 0x01
    2970:	0d c0       	rjmp	.+26     	; 0x298c <vfprintf+0x124>
    2972:	83 36       	cpi	r24, 0x63	; 99
    2974:	31 f0       	breq	.+12     	; 0x2982 <vfprintf+0x11a>
    2976:	83 37       	cpi	r24, 0x73	; 115
    2978:	71 f0       	breq	.+28     	; 0x2996 <vfprintf+0x12e>
    297a:	83 35       	cpi	r24, 0x53	; 83
    297c:	09 f0       	breq	.+2      	; 0x2980 <vfprintf+0x118>
    297e:	59 c0       	rjmp	.+178    	; 0x2a32 <vfprintf+0x1ca>
    2980:	21 c0       	rjmp	.+66     	; 0x29c4 <vfprintf+0x15c>
    2982:	f8 01       	movw	r30, r16
    2984:	80 81       	ld	r24, Z
    2986:	89 83       	std	Y+1, r24	; 0x01
    2988:	0e 5f       	subi	r16, 0xFE	; 254
    298a:	1f 4f       	sbci	r17, 0xFF	; 255
    298c:	88 24       	eor	r8, r8
    298e:	83 94       	inc	r8
    2990:	91 2c       	mov	r9, r1
    2992:	53 01       	movw	r10, r6
    2994:	13 c0       	rjmp	.+38     	; 0x29bc <vfprintf+0x154>
    2996:	28 01       	movw	r4, r16
    2998:	f2 e0       	ldi	r31, 0x02	; 2
    299a:	4f 0e       	add	r4, r31
    299c:	51 1c       	adc	r5, r1
    299e:	f8 01       	movw	r30, r16
    29a0:	a0 80       	ld	r10, Z
    29a2:	b1 80       	ldd	r11, Z+1	; 0x01
    29a4:	36 fe       	sbrs	r3, 6
    29a6:	03 c0       	rjmp	.+6      	; 0x29ae <vfprintf+0x146>
    29a8:	69 2d       	mov	r22, r9
    29aa:	70 e0       	ldi	r23, 0x00	; 0
    29ac:	02 c0       	rjmp	.+4      	; 0x29b2 <vfprintf+0x14a>
    29ae:	6f ef       	ldi	r22, 0xFF	; 255
    29b0:	7f ef       	ldi	r23, 0xFF	; 255
    29b2:	c5 01       	movw	r24, r10
    29b4:	0e 94 20 16 	call	0x2c40	; 0x2c40 <strnlen>
    29b8:	4c 01       	movw	r8, r24
    29ba:	82 01       	movw	r16, r4
    29bc:	f3 2d       	mov	r31, r3
    29be:	ff 77       	andi	r31, 0x7F	; 127
    29c0:	3f 2e       	mov	r3, r31
    29c2:	16 c0       	rjmp	.+44     	; 0x29f0 <vfprintf+0x188>
    29c4:	28 01       	movw	r4, r16
    29c6:	22 e0       	ldi	r18, 0x02	; 2
    29c8:	42 0e       	add	r4, r18
    29ca:	51 1c       	adc	r5, r1
    29cc:	f8 01       	movw	r30, r16
    29ce:	a0 80       	ld	r10, Z
    29d0:	b1 80       	ldd	r11, Z+1	; 0x01
    29d2:	36 fe       	sbrs	r3, 6
    29d4:	03 c0       	rjmp	.+6      	; 0x29dc <vfprintf+0x174>
    29d6:	69 2d       	mov	r22, r9
    29d8:	70 e0       	ldi	r23, 0x00	; 0
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <vfprintf+0x178>
    29dc:	6f ef       	ldi	r22, 0xFF	; 255
    29de:	7f ef       	ldi	r23, 0xFF	; 255
    29e0:	c5 01       	movw	r24, r10
    29e2:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <strnlen_P>
    29e6:	4c 01       	movw	r8, r24
    29e8:	f3 2d       	mov	r31, r3
    29ea:	f0 68       	ori	r31, 0x80	; 128
    29ec:	3f 2e       	mov	r3, r31
    29ee:	82 01       	movw	r16, r4
    29f0:	33 fc       	sbrc	r3, 3
    29f2:	1b c0       	rjmp	.+54     	; 0x2a2a <vfprintf+0x1c2>
    29f4:	82 2d       	mov	r24, r2
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	88 16       	cp	r8, r24
    29fa:	99 06       	cpc	r9, r25
    29fc:	b0 f4       	brcc	.+44     	; 0x2a2a <vfprintf+0x1c2>
    29fe:	b6 01       	movw	r22, r12
    2a00:	80 e2       	ldi	r24, 0x20	; 32
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <fputc>
    2a08:	2a 94       	dec	r2
    2a0a:	f4 cf       	rjmp	.-24     	; 0x29f4 <vfprintf+0x18c>
    2a0c:	f5 01       	movw	r30, r10
    2a0e:	37 fc       	sbrc	r3, 7
    2a10:	85 91       	lpm	r24, Z+
    2a12:	37 fe       	sbrs	r3, 7
    2a14:	81 91       	ld	r24, Z+
    2a16:	5f 01       	movw	r10, r30
    2a18:	b6 01       	movw	r22, r12
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <fputc>
    2a20:	21 10       	cpse	r2, r1
    2a22:	2a 94       	dec	r2
    2a24:	21 e0       	ldi	r18, 0x01	; 1
    2a26:	82 1a       	sub	r8, r18
    2a28:	91 08       	sbc	r9, r1
    2a2a:	81 14       	cp	r8, r1
    2a2c:	91 04       	cpc	r9, r1
    2a2e:	71 f7       	brne	.-36     	; 0x2a0c <vfprintf+0x1a4>
    2a30:	e8 c0       	rjmp	.+464    	; 0x2c02 <vfprintf+0x39a>
    2a32:	84 36       	cpi	r24, 0x64	; 100
    2a34:	11 f0       	breq	.+4      	; 0x2a3a <vfprintf+0x1d2>
    2a36:	89 36       	cpi	r24, 0x69	; 105
    2a38:	41 f5       	brne	.+80     	; 0x2a8a <vfprintf+0x222>
    2a3a:	f8 01       	movw	r30, r16
    2a3c:	37 fe       	sbrs	r3, 7
    2a3e:	07 c0       	rjmp	.+14     	; 0x2a4e <vfprintf+0x1e6>
    2a40:	60 81       	ld	r22, Z
    2a42:	71 81       	ldd	r23, Z+1	; 0x01
    2a44:	82 81       	ldd	r24, Z+2	; 0x02
    2a46:	93 81       	ldd	r25, Z+3	; 0x03
    2a48:	0c 5f       	subi	r16, 0xFC	; 252
    2a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4c:	08 c0       	rjmp	.+16     	; 0x2a5e <vfprintf+0x1f6>
    2a4e:	60 81       	ld	r22, Z
    2a50:	71 81       	ldd	r23, Z+1	; 0x01
    2a52:	07 2e       	mov	r0, r23
    2a54:	00 0c       	add	r0, r0
    2a56:	88 0b       	sbc	r24, r24
    2a58:	99 0b       	sbc	r25, r25
    2a5a:	0e 5f       	subi	r16, 0xFE	; 254
    2a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5e:	f3 2d       	mov	r31, r3
    2a60:	ff 76       	andi	r31, 0x6F	; 111
    2a62:	3f 2e       	mov	r3, r31
    2a64:	97 ff       	sbrs	r25, 7
    2a66:	09 c0       	rjmp	.+18     	; 0x2a7a <vfprintf+0x212>
    2a68:	90 95       	com	r25
    2a6a:	80 95       	com	r24
    2a6c:	70 95       	com	r23
    2a6e:	61 95       	neg	r22
    2a70:	7f 4f       	sbci	r23, 0xFF	; 255
    2a72:	8f 4f       	sbci	r24, 0xFF	; 255
    2a74:	9f 4f       	sbci	r25, 0xFF	; 255
    2a76:	f0 68       	ori	r31, 0x80	; 128
    2a78:	3f 2e       	mov	r3, r31
    2a7a:	2a e0       	ldi	r18, 0x0A	; 10
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	a3 01       	movw	r20, r6
    2a80:	0e 94 67 16 	call	0x2cce	; 0x2cce <__ultoa_invert>
    2a84:	88 2e       	mov	r8, r24
    2a86:	86 18       	sub	r8, r6
    2a88:	45 c0       	rjmp	.+138    	; 0x2b14 <vfprintf+0x2ac>
    2a8a:	85 37       	cpi	r24, 0x75	; 117
    2a8c:	31 f4       	brne	.+12     	; 0x2a9a <vfprintf+0x232>
    2a8e:	23 2d       	mov	r18, r3
    2a90:	2f 7e       	andi	r18, 0xEF	; 239
    2a92:	b2 2e       	mov	r11, r18
    2a94:	2a e0       	ldi	r18, 0x0A	; 10
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	25 c0       	rjmp	.+74     	; 0x2ae4 <vfprintf+0x27c>
    2a9a:	93 2d       	mov	r25, r3
    2a9c:	99 7f       	andi	r25, 0xF9	; 249
    2a9e:	b9 2e       	mov	r11, r25
    2aa0:	8f 36       	cpi	r24, 0x6F	; 111
    2aa2:	c1 f0       	breq	.+48     	; 0x2ad4 <vfprintf+0x26c>
    2aa4:	18 f4       	brcc	.+6      	; 0x2aac <vfprintf+0x244>
    2aa6:	88 35       	cpi	r24, 0x58	; 88
    2aa8:	79 f0       	breq	.+30     	; 0x2ac8 <vfprintf+0x260>
    2aaa:	b5 c0       	rjmp	.+362    	; 0x2c16 <vfprintf+0x3ae>
    2aac:	80 37       	cpi	r24, 0x70	; 112
    2aae:	19 f0       	breq	.+6      	; 0x2ab6 <vfprintf+0x24e>
    2ab0:	88 37       	cpi	r24, 0x78	; 120
    2ab2:	21 f0       	breq	.+8      	; 0x2abc <vfprintf+0x254>
    2ab4:	b0 c0       	rjmp	.+352    	; 0x2c16 <vfprintf+0x3ae>
    2ab6:	e9 2f       	mov	r30, r25
    2ab8:	e0 61       	ori	r30, 0x10	; 16
    2aba:	be 2e       	mov	r11, r30
    2abc:	b4 fe       	sbrs	r11, 4
    2abe:	0d c0       	rjmp	.+26     	; 0x2ada <vfprintf+0x272>
    2ac0:	fb 2d       	mov	r31, r11
    2ac2:	f4 60       	ori	r31, 0x04	; 4
    2ac4:	bf 2e       	mov	r11, r31
    2ac6:	09 c0       	rjmp	.+18     	; 0x2ada <vfprintf+0x272>
    2ac8:	34 fe       	sbrs	r3, 4
    2aca:	0a c0       	rjmp	.+20     	; 0x2ae0 <vfprintf+0x278>
    2acc:	29 2f       	mov	r18, r25
    2ace:	26 60       	ori	r18, 0x06	; 6
    2ad0:	b2 2e       	mov	r11, r18
    2ad2:	06 c0       	rjmp	.+12     	; 0x2ae0 <vfprintf+0x278>
    2ad4:	28 e0       	ldi	r18, 0x08	; 8
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	05 c0       	rjmp	.+10     	; 0x2ae4 <vfprintf+0x27c>
    2ada:	20 e1       	ldi	r18, 0x10	; 16
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	02 c0       	rjmp	.+4      	; 0x2ae4 <vfprintf+0x27c>
    2ae0:	20 e1       	ldi	r18, 0x10	; 16
    2ae2:	32 e0       	ldi	r19, 0x02	; 2
    2ae4:	f8 01       	movw	r30, r16
    2ae6:	b7 fe       	sbrs	r11, 7
    2ae8:	07 c0       	rjmp	.+14     	; 0x2af8 <vfprintf+0x290>
    2aea:	60 81       	ld	r22, Z
    2aec:	71 81       	ldd	r23, Z+1	; 0x01
    2aee:	82 81       	ldd	r24, Z+2	; 0x02
    2af0:	93 81       	ldd	r25, Z+3	; 0x03
    2af2:	0c 5f       	subi	r16, 0xFC	; 252
    2af4:	1f 4f       	sbci	r17, 0xFF	; 255
    2af6:	06 c0       	rjmp	.+12     	; 0x2b04 <vfprintf+0x29c>
    2af8:	60 81       	ld	r22, Z
    2afa:	71 81       	ldd	r23, Z+1	; 0x01
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	0e 5f       	subi	r16, 0xFE	; 254
    2b02:	1f 4f       	sbci	r17, 0xFF	; 255
    2b04:	a3 01       	movw	r20, r6
    2b06:	0e 94 67 16 	call	0x2cce	; 0x2cce <__ultoa_invert>
    2b0a:	88 2e       	mov	r8, r24
    2b0c:	86 18       	sub	r8, r6
    2b0e:	fb 2d       	mov	r31, r11
    2b10:	ff 77       	andi	r31, 0x7F	; 127
    2b12:	3f 2e       	mov	r3, r31
    2b14:	36 fe       	sbrs	r3, 6
    2b16:	0d c0       	rjmp	.+26     	; 0x2b32 <vfprintf+0x2ca>
    2b18:	23 2d       	mov	r18, r3
    2b1a:	2e 7f       	andi	r18, 0xFE	; 254
    2b1c:	a2 2e       	mov	r10, r18
    2b1e:	89 14       	cp	r8, r9
    2b20:	58 f4       	brcc	.+22     	; 0x2b38 <vfprintf+0x2d0>
    2b22:	34 fe       	sbrs	r3, 4
    2b24:	0b c0       	rjmp	.+22     	; 0x2b3c <vfprintf+0x2d4>
    2b26:	32 fc       	sbrc	r3, 2
    2b28:	09 c0       	rjmp	.+18     	; 0x2b3c <vfprintf+0x2d4>
    2b2a:	83 2d       	mov	r24, r3
    2b2c:	8e 7e       	andi	r24, 0xEE	; 238
    2b2e:	a8 2e       	mov	r10, r24
    2b30:	05 c0       	rjmp	.+10     	; 0x2b3c <vfprintf+0x2d4>
    2b32:	b8 2c       	mov	r11, r8
    2b34:	a3 2c       	mov	r10, r3
    2b36:	03 c0       	rjmp	.+6      	; 0x2b3e <vfprintf+0x2d6>
    2b38:	b8 2c       	mov	r11, r8
    2b3a:	01 c0       	rjmp	.+2      	; 0x2b3e <vfprintf+0x2d6>
    2b3c:	b9 2c       	mov	r11, r9
    2b3e:	a4 fe       	sbrs	r10, 4
    2b40:	0f c0       	rjmp	.+30     	; 0x2b60 <vfprintf+0x2f8>
    2b42:	fe 01       	movw	r30, r28
    2b44:	e8 0d       	add	r30, r8
    2b46:	f1 1d       	adc	r31, r1
    2b48:	80 81       	ld	r24, Z
    2b4a:	80 33       	cpi	r24, 0x30	; 48
    2b4c:	21 f4       	brne	.+8      	; 0x2b56 <vfprintf+0x2ee>
    2b4e:	9a 2d       	mov	r25, r10
    2b50:	99 7e       	andi	r25, 0xE9	; 233
    2b52:	a9 2e       	mov	r10, r25
    2b54:	09 c0       	rjmp	.+18     	; 0x2b68 <vfprintf+0x300>
    2b56:	a2 fe       	sbrs	r10, 2
    2b58:	06 c0       	rjmp	.+12     	; 0x2b66 <vfprintf+0x2fe>
    2b5a:	b3 94       	inc	r11
    2b5c:	b3 94       	inc	r11
    2b5e:	04 c0       	rjmp	.+8      	; 0x2b68 <vfprintf+0x300>
    2b60:	8a 2d       	mov	r24, r10
    2b62:	86 78       	andi	r24, 0x86	; 134
    2b64:	09 f0       	breq	.+2      	; 0x2b68 <vfprintf+0x300>
    2b66:	b3 94       	inc	r11
    2b68:	a3 fc       	sbrc	r10, 3
    2b6a:	11 c0       	rjmp	.+34     	; 0x2b8e <vfprintf+0x326>
    2b6c:	a0 fe       	sbrs	r10, 0
    2b6e:	06 c0       	rjmp	.+12     	; 0x2b7c <vfprintf+0x314>
    2b70:	b2 14       	cp	r11, r2
    2b72:	88 f4       	brcc	.+34     	; 0x2b96 <vfprintf+0x32e>
    2b74:	28 0c       	add	r2, r8
    2b76:	92 2c       	mov	r9, r2
    2b78:	9b 18       	sub	r9, r11
    2b7a:	0e c0       	rjmp	.+28     	; 0x2b98 <vfprintf+0x330>
    2b7c:	b2 14       	cp	r11, r2
    2b7e:	60 f4       	brcc	.+24     	; 0x2b98 <vfprintf+0x330>
    2b80:	b6 01       	movw	r22, r12
    2b82:	80 e2       	ldi	r24, 0x20	; 32
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <fputc>
    2b8a:	b3 94       	inc	r11
    2b8c:	f7 cf       	rjmp	.-18     	; 0x2b7c <vfprintf+0x314>
    2b8e:	b2 14       	cp	r11, r2
    2b90:	18 f4       	brcc	.+6      	; 0x2b98 <vfprintf+0x330>
    2b92:	2b 18       	sub	r2, r11
    2b94:	02 c0       	rjmp	.+4      	; 0x2b9a <vfprintf+0x332>
    2b96:	98 2c       	mov	r9, r8
    2b98:	21 2c       	mov	r2, r1
    2b9a:	a4 fe       	sbrs	r10, 4
    2b9c:	10 c0       	rjmp	.+32     	; 0x2bbe <vfprintf+0x356>
    2b9e:	b6 01       	movw	r22, r12
    2ba0:	80 e3       	ldi	r24, 0x30	; 48
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <fputc>
    2ba8:	a2 fe       	sbrs	r10, 2
    2baa:	17 c0       	rjmp	.+46     	; 0x2bda <vfprintf+0x372>
    2bac:	a1 fc       	sbrc	r10, 1
    2bae:	03 c0       	rjmp	.+6      	; 0x2bb6 <vfprintf+0x34e>
    2bb0:	88 e7       	ldi	r24, 0x78	; 120
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	02 c0       	rjmp	.+4      	; 0x2bba <vfprintf+0x352>
    2bb6:	88 e5       	ldi	r24, 0x58	; 88
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	b6 01       	movw	r22, r12
    2bbc:	0c c0       	rjmp	.+24     	; 0x2bd6 <vfprintf+0x36e>
    2bbe:	8a 2d       	mov	r24, r10
    2bc0:	86 78       	andi	r24, 0x86	; 134
    2bc2:	59 f0       	breq	.+22     	; 0x2bda <vfprintf+0x372>
    2bc4:	a1 fe       	sbrs	r10, 1
    2bc6:	02 c0       	rjmp	.+4      	; 0x2bcc <vfprintf+0x364>
    2bc8:	8b e2       	ldi	r24, 0x2B	; 43
    2bca:	01 c0       	rjmp	.+2      	; 0x2bce <vfprintf+0x366>
    2bcc:	80 e2       	ldi	r24, 0x20	; 32
    2bce:	a7 fc       	sbrc	r10, 7
    2bd0:	8d e2       	ldi	r24, 0x2D	; 45
    2bd2:	b6 01       	movw	r22, r12
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <fputc>
    2bda:	89 14       	cp	r8, r9
    2bdc:	38 f4       	brcc	.+14     	; 0x2bec <vfprintf+0x384>
    2bde:	b6 01       	movw	r22, r12
    2be0:	80 e3       	ldi	r24, 0x30	; 48
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <fputc>
    2be8:	9a 94       	dec	r9
    2bea:	f7 cf       	rjmp	.-18     	; 0x2bda <vfprintf+0x372>
    2bec:	8a 94       	dec	r8
    2bee:	f3 01       	movw	r30, r6
    2bf0:	e8 0d       	add	r30, r8
    2bf2:	f1 1d       	adc	r31, r1
    2bf4:	80 81       	ld	r24, Z
    2bf6:	b6 01       	movw	r22, r12
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <fputc>
    2bfe:	81 10       	cpse	r8, r1
    2c00:	f5 cf       	rjmp	.-22     	; 0x2bec <vfprintf+0x384>
    2c02:	22 20       	and	r2, r2
    2c04:	09 f4       	brne	.+2      	; 0x2c08 <vfprintf+0x3a0>
    2c06:	42 ce       	rjmp	.-892    	; 0x288c <vfprintf+0x24>
    2c08:	b6 01       	movw	r22, r12
    2c0a:	80 e2       	ldi	r24, 0x20	; 32
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <fputc>
    2c12:	2a 94       	dec	r2
    2c14:	f6 cf       	rjmp	.-20     	; 0x2c02 <vfprintf+0x39a>
    2c16:	f6 01       	movw	r30, r12
    2c18:	86 81       	ldd	r24, Z+6	; 0x06
    2c1a:	97 81       	ldd	r25, Z+7	; 0x07
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <vfprintf+0x3ba>
    2c1e:	8f ef       	ldi	r24, 0xFF	; 255
    2c20:	9f ef       	ldi	r25, 0xFF	; 255
    2c22:	2b 96       	adiw	r28, 0x0b	; 11
    2c24:	e2 e1       	ldi	r30, 0x12	; 18
    2c26:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__epilogue_restores__>

00002c2a <strnlen_P>:
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	05 90       	lpm	r0, Z+
    2c2e:	61 50       	subi	r22, 0x01	; 1
    2c30:	70 40       	sbci	r23, 0x00	; 0
    2c32:	01 10       	cpse	r0, r1
    2c34:	d8 f7       	brcc	.-10     	; 0x2c2c <strnlen_P+0x2>
    2c36:	80 95       	com	r24
    2c38:	90 95       	com	r25
    2c3a:	8e 0f       	add	r24, r30
    2c3c:	9f 1f       	adc	r25, r31
    2c3e:	08 95       	ret

00002c40 <strnlen>:
    2c40:	fc 01       	movw	r30, r24
    2c42:	61 50       	subi	r22, 0x01	; 1
    2c44:	70 40       	sbci	r23, 0x00	; 0
    2c46:	01 90       	ld	r0, Z+
    2c48:	01 10       	cpse	r0, r1
    2c4a:	d8 f7       	brcc	.-10     	; 0x2c42 <strnlen+0x2>
    2c4c:	80 95       	com	r24
    2c4e:	90 95       	com	r25
    2c50:	8e 0f       	add	r24, r30
    2c52:	9f 1f       	adc	r25, r31
    2c54:	08 95       	ret

00002c56 <fputc>:
    2c56:	0f 93       	push	r16
    2c58:	1f 93       	push	r17
    2c5a:	cf 93       	push	r28
    2c5c:	df 93       	push	r29
    2c5e:	fb 01       	movw	r30, r22
    2c60:	23 81       	ldd	r18, Z+3	; 0x03
    2c62:	21 fd       	sbrc	r18, 1
    2c64:	03 c0       	rjmp	.+6      	; 0x2c6c <fputc+0x16>
    2c66:	8f ef       	ldi	r24, 0xFF	; 255
    2c68:	9f ef       	ldi	r25, 0xFF	; 255
    2c6a:	2c c0       	rjmp	.+88     	; 0x2cc4 <fputc+0x6e>
    2c6c:	22 ff       	sbrs	r18, 2
    2c6e:	16 c0       	rjmp	.+44     	; 0x2c9c <fputc+0x46>
    2c70:	46 81       	ldd	r20, Z+6	; 0x06
    2c72:	57 81       	ldd	r21, Z+7	; 0x07
    2c74:	24 81       	ldd	r18, Z+4	; 0x04
    2c76:	35 81       	ldd	r19, Z+5	; 0x05
    2c78:	42 17       	cp	r20, r18
    2c7a:	53 07       	cpc	r21, r19
    2c7c:	44 f4       	brge	.+16     	; 0x2c8e <fputc+0x38>
    2c7e:	a0 81       	ld	r26, Z
    2c80:	b1 81       	ldd	r27, Z+1	; 0x01
    2c82:	9d 01       	movw	r18, r26
    2c84:	2f 5f       	subi	r18, 0xFF	; 255
    2c86:	3f 4f       	sbci	r19, 0xFF	; 255
    2c88:	31 83       	std	Z+1, r19	; 0x01
    2c8a:	20 83       	st	Z, r18
    2c8c:	8c 93       	st	X, r24
    2c8e:	26 81       	ldd	r18, Z+6	; 0x06
    2c90:	37 81       	ldd	r19, Z+7	; 0x07
    2c92:	2f 5f       	subi	r18, 0xFF	; 255
    2c94:	3f 4f       	sbci	r19, 0xFF	; 255
    2c96:	37 83       	std	Z+7, r19	; 0x07
    2c98:	26 83       	std	Z+6, r18	; 0x06
    2c9a:	14 c0       	rjmp	.+40     	; 0x2cc4 <fputc+0x6e>
    2c9c:	8b 01       	movw	r16, r22
    2c9e:	ec 01       	movw	r28, r24
    2ca0:	fb 01       	movw	r30, r22
    2ca2:	00 84       	ldd	r0, Z+8	; 0x08
    2ca4:	f1 85       	ldd	r31, Z+9	; 0x09
    2ca6:	e0 2d       	mov	r30, r0
    2ca8:	09 95       	icall
    2caa:	89 2b       	or	r24, r25
    2cac:	e1 f6       	brne	.-72     	; 0x2c66 <fputc+0x10>
    2cae:	d8 01       	movw	r26, r16
    2cb0:	16 96       	adiw	r26, 0x06	; 6
    2cb2:	8d 91       	ld	r24, X+
    2cb4:	9c 91       	ld	r25, X
    2cb6:	17 97       	sbiw	r26, 0x07	; 7
    2cb8:	01 96       	adiw	r24, 0x01	; 1
    2cba:	17 96       	adiw	r26, 0x07	; 7
    2cbc:	9c 93       	st	X, r25
    2cbe:	8e 93       	st	-X, r24
    2cc0:	16 97       	sbiw	r26, 0x06	; 6
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	df 91       	pop	r29
    2cc6:	cf 91       	pop	r28
    2cc8:	1f 91       	pop	r17
    2cca:	0f 91       	pop	r16
    2ccc:	08 95       	ret

00002cce <__ultoa_invert>:
    2cce:	fa 01       	movw	r30, r20
    2cd0:	aa 27       	eor	r26, r26
    2cd2:	28 30       	cpi	r18, 0x08	; 8
    2cd4:	51 f1       	breq	.+84     	; 0x2d2a <__ultoa_invert+0x5c>
    2cd6:	20 31       	cpi	r18, 0x10	; 16
    2cd8:	81 f1       	breq	.+96     	; 0x2d3a <__ultoa_invert+0x6c>
    2cda:	e8 94       	clt
    2cdc:	6f 93       	push	r22
    2cde:	6e 7f       	andi	r22, 0xFE	; 254
    2ce0:	6e 5f       	subi	r22, 0xFE	; 254
    2ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce8:	af 4f       	sbci	r26, 0xFF	; 255
    2cea:	b1 e0       	ldi	r27, 0x01	; 1
    2cec:	3e d0       	rcall	.+124    	; 0x2d6a <__ultoa_invert+0x9c>
    2cee:	b4 e0       	ldi	r27, 0x04	; 4
    2cf0:	3c d0       	rcall	.+120    	; 0x2d6a <__ultoa_invert+0x9c>
    2cf2:	67 0f       	add	r22, r23
    2cf4:	78 1f       	adc	r23, r24
    2cf6:	89 1f       	adc	r24, r25
    2cf8:	9a 1f       	adc	r25, r26
    2cfa:	a1 1d       	adc	r26, r1
    2cfc:	68 0f       	add	r22, r24
    2cfe:	79 1f       	adc	r23, r25
    2d00:	8a 1f       	adc	r24, r26
    2d02:	91 1d       	adc	r25, r1
    2d04:	a1 1d       	adc	r26, r1
    2d06:	6a 0f       	add	r22, r26
    2d08:	71 1d       	adc	r23, r1
    2d0a:	81 1d       	adc	r24, r1
    2d0c:	91 1d       	adc	r25, r1
    2d0e:	a1 1d       	adc	r26, r1
    2d10:	20 d0       	rcall	.+64     	; 0x2d52 <__ultoa_invert+0x84>
    2d12:	09 f4       	brne	.+2      	; 0x2d16 <__ultoa_invert+0x48>
    2d14:	68 94       	set
    2d16:	3f 91       	pop	r19
    2d18:	2a e0       	ldi	r18, 0x0A	; 10
    2d1a:	26 9f       	mul	r18, r22
    2d1c:	11 24       	eor	r1, r1
    2d1e:	30 19       	sub	r19, r0
    2d20:	30 5d       	subi	r19, 0xD0	; 208
    2d22:	31 93       	st	Z+, r19
    2d24:	de f6       	brtc	.-74     	; 0x2cdc <__ultoa_invert+0xe>
    2d26:	cf 01       	movw	r24, r30
    2d28:	08 95       	ret
    2d2a:	46 2f       	mov	r20, r22
    2d2c:	47 70       	andi	r20, 0x07	; 7
    2d2e:	40 5d       	subi	r20, 0xD0	; 208
    2d30:	41 93       	st	Z+, r20
    2d32:	b3 e0       	ldi	r27, 0x03	; 3
    2d34:	0f d0       	rcall	.+30     	; 0x2d54 <__ultoa_invert+0x86>
    2d36:	c9 f7       	brne	.-14     	; 0x2d2a <__ultoa_invert+0x5c>
    2d38:	f6 cf       	rjmp	.-20     	; 0x2d26 <__ultoa_invert+0x58>
    2d3a:	46 2f       	mov	r20, r22
    2d3c:	4f 70       	andi	r20, 0x0F	; 15
    2d3e:	40 5d       	subi	r20, 0xD0	; 208
    2d40:	4a 33       	cpi	r20, 0x3A	; 58
    2d42:	18 f0       	brcs	.+6      	; 0x2d4a <__ultoa_invert+0x7c>
    2d44:	49 5d       	subi	r20, 0xD9	; 217
    2d46:	31 fd       	sbrc	r19, 1
    2d48:	40 52       	subi	r20, 0x20	; 32
    2d4a:	41 93       	st	Z+, r20
    2d4c:	02 d0       	rcall	.+4      	; 0x2d52 <__ultoa_invert+0x84>
    2d4e:	a9 f7       	brne	.-22     	; 0x2d3a <__ultoa_invert+0x6c>
    2d50:	ea cf       	rjmp	.-44     	; 0x2d26 <__ultoa_invert+0x58>
    2d52:	b4 e0       	ldi	r27, 0x04	; 4
    2d54:	a6 95       	lsr	r26
    2d56:	97 95       	ror	r25
    2d58:	87 95       	ror	r24
    2d5a:	77 95       	ror	r23
    2d5c:	67 95       	ror	r22
    2d5e:	ba 95       	dec	r27
    2d60:	c9 f7       	brne	.-14     	; 0x2d54 <__ultoa_invert+0x86>
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	61 05       	cpc	r22, r1
    2d66:	71 05       	cpc	r23, r1
    2d68:	08 95       	ret
    2d6a:	9b 01       	movw	r18, r22
    2d6c:	ac 01       	movw	r20, r24
    2d6e:	0a 2e       	mov	r0, r26
    2d70:	06 94       	lsr	r0
    2d72:	57 95       	ror	r21
    2d74:	47 95       	ror	r20
    2d76:	37 95       	ror	r19
    2d78:	27 95       	ror	r18
    2d7a:	ba 95       	dec	r27
    2d7c:	c9 f7       	brne	.-14     	; 0x2d70 <__ultoa_invert+0xa2>
    2d7e:	62 0f       	add	r22, r18
    2d80:	73 1f       	adc	r23, r19
    2d82:	84 1f       	adc	r24, r20
    2d84:	95 1f       	adc	r25, r21
    2d86:	a0 1d       	adc	r26, r0
    2d88:	08 95       	ret

00002d8a <__muluhisi3>:
    2d8a:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__umulhisi3>
    2d8e:	a5 9f       	mul	r26, r21
    2d90:	90 0d       	add	r25, r0
    2d92:	b4 9f       	mul	r27, r20
    2d94:	90 0d       	add	r25, r0
    2d96:	a4 9f       	mul	r26, r20
    2d98:	80 0d       	add	r24, r0
    2d9a:	91 1d       	adc	r25, r1
    2d9c:	11 24       	eor	r1, r1
    2d9e:	08 95       	ret

00002da0 <__mulshisi3>:
    2da0:	b7 ff       	sbrs	r27, 7
    2da2:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__muluhisi3>

00002da6 <__mulohisi3>:
    2da6:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__muluhisi3>
    2daa:	82 1b       	sub	r24, r18
    2dac:	93 0b       	sbc	r25, r19
    2dae:	08 95       	ret

00002db0 <__prologue_saves__>:
    2db0:	2f 92       	push	r2
    2db2:	3f 92       	push	r3
    2db4:	4f 92       	push	r4
    2db6:	5f 92       	push	r5
    2db8:	6f 92       	push	r6
    2dba:	7f 92       	push	r7
    2dbc:	8f 92       	push	r8
    2dbe:	9f 92       	push	r9
    2dc0:	af 92       	push	r10
    2dc2:	bf 92       	push	r11
    2dc4:	cf 92       	push	r12
    2dc6:	df 92       	push	r13
    2dc8:	ef 92       	push	r14
    2dca:	ff 92       	push	r15
    2dcc:	0f 93       	push	r16
    2dce:	1f 93       	push	r17
    2dd0:	cf 93       	push	r28
    2dd2:	df 93       	push	r29
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	ca 1b       	sub	r28, r26
    2dda:	db 0b       	sbc	r29, r27
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	f8 94       	cli
    2de0:	de bf       	out	0x3e, r29	; 62
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	cd bf       	out	0x3d, r28	; 61
    2de6:	09 94       	ijmp

00002de8 <__epilogue_restores__>:
    2de8:	2a 88       	ldd	r2, Y+18	; 0x12
    2dea:	39 88       	ldd	r3, Y+17	; 0x11
    2dec:	48 88       	ldd	r4, Y+16	; 0x10
    2dee:	5f 84       	ldd	r5, Y+15	; 0x0f
    2df0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2df2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2df4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2df6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2df8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dfa:	b9 84       	ldd	r11, Y+9	; 0x09
    2dfc:	c8 84       	ldd	r12, Y+8	; 0x08
    2dfe:	df 80       	ldd	r13, Y+7	; 0x07
    2e00:	ee 80       	ldd	r14, Y+6	; 0x06
    2e02:	fd 80       	ldd	r15, Y+5	; 0x05
    2e04:	0c 81       	ldd	r16, Y+4	; 0x04
    2e06:	1b 81       	ldd	r17, Y+3	; 0x03
    2e08:	aa 81       	ldd	r26, Y+2	; 0x02
    2e0a:	b9 81       	ldd	r27, Y+1	; 0x01
    2e0c:	ce 0f       	add	r28, r30
    2e0e:	d1 1d       	adc	r29, r1
    2e10:	0f b6       	in	r0, 0x3f	; 63
    2e12:	f8 94       	cli
    2e14:	de bf       	out	0x3e, r29	; 62
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	cd bf       	out	0x3d, r28	; 61
    2e1a:	ed 01       	movw	r28, r26
    2e1c:	08 95       	ret

00002e1e <__umulhisi3>:
    2e1e:	a2 9f       	mul	r26, r18
    2e20:	b0 01       	movw	r22, r0
    2e22:	b3 9f       	mul	r27, r19
    2e24:	c0 01       	movw	r24, r0
    2e26:	a3 9f       	mul	r26, r19
    2e28:	70 0d       	add	r23, r0
    2e2a:	81 1d       	adc	r24, r1
    2e2c:	11 24       	eor	r1, r1
    2e2e:	91 1d       	adc	r25, r1
    2e30:	b2 9f       	mul	r27, r18
    2e32:	70 0d       	add	r23, r0
    2e34:	81 1d       	adc	r24, r1
    2e36:	11 24       	eor	r1, r1
    2e38:	91 1d       	adc	r25, r1
    2e3a:	08 95       	ret

00002e3c <_exit>:
    2e3c:	f8 94       	cli

00002e3e <__stop_program>:
    2e3e:	ff cf       	rjmp	.-2      	; 0x2e3e <__stop_program>
